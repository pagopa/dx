"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4662],{3998:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"conventions/pull-requests/changeset","title":"Changeset","description":"This document provides guidelines on how to create and manage changesets, which","source":"@site/docs/conventions/pull-requests/changeset.md","sourceDirName":"conventions/pull-requests","slug":"/conventions/pull-requests/changeset","permalink":"/dx/pr-preview/pr-518/docs/conventions/pull-requests/changeset","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/conventions/pull-requests/changeset.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Changeset","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Auto Merge","permalink":"/dx/pr-preview/pr-518/docs/conventions/pull-requests/auto-merge"},"next":{"title":"Contribution Acceptance Criteria","permalink":"/dx/pr-preview/pr-518/docs/conventions/pull-requests/acceptance-criteria"}}');var o=t(3881),s=t(4718);const r={sidebar_label:"Changeset",sidebar_position:3},i="Changeset",c={},l=[{value:"Create a Changeset",id:"create-a-changeset",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Example",id:"example",level:3},{value:"Monorepo",id:"monorepo",level:2},{value:"Example",id:"example-1",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"changeset",children:"Changeset"})}),"\n",(0,o.jsx)(n.p,{children:"This document provides guidelines on how to create and manage changesets, which\nare used to document and track changes in the codebase. Proper use of changesets\nensures that all modifications are recorded systematically, facilitating the\ntracking and auditing of changes over time."}),"\n",(0,o.jsx)(n.h2,{id:"create-a-changeset",children:"Create a Changeset"}),"\n",(0,o.jsx)(n.p,{children:"There are multiple ways to create a changeset file:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Follow the\n",(0,o.jsx)(n.a,{href:"https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md",children:"official Changesets guide"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/apps/changeset-bot",children:"Enable the Changeset bot"})," in your\nrepository and interact with it on pull requests. The bot will add a comment\nto each PR, summarizing whether it includes a changeset or not. If it doesn\u2019t,\nyou can create one directly through the GitHub UI."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,o.jsxs)(n.p,{children:["When the code added in a PR breaks backward compatibility, a migration path or\nguide must be included in the changeset with a ",(0,o.jsx)(n.code,{children:"major"})," update. This ensures that\nusers can transition smoothly to the new version without disruption."]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:'---\n"dx-website": major\n---\n\nUpgrade to Turbo 2.x\n\n## Migration guide\n\nFirst, check the\n[official documentation](https://turbo.build/repo/docs/crafting-your-repository/upgrading)\nfor any doubts.\n\n- Run `yarn dlx @turbo/codemod migrate` or `npx @turbo/codemod migrate`\n  (official tool that should help to migrate. Follow the wizard)\n  - This will update the `turbo.json` file and try to install the latest version\n    of `turbo`\n    - In case of errors, you can manually update the `turbo.json` file\n      [following these steps](https://turbo.build/repo/docs/reference/turbo-codemod#turborepo-2x)\n    - In case it wasn\'t possible to install `turbo`, try to do it manually:\n      - `yarn add -D turbo`\n    - Now you should be ready to use the latest version of `turbo`\n- Eventually, update the workflow pointing to a specific SHA\n'})}),"\n",(0,o.jsx)(n.h2,{id:"monorepo",children:"Monorepo"}),"\n",(0,o.jsxs)(n.p,{children:["When working with a monorepo, it is essential to manage changesets properly to\nensure that all changes are documented and versioned correctly.",(0,o.jsx)(n.br,{}),"\n","If you make changes on multiple workspaces, you should create a changeset for\neach workspace to maintain a clear and organized history of modifications."]}),"\n",(0,o.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:'---\n"dx-website": patch\n---\n\nFix typo in documentation\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:'---\n"package-A": minor\n---\n\nUpdate version of dependency `package-B` to `1.2.0`\n'})}),"\n",(0,o.jsx)(n.p,{children:"Both changesets should be included in the same PR if they relate to the same\nfeature or fix and require separate changelogs for the two packages."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4718:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(3309);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);