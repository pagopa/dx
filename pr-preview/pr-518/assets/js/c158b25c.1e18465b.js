"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2716],{4622:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"infrastructure/azure/azure-policies","title":"Creating and Managing Azure Policies","description":"Azure Policies are governance tools provided by Microsoft Azure to create,","source":"@site/docs/infrastructure/azure/azure-policies.md","sourceDirName":"infrastructure/azure","slug":"/infrastructure/azure/azure-policies","permalink":"/dx/docs/infrastructure/azure/azure-policies","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/infrastructure/azure/azure-policies.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Creating and Managing Azure Policies","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Azure","permalink":"/dx/docs/infrastructure/azure/"},"next":{"title":"Using Secrets in AppService Environment Variables","permalink":"/dx/docs/infrastructure/azure/appservice-hidden-appsettings"}}');var o=i(3881),a=i(4718);const t={sidebar_label:"Creating and Managing Azure Policies",sidebar_position:1},s="Creating and Managing Azure Policies",l={},c=[{value:"Goal of DX Azure Policies",id:"goal-of-dx-azure-policies",level:2},{value:"Policy Configuration",id:"policy-configuration",level:2},{value:"Defining Policy Rules",id:"defining-policy-rules",level:3},{value:"Defining Policy Rules Parameters",id:"defining-policy-rules-parameters",level:3},{value:"Applying Policies via Terraform",id:"applying-policies-via-terraform",level:3},{value:"Example of Terraform Definition",id:"example-of-terraform-definition",level:4},{value:"Versioning Policy Rules and Parameters",id:"versioning-policy-rules-and-parameters",level:2},{value:"Deploying Policies",id:"deploying-policies",level:2},{value:"Reference Documentation",id:"reference-documentation",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"creating-and-managing-azure-policies",children:"Creating and Managing Azure Policies"})}),"\n",(0,o.jsxs)(n.p,{children:["Azure Policies are governance tools provided by Microsoft Azure to create,\nassign, and manage rules that ensure compliance and adherence to enterprise\nstandards for cloud resources. More information is available in the official\ndocumentation:\n",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/governance/policy/overview",children:"Azure Policy Overview"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"goal-of-dx-azure-policies",children:"Goal of DX Azure Policies"}),"\n",(0,o.jsx)(n.p,{children:"To improve the control and management of resources across different Azure\nenvironments, the DX team provides a predefined set of policies that product\nteams can apply to their Subscriptions. These policies allow better monitoring\nof critical configurations and resources, ensuring higher standardization and\nsecurity:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/dx/docs/infrastructure/azure/policy-catalog/",children:"List of predefined DX policies"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/pagopa/dx/tree/main/infra/policy",children:"Repository with predefined DX policies"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Once applied, these policies help maintain an organized and compliant\nenvironment, reducing the risk of misconfigurations or unauthorized changes."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"DX Policies"})," extend the functionalities of the\n",(0,o.jsx)(n.a,{href:"https://pagopa.atlassian.net/wiki/spaces/DEVOPS/pages/459375134",children:"Technology Policies"}),".\nUnlike DX Policies, which have a limited scope, Technology Policies apply to all\ncorporate subscriptions without distinction."]}),"\n",(0,o.jsx)(n.p,{children:"Product teams can also propose new DX Policies for additional requirements."}),"\n",(0,o.jsxs)(n.p,{children:["Policies are applied via Terraform, and the rules that implement them\n(",(0,o.jsx)(n.code,{children:"policyRule"}),") are stored in the ",(0,o.jsx)(n.a,{href:"https://github.com/pagopa/dx",children:"DX Repository"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This guide explains the steps required to apply existing policies or add new\nones."}),"\n",(0,o.jsx)(n.h2,{id:"policy-configuration",children:"Policy Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Azure Policies are commonly defined in ",(0,o.jsx)(n.em,{children:"JSON"})," and consist of multiple\ncomponents: ",(0,o.jsx)(n.code,{children:"policyRule"})," definitions, ",(0,o.jsx)(n.code,{children:"parameters"}),", and metadata required for\ndeployment on Azure. Since we manage the latter using Terraform, the only two\nsections that remain defined in ",(0,o.jsx)(n.em,{children:"JSON"})," are lists of ",(0,o.jsx)(n.code,{children:"policyRule"})," and\n",(0,o.jsx)(n.code,{children:"parameters"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"defining-policy-rules",children:"Defining Policy Rules"}),"\n",(0,o.jsx)(n.p,{children:"Policy Rules consist of if/then blocks that define the conditions to be\nevaluated once the policy is assigned and the action to be taken if the\nconditions are met."}),"\n",(0,o.jsxs)(n.p,{children:["To add a new rule, create a file named ",(0,o.jsx)(n.code,{children:"<POLICY_SUMMARY>_rule_v<VERSION>.json"}),"\ninside the ",(0,o.jsx)(n.code,{children:"infra/policy/_policy_rules"})," directory of the ",(0,o.jsx)(n.strong,{children:"DX"})," repository.\nDefine the ",(0,o.jsx)(n.code,{children:"policyRule"})," within the file, ensuring it adheres to the\ndocumentation guidelines."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, to create a policy that prevents resource creation outside a\nconfigurable region, create the file ",(0,o.jsx)(n.code,{children:"allowed_location_rule_v1.json"})," with the\nfollowing content:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "if": {\n    "not": [\n      {\n        "field": "location",\n        "equals": "[parameters(\'location\')]"\n      }\n    ]\n  },\n  "then": {\n    "effect": "deny"\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"[parameters('location')]"})," is the reference to the associated parameter."]}),"\n",(0,o.jsx)(n.h3,{id:"defining-policy-rules-parameters",children:"Defining Policy Rules Parameters"}),"\n",(0,o.jsxs)(n.p,{children:["When defining a rule, parameters can be specified as configurable variables.\nThese must also be defined in a ",(0,o.jsx)(n.em,{children:"JSON"})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["To add a new set of parameters, create a file named\n",(0,o.jsx)(n.code,{children:"<POLICY_SUMMARY>_parameters_v<VERSION>.json"})," within the\n",(0,o.jsx)(n.code,{children:"infra/policy/_policy_rules"})," directory of the DX repository. Define the\nparameters inside the file according to the documentation guidelines."]}),"\n",(0,o.jsxs)(n.p,{children:["Continuing the previous example, create the file\n",(0,o.jsx)(n.code,{children:"allowed_location_parameters_v1.json"})," with the following content:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "location": {\n    "type": "String",\n    "metadata": {\n      "displayName": "Allowed Locations",\n      "description": "Specify the allowed Locations value."\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"This ensures that when the policy is assigned, a parameter must be set."}),"\n",(0,o.jsxs)(n.p,{children:["It is also possible to specify a list of ",(0,o.jsx)(n.strong,{children:"allowed"})," values and a ",(0,o.jsx)(n.strong,{children:"default"}),"\nvalue. For more details, refer to the\n",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure-parameters",children:"official documentation"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"applying-policies-via-terraform",children:"Applying Policies via Terraform"}),"\n",(0,o.jsxs)(n.p,{children:["Once the Policy Rule and its corresponding ",(0,o.jsx)(n.code,{children:"Parameters"})," are defined, the policy\nmust be deployed using Terraform. Product teams that wish to apply DX Policy\nRules to one or more subscriptions should create the necessary descriptors in\n",(0,o.jsx)(n.strong,{children:"their repository"})," following this file structure:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-plaintext",children:"infra/\n  \u251c\u2500\u2500 policy/\n      \u251c\u2500\u2500 <dev/uat/prod>\n          \u251c\u2500\u2500 <policy_name>.tf\n          \u251c\u2500\u2500 data.tf\n"})}),"\n",(0,o.jsx)(n.h4,{id:"example-of-terraform-definition",children:"Example of Terraform Definition"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# data.tf File\n\ndata "http" "allowed_location_policy_rule" {\n  url = "https://raw.githubusercontent.com/pagopa/dx/refs/heads/main/infra/policy/_policy_rules/allowed_location_rule_v1.json"\n}\n\ndata "http" "allowed_location_policy_parameters" {\n  url = "https://raw.githubusercontent.com/pagopa/dx/refs/heads/main/infra/policy/_policy_rules/allowed_location_parameters_v1.json"\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# allowed_locations.tf File\n\nresource "azurerm_policy_definition" "allowed_location_policy" {\n  name         = "${local.project}-allowed-location-policy"\n  policy_type  = "Custom"\n  mode         = "Indexed"\n  display_name = "Enforce Italy North region"\n  description  = "Ensures that resources have Italy North region during creation."\n\n  metadata = jsonencode({\n    category = "Custom DevEx"\n    version  = "1.0.0"\n  })\n\n  policy_rule = data.http.allowed_location_policy_rule.response_body\n  parameters  = data.http.allowed_location_policy_parameters.response_body\n}\n\nresource "azurerm_subscription_policy_assignment" "allowed_location_assignment" {\n  name                 = "${local.project}-allowed-location-assignment"\n  display_name         = "Enforce Italy North region"\n  policy_definition_id = azurerm_policy_definition.allowed_location_policy.id\n  subscription_id      = data.azurerm_subscription.current.id\n\n  parameters = jsonencode({\n    "location" = {\n      "value" = "Italy North"\n    }\n  })\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"versioning-policy-rules-and-parameters",children:"Versioning Policy Rules and Parameters"}),"\n",(0,o.jsxs)(n.p,{children:["When creating or modifying Policy Rules and/or Parameters in the DX repository,\nthe version must be updated only in the case of breaking changes. To update the\nversion, modify the ",(0,o.jsx)(n.code,{children:"<VERSION>"})," reference in the ",(0,o.jsx)(n.em,{children:"JSON"})," file name:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"<POLICY_SUMMARY>_rule_v<VERSION>.json"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"<POLICY_SUMMARY>_parameters_v<VERSION>.json"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Where version is an incrementing integer (e.g., v1, v2, \u2026)."}),"\n",(0,o.jsx)(n.h2,{id:"deploying-policies",children:"Deploying Policies"}),"\n",(0,o.jsxs)(n.p,{children:["Once everything is configured, the product team should submit a Pull Request in\ntheir own repository. Optionally, they can share it with the DX team for review\nbefore merging and applying it in production via the GitHub Action that triggers\n",(0,o.jsx)(n.code,{children:"terraform apply"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"reference-documentation",children:"Reference Documentation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/Azure/azure-policy",children:"Azure Repository with Built-in Policies"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/governance/policy/tutorials/create-and-manage",children:"Tutorial: Creating and Managing Policies"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure-policy-rule",children:"Structure definition: Azure Policy Rule"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure-parameters",children:"Structure definition: Azure Policy Parameters"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4718:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>s});var r=i(3309);const o={},a=r.createContext(o);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);