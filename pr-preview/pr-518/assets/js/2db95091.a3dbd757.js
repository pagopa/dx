"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[359],{4718:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(3309);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}},6659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"conventions/pull-requests/auto-merge","title":"Auto Merge","description":"Auto-merge is a powerful feature in GitHub","source":"@site/docs/conventions/pull-requests/auto-merge.md","sourceDirName":"conventions/pull-requests","slug":"/conventions/pull-requests/auto-merge","permalink":"/dx/docs/conventions/pull-requests/auto-merge","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/conventions/pull-requests/auto-merge.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Auto Merge","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Format","permalink":"/dx/docs/conventions/pull-requests/format"},"next":{"title":"Changeset","permalink":"/dx/docs/conventions/pull-requests/changeset"}}');var o=n(3881),r=n(4718);const i={sidebar_label:"Auto Merge",sidebar_position:2},a="Auto Merge",l={},u=[{value:"Benefits of Auto Merge",id:"benefits-of-auto-merge",level:2},{value:"How to Enable Auto Merge",id:"how-to-enable-auto-merge",level:2}];function c(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"auto-merge",children:"Auto Merge"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.blog/changelog/2021-02-04-pull-request-auto-merge-is-now-generally-available/",children:"Auto-merge is a powerful feature in GitHub"}),"\nthat automatically merges pull requests once they meet the required conditions,\nsuch as passing all status checks (e.g., CI pipeline, dependency on another PR)\nor receiving approvals from designated reviewers."]}),"\n",(0,o.jsx)(t.p,{children:"This feature simplifies the development process, reduces manual work, and\nensures code is merged automatically when ready, saving time and avoiding\ndelays."}),"\n",(0,o.jsx)(t.h2,{id:"benefits-of-auto-merge",children:"Benefits of Auto Merge"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Time Saving"}),": eliminates the need for manual intervention once the PR meets\nits conditions."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Consistency"}),": ensures that only code passing all tests and reviews gets\nmerged, maintaining high quality."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Faster Time to Production"}),": automates the merge process, enabling faster\ndeployment of code"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"how-to-enable-auto-merge",children:"How to Enable Auto Merge"}),"\n",(0,o.jsxs)(t.p,{children:["You can enable auto-merge for a repository by following the\n",(0,o.jsx)(t.a,{href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request#enabling-auto-merge",children:"official GitHub documentation"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["If the repository settings are managed through\n",(0,o.jsxs)(t.a,{href:"https://registry.terraform.io/modules/pagopa-dx/azure-github-environment-bootstrap/azurerm/latest",children:["Terraform, using the ",(0,o.jsx)(t.code,{children:"azure_github_environment_bootstrap"})," module"]}),",\nauto-merge is enabled by default.",(0,o.jsx)(t.br,{}),"\n","This means that while the feature is available for the repository, it does not\nautomatically merge all PRs."]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);