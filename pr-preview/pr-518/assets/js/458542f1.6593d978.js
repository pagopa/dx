"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3394],{395:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"devex-azure-bootstrap-0.1-alpha","metadata":{"permalink":"/dx/blog/devex-azure-bootstrap-0.1-alpha","editUrl":"https://github.com/pagopa/dx/tree/main/website/blog/003-azure-github-environment-bootstrap.mdx","source":"@site/blog/003-azure-github-environment-bootstrap.mdx","title":"Introducing the \'Azure GitHub Environment Bootstrap\' Terraform Module to Enhance New Project Startup","description":"Boosting Brand New Repository Setup","date":"2025-03-28T17:00:00.000Z","tags":[],"readingTime":2.735,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Introducing the \'Azure GitHub Environment Bootstrap\' Terraform Module to Enhance New Project Startup","description":"Boosting Brand New Repository Setup","slug":"devex-azure-bootstrap-0.1-alpha","hide_table_of_contents":false,"date":"2025-03-28T17:00","toc_min_heading_level":2,"toc_max_heading_level":2},"unlisted":false,"nextItem":{"title":"Benchmark for Typescript Code Generators from OpenAPI","permalink":"/dx/blog/typescript-openapi-generators-0.1-alpha"}},"content":"The new Terraform module\\n[`Azure GitHub Environment Bootstrap`](https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap)\\ndeveloped by the DevEx team, has finally left the beta status by reaching its\\nfirst major version release!\\n\\nThis module is useful for anybody that has just created a new repository and\\nwants to focus quickly on their goals rather than spending hours in setting up\\neverything around the new repository. The module focuses on projects which\\nleverage Azure, GitHub, and a single environment (production). After applying\\nthis module, the repository will have:\\n\\n- completed the setup needed to launch **GitHub Actions** workflows\\n- a dedicated private **GitHub Runner** to connect to private Azure resources\\n  from GitHub pipelines\\n- an Azure **resource group** to deploy resources generally contained in\\n  `infra/resources`\\n- the **required permissions** to operate on domain resources\\n- a secure and smooth configuration\\n\\n\x3c!-- truncate --\x3e\\n\\nTo accomplish the setup, the module provisions:\\n\\n- an Azure Container App Job to run workflows in a private **GitHub Runner**\\n  integrated with an Azure VNet\\n- a federation between the GitHub repository and Azure user-assigned **managed\\n  identities** to allow workflows to connect with Azure tenant\\n- the creation of a project-specific Azure resource group which will contain the\\n  infrastructure of the entire repository as it will share the same lifecycle\\n  and IAM setup\\n- the IAM setup of both team and Azure user-assigned managed identities\\n  following the [latest DevEx framework](/docs/infrastructure/azure/azure-iam)\\n- the GitHub repository settings according to the best practices found by the DX\\n  team\\n\\nAs the `Azure GitHub Environment Bootstrap` module is designed to support teams\\nin new project development, it is particularly indicated for mono repositories\\nwhich traditionally require more time to be properly prepared: in just a few\\nminutes, the repository will be ready to be used.\\n\\nOn the other hand, the new module may be a bit overwhelming for small\\nrepositories, where you may have only one application. For this reason, the\\nmodule\\n[`azure_federated_identity_with_github`](https://github.com/pagopa/dx/blob/main/infra/modules/azure_federated_identity_with_github)\\nis still maintained and available, and is suggested for those cases. However,\\nplease note that this design is not advisable, and instead, the use of mono\\nrepositories is recommended.\\n\\n## Getting Started\\n\\nWe recommend to reference the module via the Terraform Registry, and pin the\\nversion to the latest stable release:\\n\\n```hcl\\nmodule \\"repo\\" {\\n  source  = \\"pagopa-dx/azure-github-environment-bootstrap/azurerm\\"\\n  version = \\"~>1.0\\"\\n}\\n```\\n\\nDespite the `Azure GitHub Environment Bootstrap` module requiring a lot of\\ninputs, its usage remains easy. In fact, a lot of values are the same for\\ndifferent projects under the same product\'s umbrella, and moreover are\\nwell-known by our user base. The following data is requested:\\n\\n- the Azure subscription and tenant IDs\\n- the IDs of team-specific Entra ID groups as expected by\\n  [DevEx IAM framework](/docs/infrastructure/azure/azure-iam)\\n- the ID of an existing Azure Container App Environment\\n- the details of the Storage Account holding the Terraform state file\\n- the details of the current repository (name, description, topics, optionally\\n  reviewers, etc.)\\n- the IDs of the product-shared cloud resources, if any (API Management, Private\\n  Endpoints, VNet, etc.)\\n\\nMore details about the usage can be found in the documentation, which is\\navailable in the\\n[module entry in the Terraform Registry](https://registry.terraform.io/modules/pagopa-dx/azure-github-environment-bootstrap/azurerm/latest).\\n\\n### Examples\\n\\nExplore these repositories, which have successfully adopted the\\n`Azure GitHub Environment Bootstrap` module from its early stages:\\n\\n- [IO Messages](https://github.com/pagopa/io-messages/tree/main/infra/repository)\\n- [IO Wallet](https://github.com/pagopa/io-wallet/tree/main/infra/repository)\\n- [IO Services CMS](https://github.com/pagopa/io-services-cms/tree/main/infra/repository)"},{"id":"typescript-openapi-generators-0.1-alpha","metadata":{"permalink":"/dx/blog/typescript-openapi-generators-0.1-alpha","editUrl":"https://github.com/pagopa/dx/tree/main/website/blog/002-benchmark-openapi-gen.mdx","source":"@site/blog/002-benchmark-openapi-gen.mdx","title":"Benchmark for Typescript Code Generators from OpenAPI","description":"Generating TypeScript Code from OpenAPI Specification","date":"2024-09-24T17:00:00.000Z","tags":[],"readingTime":5.08,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Benchmark for Typescript Code Generators from OpenAPI","description":"Generating TypeScript Code from OpenAPI Specification","slug":"typescript-openapi-generators-0.1-alpha","hide_table_of_contents":false,"date":"2024-09-24T17:00","toc_min_heading_level":2,"toc_max_heading_level":2},"unlisted":false,"prevItem":{"title":"Introducing the \'Azure GitHub Environment Bootstrap\' Terraform Module to Enhance New Project Startup","permalink":"/dx/blog/devex-azure-bootstrap-0.1-alpha"},"nextItem":{"title":"DevEx Initiative: Transforming the Development Experience at PagoPA","permalink":"/dx/blog/devex-initiative-0.1-alpha"}},"content":"The digital services we provide interact through REST APIs that are documented\\nusing OpenAPI specifications.\\n\\nUsing API clients requires the code that handles HTTP requests and responses to\\nstrictly adhere to the OpenAPI specifications. This is crucial to ensure that\\nthe exchanged data is valid and consistent with the defined schemas. Similarly,\\nwhen providing APIs through NodeJS services, such as Express or similar\\nframeworks, it is important to follow the same standards. This ensures that the\\nAPIs are reliable, scalable, and easy to maintain.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe purpose of this document is to evaluate and compare various TypeScript\\nOpenAPI generators for both frontend and backend development. The evaluation\\nwill focus on critical features and help determine whether to invest in a custom\\ntool (make) or adopt an existing tool.\\n\\n## Guiding Principles\\n\\n### Main Requirements\\n\\n1. **Runtime Payload Control** The generators must provide runtime controls on\\n   the payloads to ensure data integrity and adherence to defined schemas. We\\n   believe runtime control is necessary to guarantee that the Typescript type\\n   matches the actual structure of the payload. Without this, there\'s a higher\\n   chance of runtime errors due to discrepancies in the data format.\\n\\n2. **Generation of Isomorphic Types** The ability to generate types usable both\\n   on the client and server sides (e.g., in Express route handlers).\\n\\n3. **Support for String Patterns (Regex)** Generators must support string\\n   patterns using regular expressions to enforce constraints on string values.\\n\\n4. **Support for JSON Schema Constraints** For example, the handling of\\n   constraints such as minimum, maximum, exclusiveMinimum, and exclusiveMaximum\\n   is essential for validating numeric data.\\n\\n5. **Community and Maintainability** A strong community and/or easily\\n   maintainable codebase are crucial for the long-term viability and support of\\n   the generator.\\n\\n### Additional Features (Nice to Have)\\n\\n1. **Support for Security Headers** Generators should support security headers\\n   to enhance API security.\\n\\n2. **Support for File Uploads** The ability to handle file uploads seamlessly\\n   within the API.\\n\\n3. **Support for File Downloads (Octet Stream)** There must be support for file\\n   downloads, specifically as an octet stream.\\n\\n4. **Minimal Footprint** Generators should aim for minimal footprint, e.g.,\\n   generating one type per file with tree-shaking capabilities to optimize\\n   performance.\\n\\n5. **Developer Experience** High performance during code generation is\\n   important. The generator should be fast and not slow down the IDE, even\\n   during type inference.\\n\\n## Comparison\\n\\n- **typed-openapi**: Converts to Typescript before converting to runtime types\\n  (typebox-codegen \u2192 zod), losing information on constraints.\\n- **openapi-generator**: Runtime checks are limited to verifying if the value is\\n  defined.\\n- **swagger-codegen**: An older version of openapi-generator.\\n- **autorest**: Seems promising on paper, but couldn\'t get it to start (freezes\\n  on startup).\\n- **openapi-io-ts**: Inexistent community, doesn\'t work with our specs, not\\n  maintained.\\n- **orval**: Primarily targets React; generates code that works on our specs.\\n\\n| Generator         | Server Types | Community | Supports Regex (Pattern String) | Supports Min/Max (Number) | Supports HTTP Headers |\\n| ----------------- | ------------ | --------- | ------------------------------- | ------------------------- | --------------------- |\\n| typed-openapi     | Yes          | Yes       | No                              | No                        | Yes                   |\\n| openapi-generator | Yes          | Yes       | No                              | No                        | Yes                   |\\n| swagger-codegen   | Yes          | Yes       | No                              | No                        | Yes                   |\\n| autorest          | ???          | Yes       | ???                             | ???                       | ???                   |\\n| openapi-io-ts     | ???          | No        | ???                             | ???                       | ???                   |\\n| orval             | No           | Yes       | Yes                             | Yes                       | Yes                   |\\n\\n## Exclusion Criteria\\n\\nSome tools are excluded from this benchmark due to lack of runtime controls (at\\nleast, as of the writing of this document):\\n\\n- heyapi\\n- oazapfts\\n- openapi-backend\\n- openapi-typescript\\n- swagger-typescript-api\\n\\nAlthough it is possible to translate the generated Typescript types into\\nstructures (e.g., zod/typebox) that allow runtime controls, this kind of\\nconversion results in a loss of information on constraints (e.g., maximum,\\nminimum, maxLength, pattern, etc.).\\n\\n## Generated Code Repository\\n\\nA repository is available to compare the code of different generators:\\n[GitHub - gunzip/openapi-generator-benchmark](https://github.com/gunzip/openapi-generator-benchmark)\\n\\n## Issues with openapi-zod-client\\n\\n1. Inaccurate type generation.\\n2. Poor performance in the IDE due to type inference from the single object\\n   passed to the zodios `makeApi` method.\\n3. Dependency on `@zodios/core` for HTTP calls (via Axios), parameter\\n   validation, and query string handling.\\n4. Does not support multiple successful values (2xx codes).\\n5. Both the client and types are contained in a single file, making it hard to\\n   optimize the bundle (important for frontend clients).\\n6. The maintainer of zodios has been inactive for a while.\\n\\n### Example of Inaccurate Type Generation\\n\\n```typescript\\nconst MessageSubject = z.string();\\nconst MessageBodyMarkdown = z.string();\\nconst MessageContent = z\\n  .object({\\n    subject: MessageSubject.min(10).max(120).optional(),\\n    markdown: MessageBodyMarkdown.min(80).max(10000),\\n  })\\n  .passthrough();\\n```\\n\\nGenerated from the foloowing OpenAPI schema:\\n\\n```yaml\\nMessageSubject:\\n      type: string\\n      minLength: 10\\n      maxLength: 120\\n    MessageBodyMarkdown:\\n      type: string\\n      minLength: 80\\n      maxLength: 10000\\n          MessageContent:\\n      type: object\\n    MessageContent:\\n      properties:\\n        subject:\\n          $ref: \\"#/components/schemas/MessageSubject\\"\\n        markdown:\\n          $ref: \\"#/components/schemas/MessageBodyMarkdown\\"\\n      required:\\n        - markdown\\n```\\n\\n## Issues with swagger-typescript-api + ts-to-zod\\n\\nUnlike other Typescript type generators, `swagger-typescript-api` retains\\ninformation on constraints (minimum, maximum, maxLength, pattern, etc.) in JSDoc\\ncomments associated with type definitions. This allows for the reconstruction of\\nruntime schemas, for example, using tools like `ts-to-zod`. However:\\n\\n1. The generated runtime schemas are separate from the client code, so the\\n   \u201cplumbing\u201d to connect the runtime validation (ts-to-zod) to the generated\\n   types (`swagger-typescript-api`) must be implemented manually.\\n2. Types are not always accurate due to discrepancies between the annotations\\n   generated by swagger-typescript-api and those expected by ts-to-zod (e.g.,\\n   `@min` vs `@minimum`).\\n3. Some inaccuracies in type generation produce invalid Typescript code.\\n\\nNevertheless, the zod schemas are more faithful than those generated by\\nopenapi-zod-client.\\n\\n### Example of Accurate Type Generation\\n\\n```typescript\\nexport const messageSubjectSchema = z.string().min(10).max(120);\\nexport const messageBodyMarkdownSchema = z.string().min(80).max(10000);\\nexport const messageContentSchema = z.object({\\n  subject: messageSubjectSchema.optional(),\\n  markdown: messageBodyMarkdownSchema,\\n});\\n```\\n\\n## Conclusion\\n\\nAs of Jun 2024, no OpenAPI generator fully meets our guiding principles. While\\n`openapi-zod-client` seems to cover most of the desired features, it still\\nappears to be an immature project, not always accurate in type generation.\\n\\nIt is appropriate to invest in the development of a Typescript code generator\\nfrom OpenAPI that performs correct and complete runtime checks."},{"id":"devex-initiative-0.1-alpha","metadata":{"permalink":"/dx/blog/devex-initiative-0.1-alpha","editUrl":"https://github.com/pagopa/dx/tree/main/website/blog/001-devex-initiative.mdx","source":"@site/blog/001-devex-initiative.mdx","title":"DevEx Initiative: Transforming the Development Experience at PagoPA","description":"Transforming the Development Experience at PagoPA","date":"2024-09-01T10:00:00.000Z","tags":[],"readingTime":12.545,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"DevEx Initiative: Transforming the Development Experience at PagoPA","description":"Transforming the Development Experience at PagoPA","slug":"devex-initiative-0.1-alpha","hide_table_of_contents":false,"date":"2024-09-01T10:00","toc_min_heading_level":2,"toc_max_heading_level":2},"unlisted":false,"prevItem":{"title":"Benchmark for Typescript Code Generators from OpenAPI","permalink":"/dx/blog/typescript-openapi-generators-0.1-alpha"}},"content":"import Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\";\\n\\n\\nImagine being able to release the first API for a **new** digital service into\\nproduction in minutes instead of weeks, having fewer decisions to make, less\\ncode to interpret and maintain, onboarding new team members with zero downtime:\\nthis is the goal we set for ourselves with the **Developer Experience\\n([DevEx](https://pagopa.atlassian.net/wiki/spaces/ENG/pages/861732865/DevEx+Lab+-+Initiative+canvas))**\\ninitiative.\\n\\nAt the heart of the Engineering Area, a group of Senior, Cloud, and Staff\\nEngineers has decided to tackle the daily challenges that slow down our work.\\nWe\'re here to break down barriers, simplify processes, and make software\\ndevelopment smoother and more rewarding for everyone.\\n\\n<div class=\\"container\\">\\n  <div class=\\"row\\">\\n    <div class=\\"col col--6\\">\\n      <div class=\\"col-demo\\">![Without DX](001-images/image-3.png)</div>\\n    </div>\\n    <div class=\\"col col--6\\">\\n      <div class=\\"col-demo\\">![With DX](001-images/image-2.png)</div>\\n    </div>\\n  </div>\\n</div>\\n\\n{/* truncate */}\\n\\n## Why DevEx\\n\\nHow much time is lost before even writing a line of code? How many decisions\\nneed to be made? And how long does it take for a new engineer to become truly\\nproductive?\\n\\nWith DevEx, we want to answer these questions and solve the problems that hinder\\nour daily work:\\n\\n- **Reduce downtime:** Every second spent configuring an environment or\\n  interpreting old code is a second lost to innovation.\\n- **Lower cognitive load**: Less complexity means more room to create value,\\n  reducing errors, and speeding up time-to-market\\n- **Speed up onboarding:** Every new developer should be able to contribute from\\n  day one.\\n\\n## What We Do\\n\\nAs [DevEx team](https://github.com/orgs/pagopa/teams/engineering-team-devex) we\\ndoesn\'t just identify problems and suggest solutions: we tackle them head-on,\\ngetting our hands dirty.\\n\\n- **Common patterns and golden paths:** We provide _golden paths_ so you don\'t\\n  have to reinvent the wheel every time.\\n- **Ready-to-use abstractions and tools:** We reduce boilerplate code so you can\\n  focus on the code that matters.\\n- **Optimized development environments:** We share pre-configured and ready to\\n  use _templates_ because infrastructure should never be an obstacle but a\\n  resource.\\n- **Centralized documentation:** You\'ll no longer have to search for an answer;\\n  it will always be at your fingertips.\\n\\n## How We\'re Organized\\n\\nCurrently, the DevEx initiative is driven by engineers working asynchronously,\\ncontributing alongside their primary responsibilities within their main\\nprojects. It may not always be this way, but for now, it seems to be working!\\n\\nEvery two weeks, we hold a review & demo session on Google Meet. This is a key\\nmoment to review our goals\\n([OKRs](https://pagopa.atlassian.net/wiki/spaces/DevEx/pages/962757129/OKR)) and\\nshare our progress. Each member autonomously selects a task from the\\n[Jira DevEx Board](https://pagopa.atlassian.net/jira/software/c/projects/DEVEX/boards/501/backlog)\\nand carries it forward, collaborating with the rest of the team through Code\\nReviews and RFCs.\\n\\nStaff Engineers, in particular, are expected to independently select priority\\ntasks beyond the scope of the project (domain) they are already engaged in. This\\napproach requires **collaboration from Product Managers** to ensure that\\nactivities are aligned with strategic business objectives.\\n\\nInnovation doesn\'t stop at theory: we bring solutions directly into projects,\\n**proactively supporting stream-aligned teams**, and promoting the adoption of\\nDX tools.\\n\\n## Where We Stand\\n\\nWe started with an idea and a\\n[brainstorming session](https://www.figma.com/board/7rmB4tXRQlzfStPuJh4vU2/Kick-Off?node-id=0-1&t=UZeTC0BhIFl9678h-0),\\nthen we got to work.\\n\\nBetween April and July 2024, we have...\\n\\n- Identified\\n  [shared technologies and patterns](https://github.com/pagopa/dx/blob/main/decisions/0006-we-start-with-typescript-and-azure.md)\\n  to focus our initial efforts on, currently: Typescript, Terraform, Azure, and\\n  GitHub Actions.\\n\\n- Established some new practices such as:\\n\\n  - [naming conventions](https://pagopa.github.io/dx/docs/conventions/azure-naming-convention)\\n    for Azure resources\\n  - structure for\\n    [npm tasks for Typescript projects](https://pagopa.github.io/dx/docs/conventions/npm-scripts)\\n  - [HCL code structure for Terraform modules](https://pagopa.github.io/dx/docs/conventions/infra-folder-structure)\\n\\n- Implemented new Terraform modules for:\\n\\n  - [creating a GitHub Actions runner](https://github.com/pagopa/dx/tree/main/infra/modules/github_selfhosted_runner_on_container_app_jobs)\\n  - [setting up GitHub repository identity on Azure](https://github.com/pagopa/dx/tree/main/infra/modules/azure_federated_identity_with_github)\\n  - [easily creating roles and permissions for Azure services](https://github.com/pagopa/dx/tree/main/infra/modules/azure_role_assignments)\\n  - [creating an Azure Functions App](https://github.com/pagopa/dx/tree/main/infra/modules/azure_function_app)\\n  - [creating an Azure App Service](https://github.com/pagopa/dx/tree/main/infra/modules/azure_app_service)\\n  - [setting up autoscaling for an App Service or Function App](https://github.com/pagopa/dx/tree/main/infra/modules/azure_app_service_plan_autoscaler)\\n\\n- Developed GitHub Actions for:\\n\\n  - [conducting code reviews on Typescript codebases](https://github.com/pagopa/dx/blob/main/.github/workflows/js_code_review.yaml)\\n  - [building Docker images](https://github.com/pagopa/dx/blob/main/.github/workflows/docker_image_build.yaml)\\n  - [deploying Azure services via Terraform](https://github.com/pagopa/dx/blob/main/.github/workflows/infra_apply.yaml)\\n  - [planning infrastructure changes](https://github.com/pagopa/dx/blob/main/.github/workflows/infra_plan.yaml)\\n  - [notifying of drifts between IaC code and infrastructure](https://github.com/pagopa/dx/blob/main/.github/workflows/infra_drift_detection.yml)\\n  - [deploying to production Azure Function or App Service](https://github.com/pagopa/dx/blob/main/.github/workflows/web_app_deploy.yaml)\\n  - [linting Terraform code](https://github.com/pagopa/dx/blob/main/.github/workflows/static_analysis.yaml)\\n\\n- Set up\\n  [basic configurations for Typescript tooling](https://github.com/pagopa/dx-typescript):\\n  eslint, yarn, turbo, changeset.\\n\\n- Shared the\\n  [results of a benchmark on tools for generating clients from OpenAPI specifications](https://pagopa.github.io/dx/docs/articles/benchmark-openapi-gen)\\n\\n- Analyzed the state of the art for\\n  [distributed monitoring and log correlation on Azure](https://pagopa.github.io/dx/docs/articles/azure-tracing)\\n\\nWhile it may seem like a lot of material, we recognize that without proper\\ndocumentation and effective communication, our efforts might be overlooked.\\nThat\'s why we\'ve launched a\\n[dedicated website](https://pagopa.github.io/dx/docs/) to be populated with\\ncontent and continuously updated as a reference for all engineers in the\\norganization.\\n\\nAnd that\'s not all! We\'re also working to provide tools (_scaffolding_) that can\\nautomate repetitive and redundant tasks.\\n\\n:::info\\n\\nWe want to reach a point where documentation becomes unnecessary!\\n\\n:::\\n\\n## Pilot Projects\\n\\nAlthough still in its early stages, much of the tooling we\u2019ve developed has\\nalready been successfully used in several real projects.\\n\\nHere are some examples!\\n\\n### Trial System\\n\\nThe team that implemented the Trial System used DevEx tooling to create a\\nplatform that allows any digital service to segment users and test new features\\non a selected group (feature flags):\\n\\nhttps://github.com/pagopa/trial-system\\n\\n### IO FIMS\\n\\nIO FIMS is a project that manages Single Sign-On for IO users. The team used\\nDevEx tooling to create a new service:\\n\\nhttps://github.com/pagopa/io-fims\\n\\n### IO communication\\n\\nThe team that implemented the messaging service for IO used DevEx tooling to\\ncreate a new Typescript monorepo and manage the deployment of Azure Functions:\\n\\nhttps://github.com/pagopa/io-messages\\n\\n### IO authentication\\n\\nThe team that implemented the user authentication service for IO used DevEx\\ntooling to create a new Typescript monorepo and manage the deployment of Azure\\nFunctions:\\n\\nhttps://github.com/pagopa/io-auth-n-identity-domain\\n\\n### IO services\\n\\nThe team that implemented the backoffice for organizations in IO used DevEx\\ntooling to manage the deployment of infrastructure and Azure Functions:\\n\\nhttps://github.com/search?q=repo%3Apagopa%2Fio-services-cms+pagopa%2Fdx&type=code\\n\\n## Current Benefits of DevEx\\n\\nLet\'s share some brief code snippets to show how DevEx tooling can make\\nengineers\' work easier and faster.\\n\\n### Setting Up GitHub Repository Permissions on Azure\\n\\n<Tabs>\\n  <TabItem value=\\"after\\" label=\\"With DX\\" default>\\n\\n```bash\\n> cd io-messages/infra/identity\\n> find . -type f\\n./prod/outputs.tf\\n./prod/locals.tf\\n./prod/main.tf\\n./prod/README.md\\n./prod/.terraform.lock.hcl\\n> find . -type f | xargs wc -l | tail -n 1 | awk \'{print $1}\'\\n160 # LoC\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"before\\" label=\\"Without DX\\">\\n```bash\\n> cd io-services-cms/.identity\\n> find . -type f\\n.\\n./github_repository.tf\\n./99_locals.tf\\n./main.tf\\n./03_github_environment_ci.tf\\n./01_data.tf\\n./env/prod/backend.ini\\n./env/prod/terraform.tfvars\\n./env/prod/backend.tfvars\\n./99_variables.tf\\n./04_github_identity.tf\\n./terraform.sh\\n./03_github_environment_infra.tf\\n./99_outputs.tf\\n./03_github_repo_secrets.tf\\n./.terraform.lock.hcl\\n./03_github_environment_cd.tf\\n./03_github_environment_opex.tf\\n> find . -type f | xargs wc -l | tail -n 1 | awk \'{print $1}\'\\n731 # LoC\\n```\\n  </TabItem>\\n</Tabs>\\n\\n### Setting Up Autoscaling for an App Service or Function App\\n\\n<Tabs>\\n  <TabItem value=\\"after\\" label=\\"With DX\\" default>\\n\\n```hcl\\nmodule \\"function_app_user_autoscaler\\" {\\n  source = \\"github.com/pagopa/dx//infra/modules/azure_app_service_plan_autoscaler?ref=main\\"\\n\\n  resource_group_name = var.resource_group_name\\n\\n  target_service = {\\n    function_app_name = module.function_app_user.function_app.function_app.name\\n  }\\n\\n  scheduler = {\\n    maximum = 30\\n    normal_load = {\\n      default = 5\\n      minimum = 3\\n    }\\n  }\\n\\n  scale_metrics = {\\n    cpu = {\\n      upper_threshold = 50\\n      increase_by = 2\\n    }\\n  }\\n}\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"before\\" label=\\"Without DX\\">\\n\\n```hcl\\nresource \\"azurerm_monitor_autoscale_setting\\" \\"cms_fn\\" {\\n  name                = \\"${var.prefix}-${var.env_short}-${var.location_short}-${var.domain}-cms-func-as-01\\"\\n  resource_group_name = module.cms_fn.function_app.resource_group_name\\n  location            = var.location\\n  target_resource_id  = module.cms_fn.function_app.plan.id\\n\\n  profile {\\n    name = \\"default\\"\\n\\n    capacity {\\n      default = local.cms.autoscale_settings.default\\n      minimum = local.cms.autoscale_settings.min\\n      maximum = local.cms.autoscale_settings.max\\n    }\\n\\n    rule {\\n      metric_trigger {\\n        metric_name              = \\"Requests\\"\\n        metric_resource_id       = module.cms_fn.function_app.function_app.id\\n        metric_namespace         = \\"microsoft.web/sites\\"\\n        time_grain               = \\"PT1M\\"\\n        statistic                = \\"Average\\"\\n        time_window              = \\"PT1M\\"\\n        time_aggregation         = \\"Average\\"\\n        operator                 = \\"GreaterThan\\"\\n        threshold                = 3000\\n        divide_by_instance_count = false\\n      }\\n\\n      scale_action {\\n        direction = \\"Increase\\"\\n        type      = \\"ChangeCount\\"\\n        value     = \\"2\\"\\n        cooldown  = \\"PT1M\\"\\n      }\\n    }\\n\\n    rule {\\n      metric_trigger {\\n        metric_name              = \\"CpuPercentage\\"\\n        metric_resource_id       = module.cms_fn.function_app.plan.id\\n        metric_namespace         = \\"microsoft.web/serverfarms\\"\\n        time_grain               = \\"PT1M\\"\\n        statistic                = \\"Average\\"\\n        time_window              = \\"PT5M\\"\\n        time_aggregation         = \\"Average\\"\\n        operator                 = \\"GreaterThan\\"\\n        threshold                = 60\\n        divide_by_instance_count = false\\n      }\\n\\n      scale_action {\\n        direction = \\"Increase\\"\\n        type      = \\"ChangeCount\\"\\n        value     = \\"2\\"\\n        cooldown  = \\"PT5M\\"\\n      }\\n    }\\n\\n    rule {\\n      metric_trigger {\\n        metric_name        = \\"MemoryPercentage\\"\\n        metric_resource_id = module.cms_fn.function_app.plan.id\\n        metric_namespace   = \\"microsoft.web/serverfarms\\"\\n        time_grain         = \\"PT1M\\"\\n        statistic          = \\"Average\\"\\n        time_window        = \\"PT5M\\"\\n        time_aggregation   = \\"Average\\"\\n        operator           = \\"GreaterThan\\"\\n        threshold          = 80\\n      }\\n      scale_action {\\n        direction = \\"Increase\\"\\n        type      = \\"ChangeCount\\"\\n        value     = \\"2\\"\\n        cooldown  = \\"PT5M\\"\\n      }\\n    }\\n\\n    rule {\\n      metric_trigger {\\n        metric_name              = \\"Requests\\"\\n        metric_resource_id       = module.cms_fn.function_app.function_app.id\\n        metric_namespace         = \\"microsoft.web/sites\\"\\n        time_grain               = \\"PT1M\\"\\n        statistic                = \\"Average\\"\\n        time_window              = \\"PT7M\\"\\n        time_aggregation         = \\"Average\\"\\n        operator                 = \\"LessThan\\"\\n        threshold                = 2000\\n        divide_by_instance_count = false\\n      }\\n\\n      scale_action {\\n        direction = \\"Decrease\\"\\n        type      = \\"ChangeCount\\"\\n        value     = \\"1\\"\\n        cooldown  = \\"PT5M\\"\\n      }\\n    }\\n\\n    rule {\\n      metric_trigger {\\n        metric_name              = \\"CpuPercentage\\"\\n        metric_resource_id       = module.cms_fn.function_app.plan.id\\n        metric_namespace         = \\"microsoft.web/serverfarms\\"\\n        time_grain               = \\"PT1M\\"\\n        statistic                = \\"Average\\"\\n        time_window              = \\"PT7M\\"\\n        time_aggregation         = \\"Average\\"\\n        operator                 = \\"LessThan\\"\\n        threshold                30\\n        divide_by instance_count = false\\n      }\\n\\n      scale_action {\\n        direction = \\"Decrease\\"\\n        type      = \\"ChangeCount\\"\\n        value     = \\"1\\"\\n        cooldown  = \\"PT5M\\"\\n      }\\n    }\\n\\n    rule {\\n      metric_trigger {\\n        metric_name        = \\"MemoryPercentage\\"\\n        metric_resource_id = module.cms_fn.function_app.plan.id\\n        metric_namespace   = \\"microsoft.web/serverfarms\\"\\n        time_grain         = \\"PT1M\\"\\n        statistic          = \\"Average\\"\\n        time_window        = \\"PT7M\\"\\n        time_aggregation   = \\"Average\\"\\n        operator           = \\"LessThan\\"\\n        threshold          30\\n      }\\n      scale_action {\\n        direction = \\"Decrease\\"\\n        type      = \\"ChangeCount\\"\\n        value     = \\"1\\"\\n        cooldown  = \\"PT5M\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\n### Deploying an Azure Function App\\n\\n<Tabs>\\n  <TabItem value=\\"after\\" label=\\"With DX\\" default>\\n\\n```yaml\\nname: Deploy (op-func)\\n\\non:\\n  workflow_dispatch:\\n\\njobs:\\n  op_func_deploy:\\n    uses: pagopa/dx/.github/workflows/web_app_deploy.yaml@add-web-app-deploy-workflow\\n    name: Deploy\\n    secrets: inherit\\n    with:\\n      workspace_name: op-func\\n      environment: app-prod\\n      resource_group_name: io-p-weu-fims-rg-01\\n      web_app_name: io-p-weu-fims-op-func-01\\n      use_staging_slot: false\\n      use_private_agent: true\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"before\\" label=\\"Without DX\\">\\n\\n```yaml\\n# Azure DevOps pipeline to release a new version and deploy to production.\\n\\nvariables:\\n  HEALTHCHECK_PATH: \\"api/info\\"\\n\\nparameters:\\n  - name: \\"RELEASE_SEMVER\\"\\n    displayName: \\"When packing a release, define the version bump to apply\\"\\n    type: string\\n    values:\\n      - major\\n      - minor\\n      - patch\\n    default: minor\\n  # Map of production apps to deploy to, in the form\\n  #   {logicName}:\\n  #     appname: {name of the resource}\\n  #     rg: {name of the resource group}\\n  # Although it\'s a parameter, it\'s not intended to be edited at runtime.\\n  # It\'s here because variables only handle scalar values\\n  - name: \\"PRODUCTION_APPS\\"\\n    displayName: \\"\\"\\n    type: object\\n    default:\\n      servicesfn1:\\n        appname: io-p-services-fn-1\\n        rg: io-p-services-rg-1\\n      servicesfn2:\\n        appname: io-p-services-fn-2\\n        rg: io-p-services-rg-2\\n\\n# Only manual activations are intended\\ntrigger: none\\npr: none\\n\\n# This pipeline has been implemented to be run on hosted agent\\n\\n pools based both\\n# on \'windows\' and \'ubuntu\' virtual machine images and using the scripts defined\\n# in the package.json file. Since we are deploying on Azure functions on Windows\\n# runtime, the pipeline is currently configured to use a Windows hosted image for\\n# the build and deploy.\\npool:\\n  vmImage: \\"ubuntu-latest\\"\\n\\nresources:\\n  repositories:\\n    - repository: pagopaCommons\\n      type: github\\n      name: pagopa/azure-pipeline-templates\\n      ref: refs/tags/v18\\n      endpoint: \\"io-azure-devops-github-ro\\"\\n\\nstages:\\n  # Create a release\\n  # Activated when ONE OF these are met:\\n  # - is on branch master\\n  # - is a tag in the form v{version}-RELEASE\\n  - stage: Release\\n    condition:\\n      and( succeeded(), or( eq(variables[\'Build.SourceBranch\'],\\n      \'refs/heads/master\'), and( startsWith(variables[\'Build.SourceBranch\'],\\n      \'refs/tags\'), endsWith(variables[\'Build.SourceBranch\'], \'-RELEASE\') ) ) )\\n    pool:\\n      vmImage: \\"ubuntu-latest\\"\\n    jobs:\\n      - job: make_release\\n        steps:\\n          - ${{ if eq(variables[\'Build.SourceBranch\'], \'refs/heads/master\') }}:\\n              - template: templates/node-job-setup/template.yaml@pagopaCommons\\n                parameters:\\n                  persistCredentials: true\\n              - template: templates/node-github-release/template.yaml@pagopaCommons\\n                parameters:\\n                  semver: \\"${{ parameters.RELEASE_SEMVER }}\\"\\n                  gitEmail: $(GIT_EMAIL)\\n                  gitUsername: $(GIT_USERNAME)\\n                  gitHubConnection: $(GITHUB_CONNECTION)\\n\\n          - ${{ if ne(variables[\'Build.SourceBranch\'], \'refs/heads/master\') }}:\\n              - script: |\\n                  echo \\"We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release.\\"\\n                displayName: \\"Skip release bundle\\"\\n\\n  # Prepare Artifact\\n  - stage: Prepare_artifact\\n    dependsOn:\\n      - Release\\n    jobs:\\n      - job: \\"prepare_artifact\\"\\n        steps:\\n          # Build application\\n          - template: templates/node-job-setup/template.yaml@pagopaCommons\\n            parameters:\\n              # On the assumption that this stage is executed only when Release stage is,\\n              #  with this parameter we set the reference the deploy script must pull changes from.\\n              # The branch/tag name is calculated from the source branch\\n              #  ex: Build.SourceBranch=refs/heads/master --\x3e master\\n              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --\x3e v1.2.3-RELEASE\\n              gitReference:\\n                ${{ replace(replace(variables[\'Build.SourceBranch\'],\\n                \'refs/tags/\', \'\'), \'refs/heads/\', \'\') }}\\n          - script: |\\n              yarn predeploy\\n            displayName: \\"Build\\"\\n\\n          # Install functions extensions\\n          - task: DotNetCoreCLI@2\\n            inputs:\\n              command: \\"build\\"\\n              arguments: \\"-o bin\\"\\n          # Copy application to\\n          - task: CopyFiles@2\\n            inputs:\\n              SourceFolder: \\"$(System.DefaultWorkingDirectory)\\"\\n              TargetFolder: \\"$(System.DefaultWorkingDirectory)/bundle\\"\\n              Contents: |\\n                **/*\\n                !.git/**/*\\n                !**/*.js.map\\n                !**/*.ts\\n                !.vscode/**/*\\n                !.devops/**/*\\n                !.prettierrc\\n                !.gitignore\\n                !README.md\\n                !jest.config.js\\n                !local.settings.json\\n                !test\\n                !tsconfig.json\\n                !tslint.json\\n                !yarn.lock\\n                !Dangerfile.js\\n                !CODEOWNERS\\n                !__*/**/*\\n            displayName: \\"Copy deploy files\\"\\n\\n          - publish: $(System.DefaultWorkingDirectory)/bundle\\n            artifact: Bundle\\n\\n  # Deploy on staging slot\\n  - ${{ each app in parameters.PRODUCTION_APPS }}:\\n      - stage: Deploy_${{ app.Key }}_to_staging\\n        dependsOn:\\n          - Prepare_artifact\\n        jobs:\\n          - job: \\"do_deploy_${{ app.Key }}\\"\\n            steps:\\n              - checkout: none\\n              - download: current\\n                artifact: Bundle\\n\\n              - task: AzureFunctionApp@1\\n                inputs:\\n                  azureSubscription: \\"$(PRODUCTION_AZURE_SUBSCRIPTION)\\"\\n                  resourceGroupName: \\"${{ app.Value.rg }}\\"\\n                  appType: \\"functionApp\\"\\n                  appName: \\"${{ app.Value.appname }}\\"\\n                  package: \\"$(Pipeline.Workspace)/Bundle\\"\\n                  deploymentMethod: \\"auto\\"\\n                  deployToSlotOrASE: true\\n                  slotName: \\"staging\\"\\n                displayName: Deploy to staging slot\\n\\n  # Check that the staging instance is healthy\\n  - ${{ each app in parameters.PRODUCTION_APPS }}:\\n      - stage: Healthcheck_${{ app.Key }}\\n        dependsOn:\\n          - Deploy_${{ app.Key }}_to_staging\\n        pool:\\n          name: $(AGENT_POOL)\\n        jobs:\\n          - job: \\"do_healthcheck_${{ app.Key }}\\"\\n            steps:\\n              - checkout: none\\n              - script: |\\n                  # fails if response status is not 2xx\\n                  curl -f \'https://${{ app.Value.appname }}-staging.azurewebsites.net/$(HEALTHCHECK_PATH)\'\\n                displayName: \\"Healthcheck\\"\\n\\n  # Promote the staging instance to production\\n  - ${{ each app in parameters.PRODUCTION_APPS }}:\\n      - stage: Swap_${{ app.Key }}_to_production\\n        dependsOn:\\n          - Deploy_${{ app.Key }}_to_staging\\n          # Wait for every healthcheck to succeed\\n          # This implied that no app is swapped to prod if at least one healthcheck fails\\n          - ${{ each appInner in parameters.PRODUCTION_APPS }}:\\n              - Healthcheck_${{ appInner.Key }}\\n        jobs:\\n          - job: \\"do_deploy_${{ app.Key }}\\"\\n            steps:\\n              - checkout: none\\n              - task: AzureAppServiceManage@0\\n                inputs:\\n                  azureSubscription: \\"$(PRODUCTION_AZURE_SUBSCRIPTION)\\"\\n                  resourceGroupName: \\"${{ app.Value.rg }}\\"\\n                  webAppName: \\"${{ app.Value.appname }}\\"\\n                  sourceSlot: staging\\n                  swapWithProduction: true\\n                displayName: Swap with production slot\\n\\n  # Publish client SDK to NPM\\n  - stage: PublishClientSDKtoNPM\\n    dependsOn: Release\\n    pool:\\n      vmImage: \\"ubuntu-latest\\"\\n    jobs:\\n      - job: publish_SDK\\n        steps:\\n          # Template for generating and deploying client SDK to NPM\\n          - template: templates/client-sdk-publish/template.yaml@pagopaCommons\\n            parameters:\\n              openapiSpecPath: \\"openapi/index.yaml\\"\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\n### Assigning Permissions to Azure Services\\n\\n<Tabs>\\n  <TabItem value=\\"after\\" label=\\"With DX\\" default>\\n\\n```hcl\\nmodule \\"rp_func_roles\\" {\\n  source       = \\"github.com/pagopa/dx//infra/modules/azure_role_assignments?ref=main\\"\\n  principal_id = module.relying_party_func.system_identity_principal\\n\\n  cosmos = [{\\n    account_name = data.azurerm_cosmosdb_account.fims.name\\n    resource_group_name = data.azurerm_cosmosdb_account.fims.resource_group_name\\n    role = \\"writer\\"\\n  }]\\n\\n  key_vault = [{\\n    name = var.key_vault.name\\n    resource_group_name = var.key_vault.resource_group_name\\n    roles = { secrets = \\"reader\\" }\\n  }]\\n}\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"before\\" label=\\"Without DX\\">\\n\\n```hcl\\nresource \\"azurerm_key_vault_access_policy\\" \\"relying_party_func_key_vault_access_policy\\" {\\n  key_vault_id = var.key_vault.id\\n  tenant_id    = data.azurerm_client_config.current.tenant_id\\n  object_id    = module.relying_party_func.system_identity_principal\\n  secret_permissions = [\\"Get\\"]\\n  storage_permissions = []\\n  certificate_permissions = []\\n}\\n\\nresource \\"azurerm_cosmosdb_sql_role_assignment\\" \\"rp_func_sql_role\\" {\\n  resource_group_name = data.azurerm_cosmosdb_account.fims.resource_group_name\\n  account_name = data.azurerm_cosmosdb_account.fims.name\\n  role_definition_id = \\"${data.azurerm_cosmosdb_account.fims.id}/sqlRoleDefinitions/00000000-0000-0000-0000-000000000002\\"\\n  principal_id = module.relying_party_func.system_identity_principal\\n  scope = data.azurerm_cosmosdb_account.fims.id\\n}\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\n## I\'m sold! How Can I Get Involved?\\n\\nIf you want to adopt our tooling, contribute to the project, or simply learn\\nmore, don\'t hesitate to contact us on Slack in the\\n[#team_devex](https://pagopaspa.slack.com/archives/C06EK19JBMM) channel.\\n\\nWe want to make your work simpler and more rewarding, and we want to support you\\nas best as we can in these early stages of the initiative.\\n\\n:::info\\n\\nOur ultimate goal is to become unnecessary!\\n\\n:::\\n\\n## Looking Ahead\\n\\nIn the medium term (by 2025), we aim to achieve the highest score on the\\n[maturity score](https://pagopa.atlassian.net/wiki/spaces/DevEx/pages/1181941934/Platform+engineering+maturity+model)\\nfor our tooling and to have 100% adoption by stream-aligned teams. Follow our\\nprogress and activities on our\\n[Jira Board](https://pagopa.atlassian.net/jira/software/c/projects/DEVEX/boards/501/backlog).\\n\\nIn the long term we plan to support more languages (JAVA), frameworks, and cloud\\nproviders (AWS), and to create a community of developers who share our vision\\nand values.\\n\\nToday, we are just at the beginning. With DevEx, we are redefining how we\\ndevelop, collaborate, and innovate at PagoPA. Are you ready to join us on this\\njourney?"}]}}')}}]);