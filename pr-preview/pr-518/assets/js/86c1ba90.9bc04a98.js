"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3989],{969:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"conventions/pull-requests/code-review/index","title":"Code Reviews","description":"Responsibilities of the Pull Request Author","source":"@site/docs/conventions/pull-requests/code-review/index.md","sourceDirName":"conventions/pull-requests/code-review","slug":"/conventions/pull-requests/code-review/","permalink":"/dx/pr-preview/pr-518/docs/conventions/pull-requests/code-review/","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/conventions/pull-requests/code-review/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Contribution Acceptance Criteria","permalink":"/dx/pr-preview/pr-518/docs/conventions/pull-requests/acceptance-criteria"},"next":{"title":"Conventional Comments","permalink":"/dx/pr-preview/pr-518/docs/conventions/pull-requests/code-review/conventional-comments"}}');var s=i(3881),r=i(4718);const o={},l="Code Reviews",a={},d=[{value:"Responsibilities of the Pull Request Author",id:"responsibilities-of-the-pull-request-author",level:2},{value:"Before Requesting a Review",id:"before-requesting-a-review",level:2},{value:"What NOT to do within a PR",id:"what-not-to-do-within-a-pr",level:3},{value:"Responsibilities of PR Reviewers",id:"responsibilities-of-pr-reviewers",level:2},{value:"Everyone",id:"everyone",level:2},{value:"PR Author",id:"pr-author",level:2},{value:"PR Reviewer",id:"pr-reviewer",level:2},{value:"Credits",id:"credits",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"code-reviews",children:"Code Reviews"})}),"\n",(0,s.jsx)(n.h2,{id:"responsibilities-of-the-pull-request-author",children:"Responsibilities of the Pull Request Author"}),"\n",(0,s.jsxs)(n.p,{children:["The author of a Pull Request (PR) is responsible for finding the optimal\nsolution and implementing it. The author is responsible for verifying its\ncorrect functionality both before and after release.",(0,s.jsx)(n.br,{}),"\n","Before requesting a review, the author must ensure that:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the issue has been fully resolved"}),"\n",(0,s.jsx)(n.li,{children:"no bugs, logical issues, uncovered edge cases, or known vulnerabilities have\nbeen left in the code"}),"\n",(0,s.jsxs)(n.li,{children:["the best way to maximize the chances of having a PR approved without excessive\niterations is to perform a self-review following the\n",(0,s.jsx)(n.a,{href:"/dx/pr-preview/pr-518/docs/conventions/pull-requests/acceptance-criteria",children:"Contribution Acceptance Criteria"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"During the self-review, the author should add comments within the PR to explain\ndecisions, trade-offs, or areas where additional context would help the reviewer\nunderstand the code."}),"\n",(0,s.jsx)(n.h2,{id:"before-requesting-a-review",children:"Before Requesting a Review"}),"\n",(0,s.jsx)(n.p,{children:"The author is expected to add comments to notify the reviewers of any important\ndetails or areas that require additional explanation or attention, such as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the addition of a new library"}),"\n",(0,s.jsx)(n.li,{children:"potentially insecure code"}),"\n",(0,s.jsx)(n.li,{children:"non-obvious assumptions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"what-not-to-do-within-a-pr",children:"What NOT to do within a PR"}),"\n",(0,s.jsxs)(n.p,{children:["Do not add ",(0,s.jsx)(n.code,{children:"TODO"})," comments in the source code unless specifically requested by\nthe reviewer. If a ",(0,s.jsx)(n.code,{children:"TODO"})," comment is added due to a pending task, it must\ninclude a reference to the corresponding task in the backlog, like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# TODO: To be removed by https://pagopa.atlassian.net/browse/DX-0000\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Do not add comments that simply explain what the code does. If a non-TODO\ncomment is added, it should explain ",(0,s.jsx)(n.em,{children:"why"})," something was done, not ",(0,s.jsx)(n.em,{children:"what"})," the\ncode does."]}),"\n",(0,s.jsx)(n.p,{children:"Do not request a review for a PR if one or more CI checks are failing."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Feel free to open a Draft PR even if the CI checks are failing. Draft PR does\nnot notify reviewers, unless explicitly requested."})}),"\n",(0,s.jsx)(n.p,{children:"If the CI fails but a review is still necessary, make sure to leave a comment\nexplaining the reasons."}),"\n",(0,s.jsx)(n.h2,{id:"responsibilities-of-pr-reviewers",children:"Responsibilities of PR Reviewers"}),"\n",(0,s.jsxs)(n.p,{children:["Reviewers are responsible for carefully examining the proposed solution and\nensuring that the PR meets all\n",(0,s.jsx)(n.a,{href:"/dx/pr-preview/pr-518/docs/conventions/pull-requests/acceptance-criteria",children:"Contribution Acceptance Criteria"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"They must also ensure that technical debt is kept under control, carefully\nevaluating when it makes sense to create follow-up tasks to address any\ndocumented debt introduced by the PR."}),"\n",(0,s.jsx)(n.h1,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h2,{id:"everyone",children:"Everyone"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be kind"}),"\n",(0,s.jsx)(n.li,{children:"Accept that many programming decisions are opinions; discuss tradeoffs and\nreach a resolution quickly"}),"\n",(0,s.jsxs)(n.li,{children:["Ask questions, avoid making demands (e.g. \u201cWhat do you think about naming this\nmethod ",(0,s.jsx)(n.code,{children:"fetchHome"})," instead ",(0,s.jsx)(n.code,{children:"getHome"}),"?\u201d)"]}),"\n",(0,s.jsxs)(n.li,{children:["Ask for clarification (e.g. \u201cI didn\u2019t understand why this ",(0,s.jsx)(n.code,{children:"if"}),' statement is\nrequired. Can you clarify?")']}),"\n",(0,s.jsx)(n.li,{children:"Be explicit: remember people don\u2019t always understand your intentions online"}),"\n",(0,s.jsx)(n.li,{children:"Be humble"}),"\n",(0,s.jsx)(n.li,{children:"Consider one-on-one chats or video calls if there are too many \u201cI didn\u2019t\nunderstand\u201d or \u201cAlternative solution:\u201d comments. Post a follow-up comment\nsummarizing one-on-one discussion"}),"\n",(0,s.jsx)(n.li,{children:"If you ask a question to a specific person, always start the comment by\nmentioning them; this ensures they see it if their notification level is set\nto \u201cmentioned\u201d and other people understand they don\u2019t have to respond"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pr-author",children:"PR Author"}),"\n",(0,s.jsx)(n.p,{children:"Keep in mind that code review is a process that can take multiple iterations,\nand reviewers may spot things later that they may not have seen the first time."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The first reviewer of your code is you. Before requesting the review, read\nthrough the entire ",(0,s.jsx)(n.code,{children:"diff"}),". Does it make sense? Did you include something\nunrelated to the overall purpose of the changes?"]}),"\n",(0,s.jsxs)(n.li,{children:["Follow the\n",(0,s.jsx)(n.a,{href:"/dx/pr-preview/pr-518/docs/conventions/pull-requests/format#format-for-pull-requests",children:"guidelines to compile PR's title and description"})]}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t take it personally: the review is of the code, not of you"}),"\n",(0,s.jsx)(n.li,{children:"Extract unrelated changes and refactorings into future PRs"}),"\n",(0,s.jsx)(n.li,{children:"Seek to understand the reviewer\u2019s perspective"}),"\n",(0,s.jsx)(n.li,{children:"Try to respond to every comment"}),"\n",(0,s.jsx)(n.li,{children:"The PR author can only resolve threads that have been fully addressed. If a\ncomment remains open, it must be left for the comment author to resolve"}),"\n",(0,s.jsxs)(n.li,{children:["Don't assume that ",(0,s.jsx)(n.em,{children:"all"})," feedback requires to be incorporated. Consider to\naddress non mandatory suggestions with a follow up, after the PR is merged"]}),"\n",(0,s.jsxs)(n.li,{children:["Once ready for the next round, request feedback from the reviewer. Follow the\n",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review#requesting-reviews-from-collaborators-and-organization-members",children:"suggestion about requesting a new review from the GitHub guide"})]}),"\n",(0,s.jsx)(n.li,{children:"If you disagree with a suggestion, explain why: back up your arguments with\nfacts and data"}),"\n",(0,s.jsx)(n.li,{children:"If you make a change after a reviewer has approved it, you can ask them to\nreview the PR again"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pr-reviewer",children:"PR Reviewer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be as clear as possible to minimize unnecessary review iterations"}),"\n",(0,s.jsxs)(n.li,{children:["Communicate which ideas you feel strongly about and those you don\u2019t; you may\nuse the ",(0,s.jsx)(n.a,{href:"/dx/pr-preview/pr-518/docs/conventions/pull-requests/code-review/conventional-comments",children:"conventional comments"})]}),"\n",(0,s.jsx)(n.li,{children:"Identify ways to simplify the code while still solving the problem"}),"\n",(0,s.jsx)(n.li,{children:"Offer alternative implementations, but assume the author already considered\nthem (\u201cWhat do you think about using a custom validator here?\u201d)"}),"\n",(0,s.jsx)(n.li,{children:"Seek to understand the author\u2019s perspective"}),"\n",(0,s.jsx)(n.li,{children:"Check out the branch, and test the changes locally. Your testing might result\nin opportunities to add automated tests"}),"\n",(0,s.jsx)(n.li,{children:"If a piece of code is unclear, say so! There\u2019s a good chance someone else\nwould be confused by it as well"}),"\n",(0,s.jsx)(n.li,{children:"Suggest to simplify and eventually comment tricky code"}),"\n",(0,s.jsx)(n.li,{children:"Ensure the author understands what is required to resolve a comment"}),"\n",(0,s.jsx)(n.li,{children:"Summarize review feedback with a final note (e.g., \u201cLGTM\u201d, or \u201cI left some\nsuggestions, let me know what you think.\u201d)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"credits",children:"Credits"}),"\n",(0,s.jsxs)(n.p,{children:["Based on\n",(0,s.jsx)(n.a,{href:"https://docs.gitlab.com/development/code_review/#getting-your-merge-request-reviewed-approved-and-merged",children:"GitLab guidelines"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},4718:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(3309);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);