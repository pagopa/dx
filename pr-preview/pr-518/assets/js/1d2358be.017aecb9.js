"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3733],{1774:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/image_azmi-c9b6ace7d637d434617f1d81eedcdf5f.png"},3635:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"pipelines/azure-login","title":"Configuring Azure Login for GitHub Actions","description":"There are several ways to log into Azure using a GitHub Action. The DX-preferred","source":"@site/docs/pipelines/azure-login.md","sourceDirName":"pipelines","slug":"/pipelines/azure-login","permalink":"/dx/docs/pipelines/azure-login","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/pipelines/azure-login.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Configuring Azure Login for GitHub Actions"},"sidebar":"tutorialSidebar","previous":{"title":"Pipelines","permalink":"/dx/docs/pipelines/"},"next":{"title":"Deploying Assets to CDN","permalink":"/dx/docs/pipelines/cdn-deploy"}}');var r=i(3881),s=i(4718);const o={sidebar_position:1,sidebar_label:"Configuring Azure Login for GitHub Actions"},a="Configuring Azure Login for GitHub Actions",d={},c=[{value:"GitHub Environments",id:"github-environments",level:2},{value:"Managing Multiple GitHub Environments",id:"managing-multiple-github-environments",level:3},{value:"Managing Identity Roles",id:"managing-identity-roles",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuring-azure-login-for-github-actions",children:"Configuring Azure Login for GitHub Actions"})}),"\n",(0,r.jsx)(n.p,{children:"There are several ways to log into Azure using a GitHub Action. The DX-preferred\nmethod is passwordless, requiring no maintenance or secret management. Once set\nup, it works seamlessly."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["DX modules\n",(0,r.jsx)(n.a,{href:"https://registry.terraform.io/modules/pagopa-dx/azure-federated-identity-with-github/azurerm/latest",children:(0,r.jsx)(n.code,{children:"azure_federated_identity_with_github"})}),"\nand\n",(0,r.jsx)(n.a,{href:"https://registry.terraform.io/modules/pagopa-dx/azure-github-environment-bootstrap/azurerm/latest",children:(0,r.jsx)(n.code,{children:"azure_github_environment_bootstrap"})}),"\nalready implement the steps described in this article. Both modules provide a\ndefault set of roles in the current Azure subscription, which is likely\nsufficient for new repositories. However, the latter also creates the required\nGitHub Environments and secrets. If you're already using\n",(0,r.jsx)(n.code,{children:"azure_federated_identity_with_github"}),", you can skip the first section and read\nabout ",(0,r.jsx)(n.a,{href:"#github-environments",children:"GitHub Environments"})," and\n",(0,r.jsx)(n.a,{href:"#managing-multiple-github-environments",children:"how to manage multiple environments"}),".\nInstead, ",(0,r.jsx)(n.code,{children:"azure_github_environment_bootstrap"})," users might find it more useful to\nread about\n",(0,r.jsx)(n.a,{href:"../infrastructure/azure/azure-iam",children:"best practices for managing Azure IAM"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"To enable GitHub Actions to log into Azure, you need only two components:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"A User-Assigned Azure Managed Identity resource"}),"\n",(0,r.jsx)(n.li,{children:"A federation between the Azure Managed Identity and the GitHub repository"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Create a User-Assigned Managed Identity using the command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"az identity create --name <myIdentity> \\\n  --resource-group <myRg> \\\n  --location <myLocation> \\\n  --tags <myTags>\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["You need write access (e.g. ",(0,r.jsx)(n.code,{children:"Contributor"})," role) to the resource group set in the\ncommand above"]})}),"\n",(0,r.jsxs)(n.p,{children:["After creating the Managed Identity, retrieve its ",(0,r.jsx)(n.code,{children:"client id"})," and save it for\nlater use."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["You can obtain the Managed Identity Client ID in the Azure Portal by navigating\nto the Managed Identity resource:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.img,{alt:"Azure Portal showing the client id",src:i(1774).A+""})]}),(0,r.jsx)(n.p,{children:"Alternatively, you can find it using the Azure CLI:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"az identity show --name <myIdentity> \\\n  --resource-group <myRg>\n"})})]}),"\n",(0,r.jsxs)(n.p,{children:["To federate the identity with GitHub, navigate to the ",(0,r.jsx)(n.code,{children:"Federated Credentials"}),"\nblade and create a new credential. Select the option\n",(0,r.jsx)(n.code,{children:"Configure a GitHub issued token to impersonate this application and deploy to Azure"}),",\nand fill in the required fields. Alternatively, use the Azure CLI:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'az identity federated-credential create --identity-name <federationName> \\\n  --name <myName> \\\n  --resource-group <myRg> \\\n  --audiences "api://AzureADTokenExchange" \\\n  --issuer "https://token.actions.githubusercontent.com" \\\n  --subject "repo:{Organization}/{Repository}:{Entity}"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"Entity"})," can be a GitHub ",(0,r.jsx)(n.code,{children:"Environment"}),", ",(0,r.jsx)(n.code,{children:"Branch"}),", ",(0,r.jsx)(n.code,{children:"Pull Request"}),", or\n",(0,r.jsx)(n.code,{children:"Tag"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Your GitHub repository is now federated with the Managed Identity, allowing\nGitHub Actions to log into Azure for the specified ",(0,r.jsx)(n.code,{children:"Entity"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- name: Azure Login\n  uses: azure/login@v2\n  with:\n    client-id: ${{ env.ARM_CLIENT_ID }}\n    tenant-id: ${{ env.ARM_TENANT_ID }}\n    subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Although the three mentioned values are not secrets, they should not be\nhardcoded in the pipeline but stored as repository or GitHub ",(0,r.jsx)(n.em,{children:"environment"}),"\nsecrets. This is because they are likely to be used in multiple workflows and\ncould change over time."]}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Instead of specifying the ",(0,r.jsx)(n.code,{children:"azure/login"})," action directly, you will often pass\nthese values as workflow arguments to\n",(0,r.jsx)(n.a,{href:"https://github.com/pagopa/dx/tree/main/infra/modules",children:"DX Terraform Modules"}),"."]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"github-environments",children:"GitHub Environments"}),"\n",(0,r.jsxs)(n.p,{children:["A GitHub pipeline can use GitHub environments to inherit settings, secrets,\nvariables, permissions, and other configurations. As Azure subscriptions are\ngrouped by project (",(0,r.jsx)(n.code,{children:"PROD-IO"}),", ",(0,r.jsx)(n.code,{children:"PROD-SELFCARE"}),", etc.) and environment\n(",(0,r.jsx)(n.code,{children:"DEV-SELFCARE"}),", ",(0,r.jsx)(n.code,{children:"UAT-SELFCARE"}),", etc.), GitHub environments are used to retrieve\nthe value of a given secret depending on the current scope, which comprises\nboth."]}),"\n",(0,r.jsx)(n.p,{children:"The following values can be stored as secrets tied to specific GitHub\nenvironments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ARM_TENANT_ID"}),": This value is constant and can be stored as a repository\nsecret."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ARM_SUBSCRIPTION_ID"}),": If the project has a single environment, store it as a\nrepository secret; otherwise, use an environment secret."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ARM_CLIENT_ID"}),": Always store this as an environment secret."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["GitHub environments and secrets can be created via Terraform using the\n",(0,r.jsx)(n.a,{href:"https://github.com/pagopa/dx/tree/main/infra/repository",children:"provided DX module"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"managing-multiple-github-environments",children:"Managing Multiple GitHub Environments"}),"\n",(0,r.jsx)(n.p,{children:"A Managed Identity has a set of roles within a given subscription. Multiple\npipelines requiring the same roles can share the same Managed Identity and\nGitHub environment."}),"\n",(0,r.jsx)(n.p,{children:"Consider a scenario where a repository has two Azure Functions Apps, each with\nits own application code and Terraform code. The Terraform deployments require\nhigh privileges to create and update networking resources, identities, key vault\nsecrets, and more. On the other hand, the roles required for the Function App\ndeployments are limited to write access for the Function App resource control\nplane. These deployments do not need access to other resources such as\nnetworking, storage, or secrets. However, both Function Apps require the same\nroles as the action performed is identical."}),"\n",(0,r.jsx)(n.p,{children:"In this case, the two Function App pipelines can share the same Managed Identity\nand the related GitHub environment. However, the Terraform code should point to\na dedicated GitHub environment."}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:"The following naming convention is generally used for GitHub environments:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"infra-<env>-ci/cd"}),": For Infrastructure as Code (Terraform HCL) (e.g.,\n",(0,r.jsx)(n.code,{children:"infra-prod-ci"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app-<env>-ci/cd"}),": For application deployments (e.g., Azure Functions or App\nServices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"opex-<env>-ci/cd"}),": For Opex dashboard deployments"]}),"\n"]}),(0,r.jsx)(n.p,{children:"For other needs, create environments following this pattern."})]}),"\n",(0,r.jsx)(n.h2,{id:"managing-identity-roles",children:"Managing Identity Roles"}),"\n",(0,r.jsxs)(n.p,{children:["The module\n",(0,r.jsx)(n.a,{href:"https://registry.terraform.io/modules/pagopa-dx/azure-federated-identity-with-github/azurerm/latest",children:(0,r.jsx)(n.code,{children:"azure_federated_identity_with_github"})}),"\nassigns a default set of roles. However, these roles may need to be updated over\ntime."]}),"\n",(0,r.jsx)(n.p,{children:"This can happen when, for example, a new resource is added to the configuration\nthat requires special roles. Or when the Terraform code needs to read a secret\nfrom a new KeyVault or access blobs from a new Storage Account. It is impossible\nto anticipate all possible cases, as things change over time."}),"\n",(0,r.jsx)(n.p,{children:"Therefore, it is important to update the identity definition with the\nappropriate roles whenever a new role is needed. There are numerous scenarios\nwhere this could occur, but some common examples include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Modify roles for system-assigned managed identities"}),"\n",(0,r.jsx)(n.li,{children:"Access new entities in a KeyVault (e.g., certificates, secrets, or keys)"}),"\n",(0,r.jsx)(n.li,{children:"Add VNet peerings"}),"\n",(0,r.jsx)(n.li,{children:"Update APIM configurations"}),"\n",(0,r.jsx)(n.li,{children:"Read from a Storage Account container, queue, or table"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The general advice is to check the CI pipeline, as it may fail due to a missing\nrole. In such cases, identify the required role using the official documentation\nand create a pull request (PR) with the updated definition."}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"Setting new roles is straightforward but must be done separately for CI and CD\nidentities."})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Roles are assigned at the subscription and resource group levels. Refer to the\nmodule documentation for details."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},4718:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(3309);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);