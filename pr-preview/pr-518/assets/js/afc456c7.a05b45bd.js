"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[664],{4718:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>c});var s=o(3309);const i={},r=s.createContext(i);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(r.Provider,{value:n},e.children)}},8650:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"pipelines/code-review","title":"Code Review","description":"The","source":"@site/docs/pipelines/code-review.md","sourceDirName":"pipelines","slug":"/pipelines/code-review","permalink":"/dx/docs/pipelines/code-review","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/pipelines/code-review.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Code Review"},"sidebar":"tutorialSidebar","previous":{"title":"Deploying Assets to CDN","permalink":"/dx/docs/pipelines/cdn-deploy"},"next":{"title":"Detecting Drift in Infrastructure as Code","permalink":"/dx/docs/pipelines/drift-detection"}}');var i=o(3881),r=o(4718);const t={sidebar_position:1,sidebar_label:"Code Review"},c="Code Review",d={},l=[{value:"How It Works",id:"how-it-works",level:2},{value:"Usage",id:"usage",level:2},{value:"Notes",id:"notes",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"code-review",children:"Code Review"})}),"\n",(0,i.jsxs)(n.p,{children:["The\n",(0,i.jsx)(n.a,{href:"https://github.com/pagopa/dx/blob/main/.github/workflows/js_code_review.yaml",children:"Code Review workflow"}),"\nensures code quality by running the ",(0,i.jsx)(n.code,{children:"code-review"})," script. Teams must define this\nscript for each of their projects based on the toolchain and the checks required\nin the CI pipeline."]}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsxs)(n.p,{children:["The workflow executes the ",(0,i.jsx)(n.code,{children:"code-review"})," script specified in the root\n",(0,i.jsx)(n.code,{children:"package.json"}),". This script can include tasks such as type checking, linting,\nformatting checks, or other project-specific validations."]}),"\n",(0,i.jsxs)(n.p,{children:["The workflow does not enforce specific checks but relies on the project to\ndefine them. Additionally, if the ",(0,i.jsx)(n.code,{children:"CODECOV_TOKEN"})," secret is set, the workflow\nuploads test coverage reports to Codecov."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Ensure your root ",(0,i.jsx)(n.code,{children:"package.json"})," includes a ",(0,i.jsx)(n.code,{children:"code-review"})," script tailored to your\nproject's requirements. For example:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  "code-review": "turbo run typecheck lint:check format:check"\n}\n'})}),(0,i.jsxs)(n.p,{children:["Each task (e.g., ",(0,i.jsx)(n.code,{children:"typecheck"}),", ",(0,i.jsx)(n.code,{children:"lint:check"}),", ",(0,i.jsx)(n.code,{children:"format:check"}),") should be defined in\nthe respective workspace ",(0,i.jsx)(n.code,{children:"package.json"})," files."]})]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"To use the Code Review workflow, reference it as a reusable workflow in your\nrepository. Below is an example configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: Code Review\n\non:\n  pull_request:\n\njobs:\n  code_review:\n    uses: pagopa/dx/.github/workflows/js_code_review.yaml@main\n    name: Code Review\n    secrets: inherit\n"})}),"\n",(0,i.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Customizable Checks"}),": The workflow runs the ",(0,i.jsx)(n.code,{children:"code-review"})," script, allowing\neach project to define its own checks based on its toolchain."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Turbo Integration"}),": Ensure ",(0,i.jsx)(n.code,{children:"turbo"})," is installed as a dev dependency in the\nroot ",(0,i.jsx)(n.code,{children:"package.json"})," to efficiently orchestrate tasks across workspaces."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Coverage"}),": To enable Codecov integration, set the ",(0,i.jsx)(n.code,{children:"CODECOV_TOKEN"}),"\nsecret in your repository."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency Management"}),": The workflow uses ",(0,i.jsx)(n.code,{children:"yarn install --immutable"})," to\nensure a consistent dependency tree. Keep your ",(0,i.jsx)(n.code,{children:"yarn.lock"})," file up-to-date."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);