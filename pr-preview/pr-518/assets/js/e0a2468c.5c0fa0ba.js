"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7632],{3614:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"pipelines/triggers","title":"Setting Up Pipeline Triggers","description":"Triggers in a CI/CD pipeline are more than just automated switches; they embody","source":"@site/docs/pipelines/triggers.md","sourceDirName":"pipelines","slug":"/pipelines/triggers","permalink":"/dx/pr-preview/pr-518/docs/pipelines/triggers","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/pipelines/triggers.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Setting Up Pipeline Triggers"},"sidebar":"tutorialSidebar","previous":{"title":"Publish SDK - Legacy","permalink":"/dx/pr-preview/pr-518/docs/pipelines/legacy-publish-sdk"}}');var r=i(3881),o=i(4718);const t={sidebar_position:1,sidebar_label:"Setting Up Pipeline Triggers"},l="Setting Up Pipeline Triggers",a={},d=[{value:"Continuous Integration on GitHub Actions",id:"continuous-integration-on-github-actions",level:2},{value:"Continuous Delivery on GitHub Actions",id:"continuous-delivery-on-github-actions",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"setting-up-pipeline-triggers",children:"Setting Up Pipeline Triggers"})}),"\n",(0,r.jsx)(n.p,{children:"Triggers in a CI/CD pipeline are more than just automated switches; they embody\nthe principles of flow and harmony within software development. By defining when\nand how processes like building, testing, or deploying should happen, triggers\nshape the rhythm of the pipeline. If set with precision, they ensure that every\nchange is seamlessly integrated, tested, and delivered, maintaining the\nintegrity of the repository. However, if misconfigured, they can lead to\ninconsistencies, breaking the cadence of development and introducing chaos into\nwhat should be a continuous, smooth evolution. In essence, triggers dictate the\npipeline's scope, serving as the silent guardians of coherence and reliability."}),"\n",(0,r.jsx)(n.p,{children:"This document provides a guide on how triggers should be set when using the\nGitHub Actions template provided by this repository."}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["Every pipeline should have the ",(0,r.jsx)(n.code,{children:"workflow_dispatch"})," trigger. In this way we will\nalways be able to launch it from the UI, which may be necessary in moments when\nit is necessary to exit the ordinary flow (i.e. incidents)."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"on:\n  workflow_dispatch:\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"continuous-integration-on-github-actions",children:"Continuous Integration on GitHub Actions"}),"\n",(0,r.jsx)(n.p,{children:"Continuous integration refers to the build, validation and testing of the\nsoftware. Generally, these tasks should be launched when a Pull Request is\nopened against the main branch, to ensure that high code quality is maintained."}),"\n",(0,r.jsx)(n.p,{children:"Then, a pipeline in charge of validate code (unit test, linter, Terraform Plans,\netc.) should run when:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"a PR is opened"}),"\n",(0,r.jsx)(n.li,{children:"a commit is added to an already opened PR"}),"\n",(0,r.jsx)(n.li,{children:"a previously closed PR is reopened"}),"\n",(0,r.jsx)(n.li,{children:"a draft PR is marked as ready for review"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To achieve these settings, use the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"on:\n  pull_request:\n    types:\n      - opened # Trigger on new PRs\n      - synchronize # Trigger when commits are added to an open PR\n      - reopened # Trigger when a closed PR is reopened\n      - ready_for_review # Trigger when a draft PR is marked as ready\n"})}),"\n",(0,r.jsx)(n.p,{children:"At the end, add the trigger paths which would make sense to you. These generally\nare:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Terraform:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the path to the specific Terraform configuration, including both environment\n(i.e. ",(0,r.jsx)(n.code,{children:"prod"}),") and modules (",(0,r.jsx)(n.code,{children:"_modules"}),") folders"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"the GitHub workflow file you are working on, including also the CD file"}),"\n",(0,r.jsxs)(n.li,{children:["apps:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"the workspace of a given application"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a good setup for Terraform CI workflows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'on:\n  pull_request:\n    types:\n      - ...\n    paths:\n      - "infra/resources/prod/**"\n      - "infra/resources/_modules/**"\n      - ".github/workflows/core_code_review.yaml"\n      - ".github/workflows/core_deploy.yaml"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"continuous-delivery-on-github-actions",children:"Continuous Delivery on GitHub Actions"}),"\n",(0,r.jsx)(n.p,{children:"Continuous Delivery focuses on ensuring software is always release-ready with\nmanual approval. Generally, these pipelines run when a Pull Request is merged in\nthe main branch."}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Continuous Delivery and Continuous Deployment are not the same thing: continuous\ndeployment automates the release process, deploying changes to production once\ntests pass. No manual approval is required."}),(0,r.jsx)(n.p,{children:"We stick to Continuous Delivery."})]}),"\n",(0,r.jsx)(n.p,{children:"Then, a pipeline in charge of deploying code (zip deployment, Docker images\npushing, Terraform Apply, etc.) should run when:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"a PR is merged"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The only necessary trigger is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"on:\n  push:\n    branches:\n      - main\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"main"})," with ",(0,r.jsx)(n.code,{children:"master"})," if needed for your repository"]})}),"\n",(0,r.jsx)(n.p,{children:"At the end, add the trigger paths which would make sense to you. These generally\nare:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Terraform:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the path to the specific Terraform configuration, including both environment\n(i.e. ",(0,r.jsx)(n.code,{children:"prod"}),") and modules (",(0,r.jsx)(n.code,{children:"_modules"}),") folders"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"the CD GitHub workflow file you are working on"}),"\n",(0,r.jsxs)(n.li,{children:["apps:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"the workspace of a given application"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a good setup for Terraform CD workflows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'on:\n  pull_request:\n    types:\n      - ...\n    paths:\n      - "infra/resources/prod/**"\n      - "infra/resources/_modules/**"\n      - ".github/workflows/core_deploy.yaml"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["While the pipeline job starts through trigger automation, setting up your GitHub\nrepository to require a manual approval for the actual deployment is\n",(0,r.jsx)(n.strong,{children:"strongly"})," adviced."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},4718:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(3309);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);