"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8122],{4718:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(3309);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},8819:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"infrastructure/azure/appservice-hidden-appsettings","title":"Using Secrets in AppService Environment Variables","description":"Overview","source":"@site/docs/infrastructure/azure/appservice-hidden-appsettings.md","sourceDirName":"infrastructure/azure","slug":"/infrastructure/azure/appservice-hidden-appsettings","permalink":"/dx/pr-preview/pr-518/docs/infrastructure/azure/appservice-hidden-appsettings","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/infrastructure/azure/appservice-hidden-appsettings.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Using Secrets in AppService Environment Variables"},"sidebar":"tutorialSidebar","previous":{"title":"Creating and Managing Azure Policies","permalink":"/dx/pr-preview/pr-518/docs/infrastructure/azure/azure-policies"},"next":{"title":"Verifying Online Service Reachability from an App Service Plan","permalink":"/dx/pr-preview/pr-518/docs/infrastructure/azure/appservice-plan-dns-resolution"}}');var r=s(3881),i=s(4718);const a={sidebar_label:"Using Secrets in AppService Environment Variables"},c="Using Secrets in AppService Environment Variables",o={},l=[{value:"Overview",id:"overview",level:2},{value:"How-To use Key Vault References as AppSettings",id:"how-to-use-key-vault-references-as-appsettings",level:2},{value:"Techniques to Facilitate the Code Refactoring",id:"techniques-to-facilitate-the-code-refactoring",level:3},{value:"Managing Sensitive Resource Outputs",id:"managing-sensitive-resource-outputs",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"using-secrets-in-appservice-environment-variables",children:"Using Secrets in AppService Environment Variables"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Using secret values in AppService (or FunctionApp) is a common challenge for\ndevelopers. Terraform is often used to set secrets exported by other resources\nsuch as Storage Accounts, but this approach is not convenient as involves lot of\ndownsides. In fact, anyone is able to read AppSettings, sensitive values are\nstored in plain text in Terraform state file and the secret rotation must be\nexecuted manually through Terraform."}),"\n",(0,r.jsx)(n.p,{children:"This guide aims to instruct developers with best practices, providing guidelines\nfor a better secrets management including the following benefits:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Updating a value in KeyVault does not require a Terraform Apply anymore:\nthrough the Azure Portal it is possible to force new values pulling from\nKeyVault"}),"\n",(0,r.jsx)(n.li,{children:"If a secret reference is broken (e.g. missing secret, lack of read\npermissions, etc.), Azure Portal highlights it in red"}),"\n",(0,r.jsx)(n.li,{children:"It becomes easier to track where secrets have been used"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-to-use-key-vault-references-as-appsettings",children:"How-To use Key Vault References as AppSettings"}),"\n",(0,r.jsx)(n.p,{children:"To use secrets from KeyVault as AppSettings values, you can follow these steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Granting the AppService's system-assigned managed identity access to read\nsecrets:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For KeyVaults using Access Policies, assign ",(0,r.jsx)(n.code,{children:"Get"})," and ",(0,r.jsx)(n.code,{children:"List"})," permissions."]}),"\n",(0,r.jsxs)(n.li,{children:["For KeyVaults using RBAC, assign the ",(0,r.jsx)(n.code,{children:"Key Vault Secrets User"})," role."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"By referencing the secrets from the AppService environment variables, using\none between:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"@Microsoft.KeyVault(VaultName=<kv-name>;SecretName=<secret-name>)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"@Microsoft.KeyVault(SecretUri=https://<kv-name>.vault.azure.net/secrets/<secret-name>)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["Despite it is possible to refer a specific secret ",(0,r.jsx)(n.strong,{children:"version"}),", the practice is\ndiscouraged as it requires a manual secret rotation. More information is\navailable in the\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/key-vault/keys/how-to-configure-key-rotation#key-rotation-policy",children:"official KeyVault documentation"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"techniques-to-facilitate-the-code-refactoring",children:"Techniques to Facilitate the Code Refactoring"}),"\n",(0,r.jsx)(n.p,{children:"The shared approach requires some code refactoring. We recommend to encapsulate\nthe logic in the submodule of your AppService/Functions Apps in something like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'locals {\n  local.function_apps.common_app_settings,\n  {\n    for s in var.app_settings :\n    s.name => s.key_vault_secret_name != null ? "@Microsoft.KeyVault(VaultName=${var.key_vault_name};SecretName=${s.key_vault_secret_name})" : s.value\n  }\n}\n\nvariable "app_settings" {\n  type = list(object({\n    name                  = string\n    value                 = optional(string, "")\n    key_vault_secret_name = optional(string)\n  }))\n  description = "AppSettings configuration"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, the caller root module could use this code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'app_settings = [\n  {\n    name                  = "secret1"\n    key_vault_secret_name = "secret1"\n  },\n  {\n    name                  = "secret2"\n    key_vault_secret_name = "secret2"\n  },\n  {\n    name  = "plan1"\n    value = "plain value"\n  },\n]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"managing-sensitive-resource-outputs",children:"Managing Sensitive Resource Outputs"}),"\n",(0,r.jsx)(n.p,{children:"In some scenarios, the output of a Terraform module may include sensitive\nvalues, leading to the issue described above."}),"\n",(0,r.jsx)(n.p,{children:"To address this, you should save the output value into KeyVault and reference it\nusing the previously illustrated syntax."}),"\n",(0,r.jsx)(n.p,{children:"To save a secret in the KeyVault:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'resource "azurerm_key_vault_secret" "example" {\n  name         = "secret-sauce"\n  value        = "szechuan"\n  key_vault_id = azurerm_key_vault.example.id\n\n  tags = local.tags\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This code requires either the ",(0,r.jsx)(n.code,{children:"Set"})," policy assignment or the\n",(0,r.jsx)(n.code,{children:"Key Vault Secrets Officer"})," role."]}),"\n",(0,r.jsxs)(n.p,{children:["More info can be found in the\n",(0,r.jsx)(n.a,{href:"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret",children:"official KeyVault documentation"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);