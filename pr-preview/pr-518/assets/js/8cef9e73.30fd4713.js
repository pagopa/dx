"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4293],{1304:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/architecture-136a69a1dd7045afec68a4ccfeb11dff.svg"},4718:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(3309);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},8923:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"infrastructure/azure/iam-cross-subscription","title":"Implementing Azure IAM Across Subscriptions using Terraform","description":"Managing Azure Identity and Access Management (IAM) across multiple","source":"@site/docs/infrastructure/azure/iam-cross-subscription.md","sourceDirName":"infrastructure/azure","slug":"/infrastructure/azure/iam-cross-subscription","permalink":"/dx/docs/infrastructure/azure/iam-cross-subscription","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/infrastructure/azure/iam-cross-subscription.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Implementing Azure IAM Across Subscriptions using Terraform"},"sidebar":"tutorialSidebar","previous":{"title":"Managing Azure IAM Roles and Permissions","permalink":"/dx/docs/infrastructure/azure/azure-iam"},"next":{"title":"Connecting Resources Across Azure Subscription via Private Endpoints","permalink":"/dx/docs/infrastructure/azure/peps-cross-subscription"}}');var i=r(3881),t=r(4718);const a={sidebar_label:"Implementing Azure IAM Across Subscriptions using Terraform"},o="Implementing Azure IAM Across Subscriptions using Terraform",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Step-by-Step Implementation",id:"step-by-step-implementation",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Defining the Terraform Code",id:"defining-the-terraform-code",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Maintenance Over Time",id:"maintenance-over-time",level:2},{value:"Principal ID Changes",id:"principal-id-changes",level:3},{value:"Access Requirements Change",id:"access-requirements-change",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"implementing-azure-iam-across-subscriptions-using-terraform",children:"Implementing Azure IAM Across Subscriptions using Terraform"})}),"\n",(0,i.jsx)(n.p,{children:"Managing Azure Identity and Access Management (IAM) across multiple\nsubscriptions can be complex. This guide provides a step-by-step approach to\nimplementing cross-subscription role assignments using Terraform, ensuring a\nclear separation of concerns and resource ownership."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["In Azure, to enable a resource (e.g., Managed Identity, Service Principal) to\naccess another resource, you need to create a ",(0,i.jsx)(n.code,{children:"Role Assignment"})," that assigns\nspecific roles to the target. However, managing Terraform code across separate\nGit repositories for each subscription can be challenging."]}),"\n",(0,i.jsx)(n.p,{children:"The diagram below is a high-level view of the architecture described in the next\nsections. The ultimate goal is to ensure a clear separation of concerns and\nresource ownership."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:r(1304).A+""})}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-implementation",children:"Step-by-Step Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsx)(n.p,{children:"To implement a cross-subscription role assignment, you will need:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Principal ID: The ID of the resource in Subscription A that needs access; this\ncould be either a Managed Identity or an Entra ID group"}),"\n",(0,i.jsx)(n.li,{children:"Subscription ID: The ID of Subscription B where the target resource is located"}),"\n",(0,i.jsx)(n.li,{children:"Role Definition: The appropriate role that grants the necessary permissions\n(e.g., Reader, Contributor)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"defining-the-terraform-code",children:"Defining the Terraform Code"}),"\n",(0,i.jsxs)(n.p,{children:["To create a ",(0,i.jsx)(n.code,{children:"Role Assignment"}),", you can use the DX Terraform module\n",(0,i.jsx)(n.a,{href:"https://registry.terraform.io/modules/pagopa/dx-azure-role-assignments/azurerm/latest",children:"dx-azure-role-assignments"}),"\nwhich allows you to give more roles at a time to the same principal and\nabstracts away the complexity of the role choice."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'module "roles" {\n  source  = "pagopa-dx/azure-role-assignments/azurerm"\n  version = "~> 0.0"\n\n  principal_id = "caller-resource-id"\n\n  cosmos = [\n    {\n      account_name        = "cosmosdb-account-name"\n      resource_group_name = "cosmosdb-account-resource-group-name"\n      role                = "writer"\n    }\n  ]\n\n  key_vault = [\n    {\n      name                = "keyvault-name"\n      resource_group_name = "keyvault-resource-group-name"\n      roles = {\n        secrets = "reader"\n      }\n    }\n  ]\n\n  storage_blob = [\n    {\n      storage_account_name = "storage-account-name"\n      resource_group_name  = "storage-account-resource-group-name"\n      container_name       = "container-name"\n      role                 = "reader"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If the target resource type is not supported by the module\n(",(0,i.jsx)(n.a,{href:"https://github.com/pagopa/dx/issues/new",children:"let us know!"}),"), you can create the\n",(0,i.jsx)(n.code,{children:"Role Assignment"})," by using the Terraform resource for each assignment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'resource "azurerm_role_assignment" "example" {\n  scope                = "target-resource-id"\n  role_definition_name = "Reader"\n  principal_id         = "caller-resource-id"\n  description          = "Add a meaningful description"\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"principal_id"})," value could be a hardcoded string as well as a reference to\nthe actual resource via Terraform ",(0,i.jsx)(n.code,{children:"data"})," block. However, for the latter, both\nyou and the Managed Identities federated with your GitHub workflows need to have\nthe ",(0,i.jsx)(n.code,{children:"Reader"})," role on the target resource (subscription A)."]})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Documentation: Document all cross-subscription relationships in a central\nlocation"}),"\n",(0,i.jsxs)(n.li,{children:["Comments: Add comments in the Terraform code explaining:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The purpose of the access"}),"\n",(0,i.jsx)(n.li,{children:"The source resource details"}),"\n",(0,i.jsx)(n.li,{children:"The date when access was granted"}),"\n",(0,i.jsx)(n.li,{children:"The ticket/request reference"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"maintenance-over-time",children:"Maintenance Over Time"}),"\n",(0,i.jsx)(n.h3,{id:"principal-id-changes",children:"Principal ID Changes"}),"\n",(0,i.jsx)(n.p,{children:"If the principal ID in Subscription A changes (e.g., due to recreation of a\nresource):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The team in Subscription A should notify the team in Subscription B"}),"\n",(0,i.jsx)(n.li,{children:"The team in Subscription B should update the hardcoded principal ID"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"access-requirements-change",children:"Access Requirements Change"}),"\n",(0,i.jsx)(n.p,{children:"If the access requirements change:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The team in Subscription A should create a new request"}),"\n",(0,i.jsx)(n.li,{children:"The team in Subscription B should update the role assignment"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Implementing Azure IAM across subscriptions using Terraform can streamline your\naccess management processes. By following the steps outlined in this guide and\nadhering to best practices, you can ensure secure and efficient management of\ncross-subscription permissions."})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);