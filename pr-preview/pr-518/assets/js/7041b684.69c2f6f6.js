"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1899],{2696:e=>{e.exports=JSON.parse('{"permalink":"/dx/blog/typescript-openapi-generators-0.1-alpha","editUrl":"https://github.com/pagopa/dx/tree/main/website/blog/002-benchmark-openapi-gen.mdx","source":"@site/blog/002-benchmark-openapi-gen.mdx","title":"Benchmark for Typescript Code Generators from OpenAPI","description":"Generating TypeScript Code from OpenAPI Specification","date":"2024-09-24T17:00:00.000Z","tags":[],"readingTime":5.08,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Benchmark for Typescript Code Generators from OpenAPI","description":"Generating TypeScript Code from OpenAPI Specification","slug":"typescript-openapi-generators-0.1-alpha","hide_table_of_contents":false,"date":"2024-09-24T17:00","toc_min_heading_level":2,"toc_max_heading_level":2},"unlisted":false,"prevItem":{"title":"Introducing the \'Azure GitHub Environment Bootstrap\' Terraform Module to Enhance New Project Startup","permalink":"/dx/blog/devex-azure-bootstrap-0.1-alpha"},"nextItem":{"title":"DevEx Initiative: Transforming the Development Experience at PagoPA","permalink":"/dx/blog/devex-initiative-0.1-alpha"}}')},4718:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(3309);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},9287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var i=t(2696),s=t(3881),r=t(4718);const o={title:"Benchmark for Typescript Code Generators from OpenAPI",description:"Generating TypeScript Code from OpenAPI Specification",slug:"typescript-openapi-generators-0.1-alpha",hide_table_of_contents:!1,date:"2024-09-24T17:00",toc_min_heading_level:2,toc_max_heading_level:2},a="Benchmark for Typescript Code Generators from OpenAPI",c={authorsImageUrls:[]},d=[{value:"Guiding Principles",id:"guiding-principles",level:2},{value:"Main Requirements",id:"main-requirements",level:3},{value:"Additional Features (Nice to Have)",id:"additional-features-nice-to-have",level:3},{value:"Comparison",id:"comparison",level:2},{value:"Exclusion Criteria",id:"exclusion-criteria",level:2},{value:"Generated Code Repository",id:"generated-code-repository",level:2},{value:"Issues with openapi-zod-client",id:"issues-with-openapi-zod-client",level:2},{value:"Example of Inaccurate Type Generation",id:"example-of-inaccurate-type-generation",level:3},{value:"Issues with swagger-typescript-api + ts-to-zod",id:"issues-with-swagger-typescript-api--ts-to-zod",level:2},{value:"Example of Accurate Type Generation",id:"example-of-accurate-type-generation",level:3},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The digital services we provide interact through REST APIs that are documented\nusing OpenAPI specifications."}),"\n",(0,s.jsx)(n.p,{children:"Using API clients requires the code that handles HTTP requests and responses to\nstrictly adhere to the OpenAPI specifications. This is crucial to ensure that\nthe exchanged data is valid and consistent with the defined schemas. Similarly,\nwhen providing APIs through NodeJS services, such as Express or similar\nframeworks, it is important to follow the same standards. This ensures that the\nAPIs are reliable, scalable, and easy to maintain."}),"\n",(0,s.jsx)(n.p,{children:"The purpose of this document is to evaluate and compare various TypeScript\nOpenAPI generators for both frontend and backend development. The evaluation\nwill focus on critical features and help determine whether to invest in a custom\ntool (make) or adopt an existing tool."}),"\n",(0,s.jsx)(n.h2,{id:"guiding-principles",children:"Guiding Principles"}),"\n",(0,s.jsx)(n.h3,{id:"main-requirements",children:"Main Requirements"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Runtime Payload Control"})," The generators must provide runtime controls on\nthe payloads to ensure data integrity and adherence to defined schemas. We\nbelieve runtime control is necessary to guarantee that the Typescript type\nmatches the actual structure of the payload. Without this, there's a higher\nchance of runtime errors due to discrepancies in the data format."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Generation of Isomorphic Types"})," The ability to generate types usable both\non the client and server sides (e.g., in Express route handlers)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Support for String Patterns (Regex)"})," Generators must support string\npatterns using regular expressions to enforce constraints on string values."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Support for JSON Schema Constraints"})," For example, the handling of\nconstraints such as minimum, maximum, exclusiveMinimum, and exclusiveMaximum\nis essential for validating numeric data."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Community and Maintainability"})," A strong community and/or easily\nmaintainable codebase are crucial for the long-term viability and support of\nthe generator."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"additional-features-nice-to-have",children:"Additional Features (Nice to Have)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Support for Security Headers"})," Generators should support security headers\nto enhance API security."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Support for File Uploads"})," The ability to handle file uploads seamlessly\nwithin the API."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Support for File Downloads (Octet Stream)"})," There must be support for file\ndownloads, specifically as an octet stream."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Minimal Footprint"})," Generators should aim for minimal footprint, e.g.,\ngenerating one type per file with tree-shaking capabilities to optimize\nperformance."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Developer Experience"})," High performance during code generation is\nimportant. The generator should be fast and not slow down the IDE, even\nduring type inference."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"comparison",children:"Comparison"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"typed-openapi"}),": Converts to Typescript before converting to runtime types\n(typebox-codegen \u2192 zod), losing information on constraints."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"openapi-generator"}),": Runtime checks are limited to verifying if the value is\ndefined."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"swagger-codegen"}),": An older version of openapi-generator."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"autorest"}),": Seems promising on paper, but couldn't get it to start (freezes\non startup)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"openapi-io-ts"}),": Inexistent community, doesn't work with our specs, not\nmaintained."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"orval"}),": Primarily targets React; generates code that works on our specs."]}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Generator"}),(0,s.jsx)(n.th,{children:"Server Types"}),(0,s.jsx)(n.th,{children:"Community"}),(0,s.jsx)(n.th,{children:"Supports Regex (Pattern String)"}),(0,s.jsx)(n.th,{children:"Supports Min/Max (Number)"}),(0,s.jsx)(n.th,{children:"Supports HTTP Headers"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"typed-openapi"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"openapi-generator"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"swagger-codegen"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"autorest"}),(0,s.jsx)(n.td,{children:"???"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"???"}),(0,s.jsx)(n.td,{children:"???"}),(0,s.jsx)(n.td,{children:"???"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"openapi-io-ts"}),(0,s.jsx)(n.td,{children:"???"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"???"}),(0,s.jsx)(n.td,{children:"???"}),(0,s.jsx)(n.td,{children:"???"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"orval"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Yes"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"exclusion-criteria",children:"Exclusion Criteria"}),"\n",(0,s.jsx)(n.p,{children:"Some tools are excluded from this benchmark due to lack of runtime controls (at\nleast, as of the writing of this document):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"heyapi"}),"\n",(0,s.jsx)(n.li,{children:"oazapfts"}),"\n",(0,s.jsx)(n.li,{children:"openapi-backend"}),"\n",(0,s.jsx)(n.li,{children:"openapi-typescript"}),"\n",(0,s.jsx)(n.li,{children:"swagger-typescript-api"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Although it is possible to translate the generated Typescript types into\nstructures (e.g., zod/typebox) that allow runtime controls, this kind of\nconversion results in a loss of information on constraints (e.g., maximum,\nminimum, maxLength, pattern, etc.)."}),"\n",(0,s.jsx)(n.h2,{id:"generated-code-repository",children:"Generated Code Repository"}),"\n",(0,s.jsxs)(n.p,{children:["A repository is available to compare the code of different generators:\n",(0,s.jsx)(n.a,{href:"https://github.com/gunzip/openapi-generator-benchmark",children:"GitHub - gunzip/openapi-generator-benchmark"})]}),"\n",(0,s.jsx)(n.h2,{id:"issues-with-openapi-zod-client",children:"Issues with openapi-zod-client"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Inaccurate type generation."}),"\n",(0,s.jsxs)(n.li,{children:["Poor performance in the IDE due to type inference from the single object\npassed to the zodios ",(0,s.jsx)(n.code,{children:"makeApi"})," method."]}),"\n",(0,s.jsxs)(n.li,{children:["Dependency on ",(0,s.jsx)(n.code,{children:"@zodios/core"})," for HTTP calls (via Axios), parameter\nvalidation, and query string handling."]}),"\n",(0,s.jsx)(n.li,{children:"Does not support multiple successful values (2xx codes)."}),"\n",(0,s.jsx)(n.li,{children:"Both the client and types are contained in a single file, making it hard to\noptimize the bundle (important for frontend clients)."}),"\n",(0,s.jsx)(n.li,{children:"The maintainer of zodios has been inactive for a while."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-of-inaccurate-type-generation",children:"Example of Inaccurate Type Generation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const MessageSubject = z.string();\nconst MessageBodyMarkdown = z.string();\nconst MessageContent = z\n  .object({\n    subject: MessageSubject.min(10).max(120).optional(),\n    markdown: MessageBodyMarkdown.min(80).max(10000),\n  })\n  .passthrough();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generated from the foloowing OpenAPI schema:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'MessageSubject:\n      type: string\n      minLength: 10\n      maxLength: 120\n    MessageBodyMarkdown:\n      type: string\n      minLength: 80\n      maxLength: 10000\n          MessageContent:\n      type: object\n    MessageContent:\n      properties:\n        subject:\n          $ref: "#/components/schemas/MessageSubject"\n        markdown:\n          $ref: "#/components/schemas/MessageBodyMarkdown"\n      required:\n        - markdown\n'})}),"\n",(0,s.jsx)(n.h2,{id:"issues-with-swagger-typescript-api--ts-to-zod",children:"Issues with swagger-typescript-api + ts-to-zod"}),"\n",(0,s.jsxs)(n.p,{children:["Unlike other Typescript type generators, ",(0,s.jsx)(n.code,{children:"swagger-typescript-api"})," retains\ninformation on constraints (minimum, maximum, maxLength, pattern, etc.) in JSDoc\ncomments associated with type definitions. This allows for the reconstruction of\nruntime schemas, for example, using tools like ",(0,s.jsx)(n.code,{children:"ts-to-zod"}),". However:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The generated runtime schemas are separate from the client code, so the\n\u201cplumbing\u201d to connect the runtime validation (ts-to-zod) to the generated\ntypes (",(0,s.jsx)(n.code,{children:"swagger-typescript-api"}),") must be implemented manually."]}),"\n",(0,s.jsxs)(n.li,{children:["Types are not always accurate due to discrepancies between the annotations\ngenerated by swagger-typescript-api and those expected by ts-to-zod (e.g.,\n",(0,s.jsx)(n.code,{children:"@min"})," vs ",(0,s.jsx)(n.code,{children:"@minimum"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Some inaccuracies in type generation produce invalid Typescript code."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Nevertheless, the zod schemas are more faithful than those generated by\nopenapi-zod-client."}),"\n",(0,s.jsx)(n.h3,{id:"example-of-accurate-type-generation",children:"Example of Accurate Type Generation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const messageSubjectSchema = z.string().min(10).max(120);\nexport const messageBodyMarkdownSchema = z.string().min(80).max(10000);\nexport const messageContentSchema = z.object({\n  subject: messageSubjectSchema.optional(),\n  markdown: messageBodyMarkdownSchema,\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["As of Jun 2024, no OpenAPI generator fully meets our guiding principles. While\n",(0,s.jsx)(n.code,{children:"openapi-zod-client"})," seems to cover most of the desired features, it still\nappears to be an immature project, not always accurate in type generation."]}),"\n",(0,s.jsx)(n.p,{children:"It is appropriate to invest in the development of a Typescript code generator\nfrom OpenAPI that performs correct and complete runtime checks."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);