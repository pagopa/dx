"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8129],{466:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"infrastructure/using-terraform-registry-modules","title":"Using DX Terraform Modules","description":"The Terraform Registry serves as a central repository for discovering, sharing,","source":"@site/docs/infrastructure/using-terraform-registry-modules.md","sourceDirName":"infrastructure","slug":"/infrastructure/using-terraform-registry-modules","permalink":"/dx/docs/infrastructure/using-terraform-registry-modules","draft":false,"unlisted":false,"editUrl":"https://github.com/pagopa/dx/tree/main/website/docs/infrastructure/using-terraform-registry-modules.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Using DX Terraform Modules","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Infrastructure","permalink":"/dx/docs/infrastructure/"},"next":{"title":"Using DX Azure Terraform Provider","permalink":"/dx/docs/infrastructure/using-terraform-registry-provider"}}');var s=i(3881),o=i(4718);const t={sidebar_label:"Using DX Terraform Modules",sidebar_position:2},l="Using DX Terraform Modules",a={},c=[{value:"Why Use the DX Registry?",id:"why-use-the-dx-registry",level:2},{value:"Semantic Versioning Benefits",id:"semantic-versioning-benefits",level:3},{value:"Enhanced Documentation Access",id:"enhanced-documentation-access",level:3},{value:"Security Implementation",id:"security-implementation",level:2},{value:"Setting Up Module Locking",id:"setting-up-module-locking",level:3},{value:"Pipeline Integration",id:"pipeline-integration",level:2},{value:"Migrating to Registry Modules",id:"migrating-to-registry-modules",level:2},{value:"Source Declaration Changes",id:"source-declaration-changes",level:3},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"Missing sha256sum dependency",id:"missing-sha256sum-dependency",level:3},{value:"Pipeline Failures",id:"pipeline-failures",level:3},{value:"Disabling automatic Pre-Commits",id:"disabling-automatic-pre-commits",level:3},{value:"Lock File Generation Issues",id:"lock-file-generation-issues",level:3},{value:"Getting Support",id:"getting-support",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-dx-terraform-modules",children:"Using DX Terraform Modules"})}),"\n",(0,s.jsxs)(n.p,{children:["The Terraform Registry serves as a central repository for discovering, sharing,\nand managing infrastructure modules. PagoPA maintains its own collection of\nmodules in our dedicated namespace at\n",(0,s.jsx)(n.a,{href:"https://registry.terraform.io/namespaces/pagopa-dx",children:"registry.terraform.io/namespaces/pagopa-dx"}),",\nmaking it easier for teams to share and reuse infrastructure components."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This documentation is relevant for all individual contributors making use of\nDevEx terraform modules."})}),"\n",(0,s.jsx)(n.h2,{id:"why-use-the-dx-registry",children:"Why Use the DX Registry?"}),"\n",(0,s.jsx)(n.p,{children:"We've enhanced our DX pipelines (plan and apply) to support direct module\nreferences from the Terraform Registry. This approach offers several significant\nadvantages over traditional GitHub source references."}),"\n",(0,s.jsx)(n.h3,{id:"semantic-versioning-benefits",children:"Semantic Versioning Benefits"}),"\n",(0,s.jsx)(n.p,{children:"When you use Registry modules, you gain the power of semantic versioning, which\nprovides a clear contract for module updates. This versioning system helps you:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Confidently upgrade modules within the same minor version, knowing that\nbreaking changes won't occur"}),"\n",(0,s.jsx)(n.li,{children:"Easily identify when major changes require careful migration planning"}),"\n",(0,s.jsx)(n.li,{children:"Reduce the time spent on refactoring during module updates"}),"\n",(0,s.jsx)(n.li,{children:"Track dependencies more effectively across your infrastructure code"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"enhanced-documentation-access",children:"Enhanced Documentation Access"}),"\n",(0,s.jsx)(n.p,{children:"The Registry provides a professional, centralized interface where you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Browse comprehensive module documentation"}),"\n",(0,s.jsx)(n.li,{children:"Review input and output variable specifications"}),"\n",(0,s.jsx)(n.li,{children:"Find usage examples and requirements"}),"\n",(0,s.jsx)(n.li,{children:"Access version histories and change logs"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This centralization eliminates the need to navigate multiple GitHub repositories\nor documentation sources, making it faster and easier to implement modules\ncorrectly."}),"\n",(0,s.jsx)(n.h2,{id:"security-implementation",children:"Security Implementation"}),"\n",(0,s.jsx)(n.p,{children:"To maintain our security standards while leveraging Registry modules, we've\nimplemented an automated pre-commit system that generates lock files for all\nTerraform configurations. This system works similarly to provider locks,\nensuring that your infrastructure deployments remain consistent and secure."}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-module-locking",children:"Setting Up Module Locking"}),"\n",(0,s.jsx)(n.p,{children:"Follow these steps to implement module locking in your repository:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["First, create or update the ",(0,s.jsx)(n.code,{children:".pre-commit-config.yaml"})," file in your\nrepository's root directory:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"repos:\n  - repo: https://github.com/pagopa/dx\n    rev: pre_commit_scripts@0.0.1\n    hooks:\n      - id: lock_modules\n        exclude: ^.*/(_modules|modules|\\.terraform)(/.*)?$\n        # Configure the paths to your Terraform configurations\n        files: src/(common|core|github_runner|identity|migration|repository)\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Customize the ",(0,s.jsx)(n.code,{children:"files"})," parameter to match your repository's structure. This\nparameter should list all directories containing Terraform configurations.\nFor example, if your configurations are in ",(0,s.jsx)(n.code,{children:"src/prod"})," and ",(0,s.jsx)(n.code,{children:"src/dev"}),", you\nwould use:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"files: src/(prod|dev)\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Generate the initial set of module lock files. You have two options:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Option 1"}),": Run the pre-commit hook manually"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pre-commit run -a\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Option 2"}),": Install the pre-commit hook for automatic execution"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pre-commit install\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"After generating the lock files, commit them to your repository. These files\nare essential for pipeline operation."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The second option enables automatic execution of pre-commit checks on every\npush. If this disrupts your workflow, you can disable it by following\n",(0,s.jsx)(n.a,{href:"#disabling-automatic-pre-commits",children:"these instructions"})," and opt for the first\noption instead."]})}),"\n",(0,s.jsx)(n.h2,{id:"pipeline-integration",children:"Pipeline Integration"}),"\n",(0,s.jsx)(n.p,{children:"The DX pipelines now include verification steps that check module lock files\nbefore executing any plan or apply operations. Here's what you need to know:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Every Terraform configuration must have corresponding lock files"}),"\n",(0,s.jsx)(n.li,{children:"Lock files must be up to date with your module versions"}),"\n",(0,s.jsx)(n.li,{children:"Pipelines will fail if lock files are missing or inconsistent"}),"\n",(0,s.jsx)(n.li,{children:"Lock files must be regenerated when updating module versions"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migrating-to-registry-modules",children:"Migrating to Registry Modules"}),"\n",(0,s.jsx)(n.p,{children:"When transitioning from GitHub-sourced modules to Terraform Registry modules,\nyou'll need to update your module source declarations."}),"\n",(0,s.jsx)(n.h3,{id:"source-declaration-changes",children:"Source Declaration Changes"}),"\n",(0,s.jsx)(n.p,{children:"Here's a before and after example:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (GitHub source):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",children:'module "roles" {\n  source       = "github.com/pagopa/dx//infra/modules/azure_role_assignments?ref=main"\n  principal_id = var.data_factory_principal_id\n\n  cosmos = [\n    {\n      account_name        = var.cosmos_accounts.source.name\n      resource_group_name = var.cosmos_accounts.source.resource_group_name\n      role                = "reader"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (Registry source):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",children:'module "roles" {\n  source  = "pagopa-dx/azure-role-assignments/azurerm"\n  version = "~> 0.0"\n\n  principal_id = var.data_factory_principal_id\n\n  cosmos = [\n    {\n      account_name        = var.cosmos_accounts.source.name\n      resource_group_name = var.cosmos_accounts.source.resource_group_name\n      role                = "reader"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's break down the key changes:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Source Format"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Old: ",(0,s.jsx)(n.code,{children:"github.com/pagopa/dx//infra/modules/azure_role_assignments?ref=main"})]}),"\n",(0,s.jsxs)(n.li,{children:["New: ",(0,s.jsx)(n.code,{children:"pagopa-dx/azure-role-assignments/azurerm"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The Registry format follows the pattern: ",(0,s.jsx)(n.code,{children:"<NAMESPACE>/<NAME>/<PROVIDER>"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version Specification"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Old: Using git ref (",(0,s.jsx)(n.code,{children:"?ref=main"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["New: Using semantic versioning (",(0,s.jsx)(n.code,{children:'version = "~> 0.0"'}),")"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"~>"})," operator allows updates within the same major version, providing\nstability while allowing minor updates."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,s.jsx)(n.h3,{id:"missing-sha256sum-dependency",children:"Missing sha256sum dependency"}),"\n",(0,s.jsx)(n.p,{children:"If you encounter the following error while running the pre-commit hook:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ERROR: Required command not found: sha256sum"})}),"\n",(0,s.jsx)(n.p,{children:"It means your system is missing the sha256sum dependency. You can resolve this\nby installing it using:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"brew install coreutils"})}),"\n",(0,s.jsx)(n.h3,{id:"pipeline-failures",children:"Pipeline Failures"}),"\n",(0,s.jsx)(n.p,{children:"If your pipeline fails with a module lock error:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensure all Terraform configuration directories are correctly listed in\n",(0,s.jsx)(n.code,{children:".pre-commit-config.yaml"})]}),"\n",(0,s.jsxs)(n.li,{children:["Run ",(0,s.jsx)(n.code,{children:"pre-commit run -a"})," to generate missing lock files"]}),"\n",(0,s.jsx)(n.li,{children:"Commit and push the new lock files"}),"\n",(0,s.jsx)(n.li,{children:"Retry the pipeline"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"disabling-automatic-pre-commits",children:"Disabling automatic Pre-Commits"}),"\n",(0,s.jsx)(n.p,{children:"If you need to temporarily disable pre-commit hooks, you can do so by running:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"pre-commit uninstall"})}),"\n",(0,s.jsx)(n.p,{children:"This will remove the installed pre-commit hooks from your repository. You can\nreinstall them later using:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"pre-commit install"})}),"\n",(0,s.jsx)(n.h3,{id:"lock-file-generation-issues",children:"Lock File Generation Issues"}),"\n",(0,s.jsx)(n.p,{children:"If you encounter problems generating lock files:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Verify that your module source references are correct"}),"\n",(0,s.jsx)(n.li,{children:"Ensure your pre-commit hook is properly configured"}),"\n",(0,s.jsx)(n.li,{children:"Clear your local Terraform cache if needed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-support",children:"Getting Support"}),"\n",(0,s.jsx)(n.p,{children:"The DevEx team is here to help you successfully implement and use Registry\nmodules. If you encounter any challenges:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Join the ",(0,s.jsx)(n.code,{children:"#team_devex_help"})," channel for direct support"]}),"\n",(0,s.jsx)(n.li,{children:"Provide specific error messages or pipeline logs when seeking help"}),"\n",(0,s.jsx)(n.li,{children:"Share your repository structure and Terraform configuration paths"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Remember, these changes are designed to enhance our infrastructure management\nwhile maintaining security. Don't hesitate to reach out for assistance as you\nimplement these new requirements."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4718:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(3309);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);