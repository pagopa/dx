module.dev.data.github_organization_teams.all: Reading...
data.azuread_group.admins_dev: Reading...
data.azuread_group.developers_dev: Reading...
data.azuread_group.externals_dev: Reading...
data.azuread_group.admins_dev: Read complete after 1s [id=c24cd097-4bff-4ab2-9b53-62b249d722c5]
data.azuread_group.externals_dev: Read complete after 1s [id=40bbc0a5-547d-40f8-83df-81409a871b02]
data.azuread_group.developers_dev: Read complete after 1s [id=32544b2f-b97d-4453-9555-1ad71630512c]
module.dev.data.github_organization_teams.all: Read complete after 2s [id=MDEyOk9yZ2FuaXphdGlvbjU3NzQyMzY3]
data.azurerm_resource_group.common_dev: Reading...
data.azurerm_container_app_environment.runner_dev: Reading...
data.azurerm_resource_group.dashboards_dev: Reading...
data.azurerm_subscription.current_dev: Reading...
data.azurerm_virtual_network.common_dev: Reading...
data.azurerm_client_config.current_dev: Reading...
data.azurerm_client_config.current_dev: Read complete after 0s [id=Y2xpZW50Q29uZmlncy9jbGllbnRJZD0wNGIwNzc5NS04ZGRiLTQ2MWEtYmJlZS0wMmY5ZTFiZjdiNDY7b2JqZWN0SWQ9YjdlNDc0ZWEtZGJlNS00NGEyLTkyMmQtOWQxYzIxMmNhZGE2O3N1YnNjcmlwdGlvbklkPWQ3ZGU4M2UwLTA1NzEtNDBhZC1iNjNhLTY0Yzk0MjM4NWVhZTt0ZW5hbnRJZD03Nzg4ZWRhZi0wMzQ2LTQwNjgtOWQ3OS1jODY4YWVkMTViM2Q=]
data.azurerm_resource_group.dashboards_dev: Read complete after 0s [id=/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dashboards]
data.azurerm_resource_group.common_dev: Read complete after 0s [id=/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-common-rg-01]
data.azurerm_virtual_network.common_dev: Read complete after 0s [id=/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-network-rg-01/providers/Microsoft.Network/virtualNetworks/dx-d-itn-common-vnet-01]
data.azurerm_subscription.current_dev: Read complete after 0s [id=/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae]
data.azurerm_container_app_environment.runner_dev: Read complete after 1s [id=/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-github-runner-rg-01/providers/Microsoft.App/managedEnvironments/dx-d-itn-github-runner-cae-01]
module.dev.module.github_runner.data.azurerm_key_vault.kv: Reading...
module.dev.module.github_runner.data.azurerm_key_vault.kv: Read complete after 0s [id=/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-common-rg-01/providers/Microsoft.KeyVault/vaults/dx-d-itn-common-kv-01]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.dev.azurerm_federated_identity_credential.github_app_cd will be created
  + resource "azurerm_federated_identity_credential" "github_app_cd" {
      + audience            = [
          + "api://AzureADTokenExchange",
        ]
      + id                  = (known after apply)
      + issuer              = "https://token.actions.githubusercontent.com"
      + name                = "dx-test-monorepo-starter-pack-environment-app-dev-cd"
      + parent_id           = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + subject             = "repo:pagopa/dx-test-monorepo-starter-pack:environment:app-dev-cd"
    }

  # module.dev.azurerm_federated_identity_credential.github_infra_cd will be created
  + resource "azurerm_federated_identity_credential" "github_infra_cd" {
      + audience            = [
          + "api://AzureADTokenExchange",
        ]
      + id                  = (known after apply)
      + issuer              = "https://token.actions.githubusercontent.com"
      + name                = "dx-test-monorepo-starter-pack-environment-infra-dev-cd"
      + parent_id           = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + subject             = "repo:pagopa/dx-test-monorepo-starter-pack:environment:infra-dev-cd"
    }

  # module.dev.azurerm_federated_identity_credential.github_infra_ci will be created
  + resource "azurerm_federated_identity_credential" "github_infra_ci" {
      + audience            = [
          + "api://AzureADTokenExchange",
        ]
      + id                  = (known after apply)
      + issuer              = "https://token.actions.githubusercontent.com"
      + name                = "dx-test-monorepo-starter-pack-environment-infra-dev-ci"
      + parent_id           = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + subject             = "repo:pagopa/dx-test-monorepo-starter-pack:environment:infra-dev-ci"
    }

  # module.dev.azurerm_federated_identity_credential.github_opex_cd will be created
  + resource "azurerm_federated_identity_credential" "github_opex_cd" {
      + audience            = [
          + "api://AzureADTokenExchange",
        ]
      + id                  = (known after apply)
      + issuer              = "https://token.actions.githubusercontent.com"
      + name                = "dx-test-monorepo-starter-pack-environment-opex-dev-cd"
      + parent_id           = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + subject             = "repo:pagopa/dx-test-monorepo-starter-pack:environment:opex-dev-cd"
    }

  # module.dev.azurerm_federated_identity_credential.github_opex_ci will be created
  + resource "azurerm_federated_identity_credential" "github_opex_ci" {
      + audience            = [
          + "api://AzureADTokenExchange",
        ]
      + id                  = (known after apply)
      + issuer              = "https://token.actions.githubusercontent.com"
      + name                = "dx-test-monorepo-starter-pack-environment-opex-dev-ci"
      + parent_id           = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + subject             = "repo:pagopa/dx-test-monorepo-starter-pack:environment:opex-dev-ci"
    }

  # module.dev.azurerm_resource_group.main will be created
  + resource "azurerm_resource_group" "main" {
      + id       = (known after apply)
      + location = "italynorth"
      + name     = "dx-d-itn-test-rg-02"
      + tags     = {
          + "CostCenter"     = "TS000 - Tecnologia e Servizi"
          + "CreatedBy"      = "Terraform"
          + "Environment"    = "Dev"
          + "ManagementTeam" = "Developer Experience"
          + "Owner"          = "DevEx"
          + "Source"         = "https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap/examples/multi-environment"
          + "Test"           = "true"
          + "TestName"       = "Create Azure Github environment bootstrap for test"
        }
    }

  # module.dev.azurerm_role_assignment.admins_group_rgs["main"] will be created
  + resource "azurerm_role_assignment" "admins_group_rgs" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "c24cd097-4bff-4ab2-9b53-62b249d722c5"
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Owner"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.admins_group_rgs_kv_admin["main"] will be created
  + resource "azurerm_role_assignment" "admins_group_rgs_kv_admin" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "c24cd097-4bff-4ab2-9b53-62b249d722c5"
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Administrator"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.admins_group_rgs_kv_data["main"] will be created
  + resource "azurerm_role_assignment" "admins_group_rgs_kv_data" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "c24cd097-4bff-4ab2-9b53-62b249d722c5"
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Data Access Administrator"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.app_cd_rgs_contributor["main"] will be created
  + resource "azurerm_role_assignment" "app_cd_rgs_contributor" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.app_cd_subscription_reader will be created
  + resource "azurerm_role_assignment" "app_cd_subscription_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack App CD identity to read resources at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.app_cd_tf_rg_blob_contributor will be created
  + resource "azurerm_role_assignment" "app_cd_tf_rg_blob_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack App CD identity to apply changes to the Terraform state file Storage Account scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Blob Data Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/terraform-state-rg/providers/Microsoft.Storage/storageAccounts/tfdevdx"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.devs_group_rgs["main"] will be created
  + resource "azurerm_role_assignment" "devs_group_rgs" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "32544b2f-b97d-4453-9555-1ad71630512c"
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.devs_group_tf_rgs_kv_secr["main"] will be created
  + resource "azurerm_role_assignment" "devs_group_tf_rgs_kv_secr" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "32544b2f-b97d-4453-9555-1ad71630512c"
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Secrets Officer"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.externals_group_rgs["main"] will be created
  + resource "azurerm_role_assignment" "externals_group_rgs" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "40bbc0a5-547d-40f8-83df-81409a871b02"
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rg_network_contributor will be created
  + resource "azurerm_role_assignment" "infra_cd_rg_network_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to associate Private DNS Zones and Private Endpoints at resource group level"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Network Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-common-rg-01"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rg_private_dns_zone_contributor will be created
  + resource "azurerm_role_assignment" "infra_cd_rg_private_dns_zone_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to manage Private DNS Zones at resource group level"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Private DNS Zone Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-common-rg-01"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rgs_ca_contributor["main"] will be created
  + resource "azurerm_role_assignment" "infra_cd_rgs_ca_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to write Container App configuration at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Container Apps Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rgs_contributor["main"] will be created
  + resource "azurerm_role_assignment" "infra_cd_rgs_contributor" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rgs_kv_cert["main"] will be created
  + resource "azurerm_role_assignment" "infra_cd_rgs_kv_cert" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to change KeyVault's certificates at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Certificates Officer"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rgs_kv_crypto["main"] will be created
  + resource "azurerm_role_assignment" "infra_cd_rgs_kv_crypto" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to change KeyVault's keys at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Crypto Officer"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rgs_kv_secr["main"] will be created
  + resource "azurerm_role_assignment" "infra_cd_rgs_kv_secr" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to changes to KeyVault's secrets at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Secrets Officer"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rgs_st_blob_contributor["main"] will be created
  + resource "azurerm_role_assignment" "infra_cd_rgs_st_blob_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to write Storage Account blobs monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Blob Data Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_rgs_user_access_admin["main"] will be created
  + resource "azurerm_role_assignment" "infra_cd_rgs_user_access_admin" {
      + condition_version                = (known after apply)
      + description                      = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "User Access Administrator"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_st_tf_blob_contributor will be created
  + resource "azurerm_role_assignment" "infra_cd_st_tf_blob_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to apply changes to the Terraform state file Storage Account scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Blob Data Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/terraform-state-rg/providers/Microsoft.Storage/storageAccounts/tfdevdx"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_subscription_rbac_admin will be created
  + resource "azurerm_role_assignment" "infra_cd_subscription_rbac_admin" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to manage IAM roles at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Role Based Access Control Administrator"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_subscription_reader will be created
  + resource "azurerm_role_assignment" "infra_cd_subscription_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to read resources at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_cd_vnet_network_contributor will be created
  + resource "azurerm_role_assignment" "infra_cd_vnet_network_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to manage Private Endpoints at VNet scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Network Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-network-rg-01/providers/Microsoft.Network/virtualNetworks/dx-d-itn-common-vnet-01"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_ca_operator["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_ca_operator" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read Container App configuration at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Container Apps Operator"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_cosmos_contributor["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_cosmos_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read Cosmos DB configuration at resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "DocumentDB Account Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_kv_cert["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_kv_cert" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read KeyVault's certificates at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Certificate User"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_kv_crypto["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_kv_crypto" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read KeyVault's keys at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Crypto User"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_kv_secr["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_kv_secr" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read KeyVault's secrets at monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Key Vault Secrets User"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_st_blob_reader["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_st_blob_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read Storage Account blobs monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Blob Data Reader"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_st_queue_contributor["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_st_queue_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to write Storage Account queues monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Queue Data Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_st_queue_reader["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_st_queue_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read Storage Account queues monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Queue Data Reader"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_st_table_contributor["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_st_table_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CD identity to write Storage Account tables monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Table Data Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_rgs_st_table_reader["main"] will be created
  + resource "azurerm_role_assignment" "infra_ci_rgs_st_table_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read Storage Account tables monorepository resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Table Data Reader"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_subscription_data_access will be created
  + resource "azurerm_role_assignment" "infra_ci_subscription_data_access" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read resources' keys and data at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader and Data Access"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_subscription_pagopa_iac_reader will be created
  + resource "azurerm_role_assignment" "infra_ci_subscription_pagopa_iac_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read resources configuration at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "PagoPA IaC Reader"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_subscription_reader will be created
  + resource "azurerm_role_assignment" "infra_ci_subscription_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to read resources at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.infra_ci_tf_st_blob_contributor will be created
  + resource "azurerm_role_assignment" "infra_ci_tf_st_blob_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Infra CI identity to apply changes to the Terraform state file Storage Account scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Blob Data Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/terraform-state-rg/providers/Microsoft.Storage/storageAccounts/tfdevdx"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_cd_rg_monitoring_contributor will be created
  + resource "azurerm_role_assignment" "opex_cd_rg_monitoring_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CD identity to query logs for Opex dashboards at shared resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Monitoring Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dashboards"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_cd_rg_opex_contributor will be created
  + resource "azurerm_role_assignment" "opex_cd_rg_opex_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CD identity to apply changes to Opex dashboards at shared resource group scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "PagoPA Opex Dashboards Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dashboards"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_cd_subscription_reader will be created
  + resource "azurerm_role_assignment" "opex_cd_subscription_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CD identity to read resources at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_cd_tf_rg_blob_contributor will be created
  + resource "azurerm_role_assignment" "opex_cd_tf_rg_blob_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CD identity to apply changes to the Terraform state file Storage Account scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Blob Data Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/terraform-state-rg/providers/Microsoft.Storage/storageAccounts/tfdevdx"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_cd_tf_rg_blob_data_access will be created
  + resource "azurerm_role_assignment" "opex_cd_tf_rg_blob_data_access" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CD identity to read resources' keys at the Terraform state file Storage Account scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader and Data Access"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/terraform-state-rg/providers/Microsoft.Storage/storageAccounts/tfdevdx"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_ci_subscription_data_access will be created
  + resource "azurerm_role_assignment" "opex_ci_subscription_data_access" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CI identity to read resources' keys and data at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader and Data Access"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_ci_subscription_reader will be created
  + resource "azurerm_role_assignment" "opex_ci_subscription_reader" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CI identity to read resources at subscription scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Reader"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_role_assignment.opex_ci_tf_rg_blob_contributor will be created
  + resource "azurerm_role_assignment" "opex_ci_tf_rg_blob_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Allow dx-test-monorepo-starter-pack Opex CI identity to apply changes to the Terraform state file Storage Account scope"
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Storage Blob Data Contributor"
      + scope                            = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/terraform-state-rg/providers/Microsoft.Storage/storageAccounts/tfdevdx"
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.dev.azurerm_user_assigned_identity.app_cd will be created
  + resource "azurerm_user_assigned_identity" "app_cd" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "italynorth"
      + name                = "dx-d-itn-test-app-github-cd-id-02"
      + principal_id        = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + tags                = {
          + "CostCenter"     = "TS000 - Tecnologia e Servizi"
          + "CreatedBy"      = "Terraform"
          + "Environment"    = "Dev"
          + "ManagementTeam" = "Developer Experience"
          + "Owner"          = "DevEx"
          + "Source"         = "https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap/examples/multi-environment"
          + "Test"           = "true"
          + "TestName"       = "Create Azure Github environment bootstrap for test"
        }
      + tenant_id           = (known after apply)
    }

  # module.dev.azurerm_user_assigned_identity.infra_cd will be created
  + resource "azurerm_user_assigned_identity" "infra_cd" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "italynorth"
      + name                = "dx-d-itn-test-infra-github-cd-id-02"
      + principal_id        = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + tags                = {
          + "CostCenter"     = "TS000 - Tecnologia e Servizi"
          + "CreatedBy"      = "Terraform"
          + "Environment"    = "Dev"
          + "ManagementTeam" = "Developer Experience"
          + "Owner"          = "DevEx"
          + "Source"         = "https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap/examples/multi-environment"
          + "Test"           = "true"
          + "TestName"       = "Create Azure Github environment bootstrap for test"
        }
      + tenant_id           = (known after apply)
    }

  # module.dev.azurerm_user_assigned_identity.infra_ci will be created
  + resource "azurerm_user_assigned_identity" "infra_ci" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "italynorth"
      + name                = "dx-d-itn-test-infra-github-ci-id-02"
      + principal_id        = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + tags                = {
          + "CostCenter"     = "TS000 - Tecnologia e Servizi"
          + "CreatedBy"      = "Terraform"
          + "Environment"    = "Dev"
          + "ManagementTeam" = "Developer Experience"
          + "Owner"          = "DevEx"
          + "Source"         = "https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap/examples/multi-environment"
          + "Test"           = "true"
          + "TestName"       = "Create Azure Github environment bootstrap for test"
        }
      + tenant_id           = (known after apply)
    }

  # module.dev.azurerm_user_assigned_identity.opex_cd will be created
  + resource "azurerm_user_assigned_identity" "opex_cd" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "italynorth"
      + name                = "dx-d-itn-test-opex-github-cd-id-02"
      + principal_id        = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + tags                = {
          + "CostCenter"     = "TS000 - Tecnologia e Servizi"
          + "CreatedBy"      = "Terraform"
          + "Environment"    = "Dev"
          + "ManagementTeam" = "Developer Experience"
          + "Owner"          = "DevEx"
          + "Source"         = "https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap/examples/multi-environment"
          + "Test"           = "true"
          + "TestName"       = "Create Azure Github environment bootstrap for test"
        }
      + tenant_id           = (known after apply)
    }

  # module.dev.azurerm_user_assigned_identity.opex_ci will be created
  + resource "azurerm_user_assigned_identity" "opex_ci" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "italynorth"
      + name                = "dx-d-itn-test-opex-github-ci-id-02"
      + principal_id        = (known after apply)
      + resource_group_name = "dx-d-itn-test-rg-02"
      + tags                = {
          + "CostCenter"     = "TS000 - Tecnologia e Servizi"
          + "CreatedBy"      = "Terraform"
          + "Environment"    = "Dev"
          + "ManagementTeam" = "Developer Experience"
          + "Owner"          = "DevEx"
          + "Source"         = "https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap/examples/multi-environment"
          + "Test"           = "true"
          + "TestName"       = "Create Azure Github environment bootstrap for test"
        }
      + tenant_id           = (known after apply)
    }

  # module.dev.github_actions_environment_secret.app_prod_cd["ARM_CLIENT_ID"] will be created
  + resource "github_actions_environment_secret" "app_prod_cd" {
      + created_at      = (known after apply)
      + environment     = "app-prod-cd"
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "dx-test-monorepo-starter-pack"
      + secret_name     = "ARM_CLIENT_ID"
      + updated_at      = (known after apply)
    }

  # module.dev.github_actions_environment_secret.infra_prod_cd["ARM_CLIENT_ID"] will be created
  + resource "github_actions_environment_secret" "infra_prod_cd" {
      + created_at      = (known after apply)
      + environment     = "infra-prod-cd"
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "dx-test-monorepo-starter-pack"
      + secret_name     = "ARM_CLIENT_ID"
      + updated_at      = (known after apply)
    }

  # module.dev.github_actions_environment_secret.infra_prod_ci["ARM_CLIENT_ID"] will be created
  + resource "github_actions_environment_secret" "infra_prod_ci" {
      + created_at      = (known after apply)
      + environment     = "infra-prod-ci"
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "dx-test-monorepo-starter-pack"
      + secret_name     = "ARM_CLIENT_ID"
      + updated_at      = (known after apply)
    }

  # module.dev.github_actions_environment_secret.opex_prod_cd["ARM_CLIENT_ID"] will be created
  + resource "github_actions_environment_secret" "opex_prod_cd" {
      + created_at      = (known after apply)
      + environment     = "opex-prod-cd"
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "dx-test-monorepo-starter-pack"
      + secret_name     = "ARM_CLIENT_ID"
      + updated_at      = (known after apply)
    }

  # module.dev.github_actions_environment_secret.opex_prod_ci["ARM_CLIENT_ID"] will be created
  + resource "github_actions_environment_secret" "opex_prod_ci" {
      + created_at      = (known after apply)
      + environment     = "opex-prod-ci"
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "dx-test-monorepo-starter-pack"
      + secret_name     = "ARM_CLIENT_ID"
      + updated_at      = (known after apply)
    }

  # module.dev.github_actions_secret.repo_secrets["ARM_SUBSCRIPTION_ID"] will be created
  + resource "github_actions_secret" "repo_secrets" {
      + created_at      = (known after apply)
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "dx-test-monorepo-starter-pack"
      + secret_name     = "ARM_SUBSCRIPTION_ID"
      + updated_at      = (known after apply)
    }

  # module.dev.github_actions_secret.repo_secrets["ARM_TENANT_ID"] will be created
  + resource "github_actions_secret" "repo_secrets" {
      + created_at      = (known after apply)
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "dx-test-monorepo-starter-pack"
      + secret_name     = "ARM_TENANT_ID"
      + updated_at      = (known after apply)
    }

  # module.dev.github_repository_environment.app_prod_cd will be created
  + resource "github_repository_environment" "app_prod_cd" {
      + can_admins_bypass   = true
      + environment         = "app-prod-cd"
      + id                  = (known after apply)
      + prevent_self_review = false
      + repository          = "dx-test-monorepo-starter-pack"

      + deployment_branch_policy {
          + custom_branch_policies = true
          + protected_branches     = false
        }

      + reviewers {
          + teams = [
              + 9942893,
            ]
        }
    }

  # module.dev.github_repository_environment.infra_prod_cd will be created
  + resource "github_repository_environment" "infra_prod_cd" {
      + can_admins_bypass   = true
      + environment         = "infra-prod-cd"
      + id                  = (known after apply)
      + prevent_self_review = false
      + repository          = "dx-test-monorepo-starter-pack"

      + deployment_branch_policy {
          + custom_branch_policies = true
          + protected_branches     = false
        }

      + reviewers {
          + teams = [
              + 9942893,
            ]
        }
    }

  # module.dev.github_repository_environment.infra_prod_ci will be created
  + resource "github_repository_environment" "infra_prod_ci" {
      + can_admins_bypass   = true
      + environment         = "infra-prod-ci"
      + id                  = (known after apply)
      + prevent_self_review = false
      + repository          = "dx-test-monorepo-starter-pack"

      + deployment_branch_policy {
          + custom_branch_policies = true
          + protected_branches     = false
        }
    }

  # module.dev.github_repository_environment.opex_prod_cd will be created
  + resource "github_repository_environment" "opex_prod_cd" {
      + can_admins_bypass   = true
      + environment         = "opex-prod-cd"
      + id                  = (known after apply)
      + prevent_self_review = false
      + repository          = "dx-test-monorepo-starter-pack"

      + deployment_branch_policy {
          + custom_branch_policies = true
          + protected_branches     = false
        }

      + reviewers {
          + teams = [
              + 9942893,
            ]
        }
    }

  # module.dev.github_repository_environment.opex_prod_ci will be created
  + resource "github_repository_environment" "opex_prod_ci" {
      + can_admins_bypass   = true
      + environment         = "opex-prod-ci"
      + id                  = (known after apply)
      + prevent_self_review = false
      + repository          = "dx-test-monorepo-starter-pack"

      + deployment_branch_policy {
          + custom_branch_policies = true
          + protected_branches     = false
        }
    }

  # module.dev.github_repository_environment_deployment_policy.app_prod_cd_branch["main"] will be created
  + resource "github_repository_environment_deployment_policy" "app_prod_cd_branch" {
      + branch_pattern = "main"
      + environment    = "app-prod-cd"
      + id             = (known after apply)
      + repository     = "dx-test-monorepo-starter-pack"
    }

  # module.dev.github_repository_environment_deployment_policy.app_prod_cd_tag["release/"] will be created
  + resource "github_repository_environment_deployment_policy" "app_prod_cd_tag" {
      + environment = "app-prod-cd"
      + id          = (known after apply)
      + repository  = "dx-test-monorepo-starter-pack"
      + tag_pattern = "release/"
    }

  # module.dev.github_repository_environment_deployment_policy.infra_prod_cd_branch["main"] will be created
  + resource "github_repository_environment_deployment_policy" "infra_prod_cd_branch" {
      + branch_pattern = "main"
      + environment    = "infra-prod-cd"
      + id             = (known after apply)
      + repository     = "dx-test-monorepo-starter-pack"
    }

  # module.dev.github_repository_environment_deployment_policy.opex_prod_cd_branch["main"] will be created
  + resource "github_repository_environment_deployment_policy" "opex_prod_cd_branch" {
      + branch_pattern = "main"
      + environment    = "opex-prod-cd"
      + id             = (known after apply)
      + repository     = "dx-test-monorepo-starter-pack"
    }

  # module.dev.module.github_repository["repo"].github_branch_default.main will be created
  + resource "github_branch_default" "main" {
      + branch     = "main"
      + etag       = (known after apply)
      + id         = (known after apply)
      + rename     = false
      + repository = "dx-test-monorepo-starter-pack"
    }

  # module.dev.module.github_repository["repo"].github_branch_protection.main will be created
  + resource "github_branch_protection" "main" {
      + allows_deletions                = false
      + allows_force_pushes             = false
      + enforce_admins                  = true
      + id                              = (known after apply)
      + lock_branch                     = false
      + pattern                         = "main"
      + repository_id                   = "dx-test-monorepo-starter-pack"
      + require_conversation_resolution = true
      + require_signed_commits          = false
      + required_linear_history         = false

      + required_pull_request_reviews {
          + dismiss_stale_reviews           = false
          + require_code_owner_reviews      = true
          + require_last_push_approval      = false
          + required_approving_review_count = 1
          + restrict_dismissals             = true
        }

      + required_status_checks {
          + strict = false
        }
    }

  # module.dev.module.github_repository["repo"].github_repository.this will be created
  + resource "github_repository" "this" {
      + allow_auto_merge            = true
      + allow_merge_commit          = false
      + allow_rebase_merge          = false
      + allow_squash_merge          = true
      + allow_update_branch         = true
      + archive_on_destroy          = true
      + archived                    = false
      + default_branch              = (known after apply)
      + delete_branch_on_merge      = true
      + description                 = "Devex repository for shared tools and pipelines."
      + etag                        = (known after apply)
      + full_name                   = (known after apply)
      + git_clone_url               = (known after apply)
      + has_discussions             = false
      + has_downloads               = false
      + has_issues                  = false
      + has_projects                = false
      + has_wiki                    = false
      + html_url                    = (known after apply)
      + http_clone_url              = (known after apply)
      + id                          = (known after apply)
      + merge_commit_message        = "PR_TITLE"
      + merge_commit_title          = "MERGE_MESSAGE"
      + name                        = "dx-test-monorepo-starter-pack"
      + node_id                     = (known after apply)
      + primary_language            = (known after apply)
      + private                     = (known after apply)
      + repo_id                     = (known after apply)
      + squash_merge_commit_message = "PR_BODY"
      + squash_merge_commit_title   = "PR_TITLE"
      + ssh_clone_url               = (known after apply)
      + svn_url                     = (known after apply)
      + topics                      = [
          + "developer-experience",
        ]
      + visibility                  = "public"
      + vulnerability_alerts        = true
      + web_commit_signoff_required = false

      + security_and_analysis {
          + advanced_security {
              + status = "enabled"
            }
          + secret_scanning {
              + status = "enabled"
            }
          + secret_scanning_push_protection {
              + status = "enabled"
            }
        }
    }

  # module.dev.module.github_runner.azurerm_container_app_job.github_runner will be created
  + resource "azurerm_container_app_job" "github_runner" {
      + container_app_environment_id = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-github-runner-rg-01/providers/Microsoft.App/managedEnvironments/dx-d-itn-github-runner-cae-01"
      + event_stream_endpoint        = (known after apply)
      + id                           = (known after apply)
      + location                     = "italynorth"
      + name                         = "dx-d-itn-dx-test-monorepo-caj-02"
      + outbound_ip_addresses        = (known after apply)
      + replica_retry_limit          = 1
      + replica_timeout_in_seconds   = 1800
      + resource_group_name          = "dx-d-itn-test-rg-02"
      + tags                         = {
          + "CostCenter"     = "TS000 - Tecnologia e Servizi"
          + "CreatedBy"      = "Terraform"
          + "Environment"    = "Dev"
          + "ManagementTeam" = "Developer Experience"
          + "Owner"          = "DevEx"
          + "Source"         = "https://github.com/pagopa/dx/blob/main/infra/modules/azure_github_environment_bootstrap/examples/multi-environment"
          + "Test"           = "true"
          + "TestName"       = "Create Azure Github environment bootstrap for test"
        }

      + event_trigger_config {
          + parallelism              = 1
          + replica_completion_count = 1

          + scale {
              + max_executions              = 30
              + min_executions              = 0
              + polling_interval_in_seconds = 30

              + rules {
                  + custom_rule_type = "github-runner"
                  + metadata         = {
                      + "github-runner"             = "https://api.github.com"
                      + "owner"                     = "pagopa"
                      + "repos"                     = "dx-test-monorepo-starter-pack"
                      + "runnerScope"               = "repo"
                      + "targetWorkflowQueueLength" = "1"
                    }
                  + name             = "github-runner-rule"

                  + authentication {
                      + secret_name       = "github-runner-pat"
                      + trigger_parameter = "personalAccessToken"
                    }
                }
            }
        }

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }

      + secret {
          # At least one attribute in this block is (or was) sensitive,
          # so its contents will not be displayed.
        }

      + template {
          + container {
              + cpu               = 0.5
              + ephemeral_storage = (known after apply)
              + image             = "ghcr.io/pagopa/github-self-hosted-runner-azure:latest"
              + memory            = "1Gi"
              + name              = "github-runner"

              + env {
                  + name  = "REPO_URL"
                  + value = "https://github.com/pagopa/dx-test-monorepo-starter-pack"
                }
              + env {
                  + name  = "REGISTRATION_TOKEN_API_URL"
                  + value = "https://api.github.com/repos/pagopa/dx-test-monorepo-starter-pack/actions/runners/registration-token"
                }
              + env {
                  + name        = "GITHUB_PAT"
                  + secret_name = "github-runner-pat"
                }
            }
        }
    }

  # module.dev.module.github_runner.azurerm_key_vault_access_policy.keyvault_containerapp[0] will be created
  + resource "azurerm_key_vault_access_policy" "keyvault_containerapp" {
      + id                 = (known after apply)
      + key_vault_id       = "/subscriptions/d7de83e0-0571-40ad-b63a-64c942385eae/resourceGroups/dx-d-itn-common-rg-01/providers/Microsoft.KeyVault/vaults/dx-d-itn-common-kv-01"
      + object_id          = (known after apply)
      + secret_permissions = [
          + "Get",
        ]
      + tenant_id          = (known after apply)
    }

Plan: 76 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
