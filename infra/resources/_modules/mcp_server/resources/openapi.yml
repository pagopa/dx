openapi: "3.0.1"
info:
  title: "mcp-api-gateway"
  version: "0.0.1"
paths:
  /mcp:
    post:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - mcp-authorizer:
            - "profile"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: ${MCP_LAMBDA_URI}
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: >
            {
              "statusCode": 200
            }
        passthroughBehavior: "when_no_match"
        type: "mock"

  /.well-known/oauth-protected-resource/mcp:
    get:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WellKnownResourceServer"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: >
                {
                  "authorization_servers":["${API_DOMAIN_NAME}"],
                  "resource":"${API_DOMAIN_NAME}"
                }
        requestTemplates:
          application/json: '{"statusCode":200}'
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "mock"

    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: >
            {
              "statusCode": 200
            }
        passthroughBehavior: "when_no_match"
        type: "mock"
  /.well-known/oauth-authorization-server:
    get:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WellKnownOAuthServer"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: >
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: >
                {
                  "issuer": "${COGNITO_ISSUER}",
                  "authorization_endpoint": "${COGNITO_HOST}/oauth2/authorize",
                  "token_endpoint": "${COGNITO_HOST}/oauth2/token",
                  "response_types_supported": ["code"],
                  "grant_types_supported": ["authorization_code"],
                  "code_challenge_methods_supported": ["S256"],
                  "registration_endpoint": "${API_DOMAIN_NAME}/register"
                }
        passthroughBehavior: "when_no_match"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: >
            {
              "statusCode": 200
            }
        passthroughBehavior: "when_no_match"
        type: "mock"
  /register:
    post:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        type: "aws"
        credentials: ${API_GATEWAY_COGNITO_ROLE}
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${REGION}:cognito-idp:action/CreateUserPoolClient"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: >
                {
                  "client_id": $input.json('$.UserPoolClient.ClientId'),
                  "client_name": $input.json('$.UserPoolClient.ClientName'),
                  "redirect_uris": $input.json('$.UserPoolClient.CallbackURLs'),
                  "response_types": $input.json('$.UserPoolClient.AllowedOAuthFlows')
                }
        requestTemplates:
          application/json: >
            {
              "ClientName": $input.json('$.client_name'),
              "CallbackURLs": $input.json('$.redirect_uris'),
              "AllowedOAuthFlows": $input.json('$.response_types'),
              "AllowedOAuthFlowsUserPoolClient": true,
              "AllowedOAuthScopes": ["openid", "profile"],
              "SupportedIdentityProviders": ["COGNITO", "Google"],
              "UserPoolId": "${COGNITO_USER_POOL_ID}"
            }
        passthroughBehavior: "never"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: >
            {
              "statusCode": 200
            }
        passthroughBehavior: "when_no_match"
        type: "mock"

components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
    WellKnownResourceServer:
      title: "Resource Metadata"
      type: "object"
      properties:
        issuer:
          type: "string"
    WellKnownOAuthServer:
      title: "OAuth Server Metadata"
      type: "object"
      properties:
        issuer:
          type: "string"
        authorization_endpoint:
          type: "string"
        token_endpoint:
          type: "string"
  securitySchemes:
    mcp-authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        providerARNs:
          - ${COGNITO_USER_POOL_ARN}
        type: "cognito_user_pools"

x-amazon-apigateway-gateway-responses:
  MISSING_AUTHENTICATION_TOKEN:
    statusCode: 401
    responseParameters:
      gatewayresponse.header.WWW-Authenticate: "'${API_DOMAIN_NAME}/.well-known/protected-resource'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
  UNAUTHORIZED:
    statusCode: 401
    responseParameters:
      gatewayresponse.header.WWW-Authenticate: "'${API_DOMAIN_NAME}/.well-known/protected-resource'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
