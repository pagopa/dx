on:
  workflow_call:
    inputs:
      environment:
        description: Environment where the resources will be deployed.
        type: string
        required: true
      region:
        description: Azure region where the resources will be deployed.
        type: string
        required: true
      base_path:
        description: The base path on which the script will look for Terraform projects
        type: string
        required: true
      env_vars:
        description: List of environment variables to set up, given in env=value format.
        type: string
        required: false
      use_private_agent:
        description: Use a private agent to run the Terraform plan.
        type: boolean
        required: false
        default: false

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true

concurrency:
  group: ${{ github.workflow }}-cd
  cancel-in-progress: true

jobs:

  tf_plan:
    name: 'Terraform Plan'
    runs-on: ${{ inputs.use_private_agent == true && 'self-hosted' || 'ubuntu-20.04' }}
    environment: ${{ inputs.environment }}-ci
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    outputs:
      working_dir: ${{ steps.directory.outputs.dir }}
      terraform_version: ${{ steps.set-terraform-version.outputs.terraform_version }}

    steps:

      # Set the directory where the Terraform files are located
      # The directory the value is then available in ${{ steps.directory.outputs.dir }}
      - name: Set directory
        id: directory
        run: |
          set -e
          if [ -z "${{ inputs.environment }}" ] || [ -z "${{ inputs.region }}" ]; then
            echo "Both environment and region must be provided."
            exit 1
          else
            # The directory is expected to be in the format
            #  ${inputs.base_path}/${{ inputs.environment }}/${{ inputs.region }}
            # Example: infra/resources/prod/westeurope
            echo "dir=${{ inputs.base_path}}/${{ inputs.environment }}/${{ inputs.region }}" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Set Environment Variables
        if: ${{ inputs.env_vars }}
        run: |
          for i in "${{ inputs.env_vars }}"
          do
            printf "%s\n" "$i" >> $GITHUB_ENV
          done

      - name: Azure Login
        uses: azure/login@v2 # v2.0.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Set Terraform Version
        id: set-terraform-version
        run: |
          echo "terraform_version=$(cat .terraform-version)" >> $GITHUB_OUTPUT

      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        name: Setup Terraform
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform_version }}

      - name: Terraform Init
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform init

      - name: Terraform Plan
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform plan \
            -lock-timeout=3000s \
            -out=tfplan-${{ github.sha }} \
            -input=false

      - name: "Upload Terraform Plan as Artifact"
        uses: actions/upload-artifact@694cdabd8bdb0f10b2cea11669e1bf5453eed0a6 # v4.2.0
        with:
          name: tfplan
          path: ${{ steps.directory.outputs.dir }}/tfplan-${{ github.sha }}
          if-no-files-found: error
          retention-days: 7

  tf_apply:
    name: 'Terraform Apply'
    runs-on: ${{ inputs.use_private_agent == true && 'self-hosted' || 'ubuntu-20.04' }}
    needs: [tf_plan]
    environment: ${{ inputs.environment }}-cd
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Azure Login
        uses: azure/login@v2 # v2.0.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Download Terraform Plan as Artifact
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: tfplan
          path: ${{ needs.tf_plan.outputs.working_dir }}

      - name: Retrieve Terraform Modules from Cache
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        with:
          path: ${{ needs.tf_plan.outputs.working_dir }}/.terraform
          key: terraform-${{ needs.tf_plan.outputs.working_dir }}-${{ github.sha }}
          restore-keys: |
            terraform-${{ needs.tf_plan.outputs.working_dir }}

      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        name: Setup Terraform
        with:
          terraform_version: ${{ needs.tf_plan.outputs.terraform_version }}

      - name: Terraform Init
        working-directory: ${{ needs.tf_plan.outputs.working_dir }}
        run: |
          terraform init

      - name: Terraform Apply
        working-directory: ${{ needs.tf_plan.outputs.working_dir }}
        run: |
          terraform apply \
            -lock-timeout=3000s \
            -auto-approve \
            -input=false \
            tfplan-${{ github.sha }}
