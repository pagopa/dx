name: Drift Detection

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment where the resources will be deployed.
        type: string
        required: true
        default: prod
      base_path:
        description: The base path on which the script will look for Terraform projects
        type: string
        required: true
        default: infra/resources/
      use_private_agent:
        description: Use a private agent to run the Terraform plan.
        type: boolean
        required: false
        default: false
  schedule:
    - cron: '00 08 * * *' # Run at 08:00 every day


env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true
  BASE_DIR: ${{ inputs.base_path != '' && inputs.base_path || 'infra/resources/' }}
  AZURE_ENVIRONMENT: ${{ inputs.environment != '' && inputs.environment || 'prod' }}

jobs:
  terraform_driftdetection_job:
    name: Terraform Drift Detection
    runs-on: ${{ inputs.use_private_agent == true && 'self-hosted' || 'ubuntu-20.04' }}
    environment: ${{ inputs.environment != '' && inputs.environment || 'prod' }}-ci
    concurrency:
      group: ${{ github.workflow }}-ci
      cancel-in-progress: true
    permissions:
      id-token: write
      contents: read
      actions: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
    steps:
      # Set the directory where the Terraform files are located
      # The directory the value is then available in ${{ steps.directory.outputs.dir }}
      - name: Set directory
        id: directory
        env:
          ENVIRONMENT: ${{ env.AZURE_ENVIRONMENT }}
          BASE_PATH: ${{ env.BASE_DIR }}
        run: |
          set -euo pipefail

          if [ -z "$ENVIRONMENT" ]; then
            echo "Environment must be provided."
            exit 1
          else
            # The directory is expected to be in the format
            #  infra/resources/${{ inputs.environment }}
            # Example: infra/resources/prod
            printf "dir=%q/%q" "$BASE_PATH" "$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Azure Login
        uses: azure/login@v2 # v2.0.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Set Terraform Version
        id: set-terraform-version
        run: |
          set -eu
          terraform_version=$(cat .terraform-version)
          printf "terraform_version=$terraform_version" >> "$GITHUB_OUTPUT"

      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        name: Setup Terraform
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform_version }}
  
      - name: Terraform Init
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform init
          
      # Run Terraform Plan
      # The plan output is saved in a file and then processed to remove unnecessary lines
      # The step never fails but the result is checked in the next step
      # This is because we want to post the plan output in the PR even if the plan fails
      - name: Terraform Plan
        id: plan
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform plan -no-color -detailed-exitcode -out=plan.tfplan

          if [ $? -eq 1 ]; then
            echo "::error::Terraform plan exited with an error"
            echo "drift_found=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Drift Detection
        id: drift
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform show -no-color -json plan.tfplan > plan.json
          NO_CHANGES=$(jq '[.resource_changes[] | select(.change.actions | index("create") or index("update") or index("delete"))] | length' plan.json)

          if [ "$NO_CHANGES" -eq 0 ]; then
            echo "No drifts in this configuration"
            echo "drift_found=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Drift detected:"

            echo "drift_found=true" >> $GITHUB_OUTPUT

            # Count the number of resources to add, change and destroy
            TO_ADD=$(jq '[.resource_changes[] | select(.change.actions | index("create"))] | length' plan.json)
            TO_CHANGE=$(jq '[.resource_changes[] | select(.change.actions | index("update"))] | length' plan.json)
            TO_DESTROY=$(jq '[.resource_changes[] | select(.change.actions | index("delete"))] | length' plan.json)
          
            echo " - Resources to add: $TO_ADD"
            echo " - Resources to change: $TO_CHANGE"
            echo " - Resources to destroy: $TO_DESTROY"
          
            # Salva le variabili nell'ambiente per l'utilizzo nei passaggi successivi
            echo "TO_ADD=$TO_ADD" >> $GITHUB_ENV
            echo "TO_CHANGE=$TO_CHANGE" >> $GITHUB_ENV
            echo "TO_DESTROY=$TO_DESTROY" >> $GITHUB_ENV
          
            exit 1
          fi

      - name: Get workflow data
        id: workflow_data
        run: |
          workflow=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs/${{ github.run_id }})

          workflow_url=$(echo $workflow | jq -r '.html_url')
          workflow_name=$(echo $workflow | jq -r '.display_title')
          repo_url=$(echo $workflow | jq -r '.repository.html_url')
          repo_name=$(echo $workflow | jq -r '.repository.full_name')
          commit_sha=$(echo $workflow | jq -r '.head_sha')
          commit_message=$(echo $workflow | jq -r '.head_commit.message')
          committer_name=$(echo $workflow | jq -r '.head_commit.committer.name')

          echo "workflow_url=${workflow_url}"  >> $GITHUB_OUTPUT
          echo "workflow_name=${workflow_name}"  >> $GITHUB_OUTPUT
          echo "repo_url=${repo_url}"  >> $GITHUB_OUTPUT
          echo "repo_name=${repo_name}"  >> $GITHUB_OUTPUT
          echo "commit_sha=${commit_sha}"  >> $GITHUB_OUTPUT
          echo "commit_url=${repo_url}/commit/${commit_sha}"  >> $GITHUB_OUTPUT
          echo "commit_message=${commit_message}"  >> $GITHUB_OUTPUT
          echo "committer_name=${committer_name}"  >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      
      # Reference: https://github.com/slackapi/slack-github-action 
      - name: Drift Notification
        if: ${{ always() && env.SLACK_WEBHOOK_URL && steps.drift.outputs.drift_found == 'true' }}
        id: drift_notify
        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e #v1.26.0
        with:
          payload: |
            {
              "text":"${{ job.status }}",
              "blocks":[
                {
                    "type":"section",
                    "text":{
                      "type":"mrkdwn",
                      "text":":x: Drift detected! *${{ steps.workflow_data.outputs.workflow_name }}* action is ${{ job.status }}"
                    }
                },
                {
                    "type":"section",
                    "text":{
                      "type":"mrkdwn",
                      "text":"* ${{ steps.workflow_data.outputs.workflow_name }}* results:\n:shipit: *Owner*: ${{ steps.workflow_data.outputs.committer_name }}\n:diamond_shape_with_a_dot_inside: *Commit URL*: <${{ steps.workflow_data.outputs.commit_url }}|${{ steps.workflow_data.outputs.commit_sha }}>\n:envelope: *Commit message*: ${{ steps.workflow_data.outputs.commit_message }}\n:page_with_curl: *Terraform* plan results:\n:heavy_plus_sign: Resource to add: ${{ env.TO_ADD }}\n:wavy_dash: Resource to change: ${{ env.TO_CHANGE }}\n:heavy_minus_sign: Resource to destroy: ${{ env.TO_DESTROY }}\n *Linked Repo*: <${{ steps.workflow_data.outputs.repo_url }}|${{ steps.workflow_data.outputs.repo_name }}>\n"
                    }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: ${{ env.SLACK_WEBHOOK_TYPE }}

      - name: Failure Notification
        if: ${{ failure() && env.SLACK_WEBHOOK_URL }}
        id: failure_notify
        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e #v1.26.0
        with:
          payload: |
            {
              "text":"${{ job.status }}",
              "blocks":[
                {
                    "type":"section",
                    "text":{
                      "type":"mrkdwn",
                      "text":":x: Something went wrong! *${{ steps.workflow_data.outputs.workflow_name }}* action is ${{ job.status }}"
                    }
                },
                {
                    "type":"section",
                    "text":{
                      "type":"mrkdwn",
                      "text":"Check the Workflow:\n *URL*: ${{ steps.workflow_data.outputs.workflow_url }}\n *Linked Repo*: <${{ steps.workflow_data.outputs.repo_url }}|${{ steps.workflow_data.outputs.repo_name }}>\n"
                    }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: ${{ env.SLACK_WEBHOOK_TYPE }}