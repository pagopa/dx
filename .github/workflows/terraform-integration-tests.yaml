name: Weekly Terraform Integration Tests

on:
  schedule:
    # Run every Sunday at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      modules:
        description: 'Specific modules to test (comma-separated, leave empty for all)'
        required: false
        default: ''
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'integration,e2e'
        type: choice
        options:
          - 'integration'
          - 'e2e'
          - 'integration,e2e'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true
  TF_IN_AUTOMATION: true

jobs:
  detect-modules:
    runs-on: ubuntu-latest
    name: Detect Modules for Integration Testing
    permissions:
      contents: read
    outputs:
      modules: ${{ steps.get-modules.outputs.modules }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get modules to test
        id: get-modules
        run: |
          if [ -n "${{ github.event.inputs.modules }}" ]; then
            # Use manually specified modules
            modules_list="${{ github.event.inputs.modules }}"
            modules_json=$(echo "$modules_list" | tr ',' '\n' | jq -R . | jq -s .)
          else
            # Get all modules with integration/e2e tests
            modules_json=$(find infra/modules -name "integration.tftest.hcl" -o -name "e2e.tftest.hcl" | \
              xargs -I {} dirname {} | \
              sed 's|infra/modules/||' | \
              sort -u | \
              jq -R . | jq -s .)
          fi
          echo "modules=$modules_json" >> $GITHUB_OUTPUT

  terraform-integration-test:
    runs-on: ubuntu-latest
    needs: detect-modules
    if: needs.detect-modules.outputs.modules != '[]'
    environment: infra-dev-ci
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      max-parallel: 2  # Limit parallel jobs to avoid resource conflicts
      matrix:
        module: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main

      - name: Terraform Setup
        id: set-terraform-version
        uses: pagopa/dx/.github/actions/terraform-setup@main

      - name: Terraform Init
        working-directory: infra/modules/${{ matrix.module }}
        run: |
          set -euo

          terraform init -input=false

      - name: Run Integration Tests
        if: contains(github.event.inputs.test_type || 'integration,e2e', 'integration')
        working-directory: infra/modules/${{ matrix.module }}
        run: |
          set -euo

          if [ -f "tests/integration.tftest.hcl" ]; then
            echo "Running integration tests for ${{ matrix.module }}"
            terraform test -filter=integration.tftest.hcl
          else
            echo "No integration tests found for ${{ matrix.module }}"
          fi

      - name: Run End-to-End Tests
        if: contains(github.event.inputs.test_type || 'integration,e2e', 'e2e')
        working-directory: infra/modules/${{ matrix.module }}
        run: |
          set -euo

          if [ -f "tests/e2e.tftest.hcl" ]; then
            echo "Running end-to-end tests for ${{ matrix.module }}"
            terraform test -filter=e2e.tftest.hcl
          else
            echo "No end-to-end tests found for ${{ matrix.module }}"
          fi

      - name: Cleanup Test Resources
        if: always()
        working-directory: infra/modules/${{ matrix.module }}
        continue-on-error: true
        run: |
          set -euo

          # Clean up any remaining test resources
          # This helps prevent resource conflicts and reduces costs
          echo "Cleaning up test resources for ${{ matrix.module }}"
          
          # Get test resource groups (following naming pattern)
          test_rgs=$(az group list --query "[?starts_with(name, 'dx-d-itn-modules-')].name" -o tsv || true)
          
          if [ -n "$test_rgs" ]; then
            echo "Found test resource groups to clean up:"
            echo "$test_rgs"
            
            for rg in $test_rgs; do
              echo "Attempting to delete resource group: $rg"
              az group delete --name "$rg" --yes --no-wait || true
            done
          else
            echo "No test resource groups found for cleanup"
          fi

  test-summary:
    runs-on: ubuntu-latest
    needs: [detect-modules, terraform-integration-test]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Weekly Terraform Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Type:** ${{ github.event.inputs.test_type || 'integration,e2e' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Modules Tested:** ${{ needs.detect-modules.outputs.modules }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.terraform-integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.terraform-integration-test.result }}" = "success" ]; then
            echo "✅ All integration tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.terraform-integration-test.result }}" = "failure" ]; then
            echo "❌ Some integration tests failed. Please check the job logs for details." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.terraform-integration-test.result }}" = "skipped" ]; then
            echo "⚠️ Integration tests were skipped (no modules found with integration tests)." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Integration tests completed with status: ${{ needs.terraform-integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failed tests and address issues" >> $GITHUB_STEP_SUMMARY
          echo "- Update test scenarios if needed" >> $GITHUB_STEP_SUMMARY
          echo "- Consider running manual tests for critical modules" >> $GITHUB_STEP_SUMMARY