name: PoC Azure Save Money - Test Mode

on:
  # push:
  #   branches:
  #     - feat/azsavemoney-poc # for testing purposes
  schedule:
    - cron: '0 2 * * 4'  # Every Thursday at 2:00 UTC (is a random date for testing)
  workflow_dispatch:
    inputs:
      log_analytics_workspace_id:
        description: 'Log Analytics Workspace ID'
        required: false
        default: ''
        type: string

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true

jobs:
  delete-resources:
    name: Test Mark and Delete Resources (WhatIf Mode)
    runs-on: ubuntu-latest
    environment: dev-ci
    permissions:
      contents: read
      actions: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main
      
      - name: Install Az PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name Az.Accounts -Force -AllowClobber
          Install-Module -Name Az.Batch -Force -AllowClobber
          Install-Module -Name Az.DataProtection -Force -AllowClobber
          Install-Module -Name Az.Monitor -Force -AllowClobber
          Install-Module -Name Az.ResourceGraph -Force -AllowClobber
          Install-Module -Name Az.Resources -Force -AllowClobber
          Install-Module -Name Az.ServiceBus -Force -AllowClobber
          Install-Module -Name PowerShellGet -Force -AllowClobber
      
      - name: Create Defaults.json file
        shell: pwsh
        run: |
          $defaultsJson = @{
            TenantId = "${{ env.ARM_TENANT_ID }}"
            AlwaysOnlyMarkForDeletion = $true
            MinimumResourceAgeInDaysForChecking = 7
            DeleteSuspectedResourcesAndGroupsAfterDays = 30
            DontDeleteEmptyResourceGroups = $false
            EnableRegularResetOfRejectedState = $true
            ResetOfRejectedStatePeriodInDays = 180
            DontDeleteEmptyResourceGroups = $true
            "SubscriptionIdsToProcess": [
              "${{ env.ARM_SUBSCRIPTION_ID }}",
            ]
          }
          
          # Add Log Analytics Workspace ID if provided
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.log_analytics_workspace_id }}")) {
            $defaultsJson.Add("CentralAuditLogAnalyticsWorkspaceId", "${{ inputs.log_analytics_workspace_id }}")
          }
          
          # Ensure the scripts directory exists
          $scriptDir = Join-Path (Get-Location) "infra/scripts"
          
          # Convert to JSON and save to file
          $defaultsJson | ConvertTo-Json -Depth 3 | Out-File -FilePath (Join-Path $scriptDir "Defaults.json")
          
          Write-Host "Created Defaults.json file with the following content:"
          Get-Content (Join-Path $scriptDir "Defaults.json")
      
      - name: Run script to mark resources (WhatIf mode)
        shell: pwsh
        run: |
          # Create reports directory if it doesn't exist
          if (-not (Test-Path -Path "./reports")) {
            New-Item -Path "./reports" -ItemType Directory
          }
          
          # Run the script in WhatIf mode and capture output
          $scriptOutput = ./infra/scripts/MarkAndDeleteUnusedResources.ps1 -WhatIf
          
          # Save the script output to a file
          $scriptOutput | Out-File -FilePath "./reports/whatif-output-$(Get-Date -Format "yyyy-MM-dd").log"
          
          Write-Host "Script executed in WhatIf mode, output saved to report file"
      
      - name: Generate test report
        shell: pwsh
        run: |
          # In WhatIf mode, the script doesn't actually apply tags
          # Instead, we'll create a report from script output and resource information
          
          # Get all resources that would potentially be assessed by the script
          $resources = Search-AzGraph -Query "resources | project resourceId, name, resourceGroup, type, kind, tags, location | order by resourceGroup asc"
          
          # Extract information about used resources from the script output
          $outputLog = Get-Content -Path "./reports/whatif-output-$(Get-Date -Format "yyyy-MM-dd").log" -Raw
          
          # Create a report with the resources and the script output
          $report = @{
            "scriptOutput" = $outputLog
            "resourcesAssessed" = $resources.Count
            "executionDate" = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
            "resources" = $resources
          }
          
          # Save the report
          $report | ConvertTo-Json -Depth 4 | Out-File -FilePath "./reports/whatif-report-$(Get-Date -Format "yyyy-MM-dd").json"
          
          Write-Host "Test report generated for $($resources.Count) resources"


      - name: Upload Artifact
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          bundle_name: whatif-report
          file_path: "${{ github.workspace }}/reports/whatif-*"