on:
  workflow_call:
    inputs:
      workspace_name:
        description: The name of the workspace to create the artifact for.
        type: string
        required: true
      resource_group_name:
        description: Web App resource group name.
        type: string
        required: true
      web_app_name:
        description: Web App name.
        type: string
        required: true
      environment:
        description: Environment where the artifact will be deployed.
        type: string
        required: true
      use_staging_slot:
        description: Use a staging slot for the deployment.
        type: boolean
        required: false
        default: true
      disable_auto_staging_deploy:
        description: Disable automatic deployments to the staging slot.
        type: boolean
        required: false
        default: false
      use_private_agent:
        description: Use a private agent to deploy the built artifact.
        type: boolean
        required: false
        default: true
      use_labels:
        description: Use labels to start the right environment's GitHub runner. If use_labels is true, also use_private_agent must be set to true
        type: boolean
        required: false
        default: false
      override_labels:
        description: Needed for special cases where the environment alone is not sufficient as a distinguishing label
        type: string
        required: false
        default: ""

concurrency:
  group: ${{ github.workflow }}-cd
  cancel-in-progress: true

env:
  BUNDLE_NAME: ${{ inputs.workspace_name }}
  RESOURCE_GROUP_NAME: ${{ inputs.resource_group_name }}
  WEB_APP_NAME: ${{ inputs.web_app_name }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    env:
      WORKSPACE_NAME: ${{ inputs.workspace_name }}

    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node.js
        id: node-setup
        uses: pagopa/dx/.github/actions/node-setup@main

      - name: Install dependencies (pnpm)
        if: ${{ steps.node-setup.outputs.package-manager == 'pnpm' }}
        run: pnpm --filter $WORKSPACE_NAME install

      - name: Install dependencies (yarn)
        if: ${{ steps.node-setup.outputs.package-manager == 'yarn' }}
        run: yarn install --immutable

      - name: Build
        run: npx turbo build --filter $WORKSPACE_NAME

      - name: Get workspace path
        id: get-workspace-path
        run: |
          WORKSPACE_PATH=$(npx turbo ls --output=json |
            jq -sr --arg NAME "$WORKSPACE_NAME" '.[].packages.items[] | select(.name == $NAME).path')
          echo "path=$WORKSPACE_PATH" >> $GITHUB_OUTPUT

      - name: Make artifact
        id: make-artifact
        env:
          YARN_NODE_LINKER: node-modules
          YARN_NM_HOISTING_LIMITS: workspaces
          PACKAGE_MANAGER: ${{ steps.node-setup.outputs.package-manager }}
        working-directory: ${{ steps.get-workspace-path.outputs.path }}
        run: |
          if grep -rq --include='next.config.*' 'output: "standalone"' .; then
            echo "::debug:: the workspace contains a Next.js standalone app"
            mv .next/static .next/standalone/.next
            cd .next/standalone && zip -r $BUNDLE_NAME.zip .
            echo "artifact-path=$(realpath $BUNDLE_NAME.zip)" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "$PACKAGE_MANAGER" = "pnpm" ]; then
            pnpm --filter $WORKSPACE_NAME deploy --prod bundle
            cd bundle && zip -r $BUNDLE_NAME.zip .
            echo "artifact-path=$(realpath $BUNDLE_NAME.zip)" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "$PACKAGE_MANAGER" = "yarn" ]; then
            yarn config set nodeLinker node-modules
            yarn config set nmHoistingLimits workspaces
            yarn workspaces focus --production
            zip -r $BUNDLE_NAME.zip .
            echo "artifact-path=$(realpath $BUNDLE_NAME.zip)" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Unsupported package manager: $PACKAGE_MANAGER"
          exit 1

      - name: Upload Artifact
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          file_path: ${{ steps.make-artifact.outputs.artifact-path }}
          bundle_name: ${{ env.BUNDLE_NAME }}

  deploy:
    name: Deploy
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    needs: [build]
    if: ${{ !github.event.act }}
    environment: ${{ inputs.environment }}-cd

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download Artifact
        uses: pagopa/dx/.github/actions/download-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy
        env:
          USE_STAGING_SLOT: ${{ inputs.use_staging_slot }}
        run: |
          cmd=(
              "az" "webapp" "deploy"
              "--resource-group" "$RESOURCE_GROUP_NAME"
              "--name" "$WEB_APP_NAME"
              "--src-path" "$BUNDLE_NAME.zip"
              "--type" "zip"
              "--async" "false"
          )

          if [[ "$USE_STAGING_SLOT" == "true" ]]; then
              echo "Deploying to staging slot"
              cmd+=("--slot" "staging")
          else
              echo "Deploying to production (no slot)"
          fi

          "${cmd[@]}"

  auto_approve_staging_deploy:
    name: Approve Staging Deployment
    runs-on: ubuntu-latest
    needs: [build]

    if: ${{ !github.event.act && inputs.use_staging_slot && !inputs.disable_auto_staging_deploy }}

    steps:
      - name: Approve deployment
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_DEPLOYMENT_APPROVAL }}
          REQUIRED_ENVIRONMENT: ${{ inputs.environment }}-cd
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "::error::GH_TOKEN_DEPLOYMENT_APPROVAL secret is not set."
            exit 1
          fi

          DEPLOYMENTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/pending_deployments)

          ENVIRONMENT=$(jq -r '.[].environment.name' <<< "$DEPLOYMENTS")

          if [ "$ENVIRONMENT" != "$REQUIRED_ENVIRONMENT" ]; then
            echo "::error::Environment $REQUIRED_ENVIRONMENT not found."
            echo "::warning::Check if the deployment was already approved by one of the reviewers."
            exit 1
          fi

          CURRENT_USER_CAN_APPROVE=$(jq -r '.[].current_user_can_approve' <<< "$DEPLOYMENTS")

          if [ "$CURRENT_USER_CAN_APPROVE" != true ]; then
            GITHUB_USER=$(gh api user | jq -r '.login')
            echo "::error::$GITHUB_USER is not a reviewer"
            echo "::warning::Auto Approval not available, the user is not a reviewer of the environment $REQUIRED_ENVIRONMENT."
            exit 1
          fi

          ENV_ID=$(jq -r '.[].environment.id' <<< "$DEPLOYMENTS")

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/pending_deployments \
            -F "environment_ids[]=$ENV_ID" \
            -f "state=approved" \
            -f "comment=Approved automatically by the workflow."

  swap_staging_production:
    name: Swap slots
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    needs: [deploy]
    if: ${{ !github.event.act && inputs.use_staging_slot }}
    environment: ${{ inputs.environment }}-cd

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Swap Staging and Production Slots
        run: |
          az webapp deployment slot swap \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --name "$WEB_APP_NAME" \
            --slot staging \
            --target-slot production
