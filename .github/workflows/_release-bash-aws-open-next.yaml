name: Deploy OpenNext Application

on:
  workflow_call:
    inputs:
      workspace_name:
        type: string
        required: true
        description: The name of the workspace to create the artifact for.
      environment:
        description: "Choose environment"
        type: string
        required: true
        default: dev
      app_path:
        description: "Path to the Next.js application"
        type: string
        required: true
      project_prefix:
        description: "Project name for OpenNext deployment. Es. dx-d-itn-devp-auth"
        type: string
        required: false
      aws_region:
        description: "AWS region for deployment"
        type: string
        default: eu-south-1
        required: false
      use_private_agent:
        description: Use a private agent to deploy the built artifact.
        type: boolean
        required: false
        default: false
      cloudfront_distribution_id:
        description: "CloudFront distribution ID for OpenNext deployment"
        type: string
        required: true

# Global environment variables - customize these for your project
env:
  PROJECT_PREFIX: ${{ vars.PROJECT_PREFIX || inputs.project_prefix }}
  AWS_REGION: ${{ inputs.aws_region  }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ inputs.cloudfront_distribution_id }}
  BUNDLE_NAME: "bundle"

concurrency:
  group: ${{ github.workflow }}-cd
  cancel-in-progress: true

jobs:
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ inputs.workspace_name }}
      TURBO_CACHE_DIR: .turbo-cache

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Detect turbo version
        id: turbo-version
        run: |
          TURBO_VERSION=$(jq -r '.devDependencies.turbo | sub("^[\\^~]";"") | split(".") | .[0]' package.json)
          echo "version=$TURBO_VERSION" >> $GITHUB_OUTPUT

      - name: Prune (turbo 1.x)
        if: steps.turbo-version.outputs.version == '1'
        run: |
          npx turbo@1.13.3 prune --scope ${{ env.WORKSPACE }}
          echo "::warning::Turbo 1.x is deprecated. Please upgrade to the latest version."

      - name: Prune
        if: steps.turbo-version.outputs.version != '1'
        run: npx turbo prune --scope ${{ env.WORKSPACE }}

      - name: Node Setup
        uses: pagopa/dx/.github/actions/node-setup@main
        with:
          working_dir: ./out

      # we fall back to node-moules, even in case pnp is configured, in order to avoid bundling dependencies
      - name: Install dependencies
        run: |
          yarn config set nodeLinker node-modules
          yarn config set nmHoistingLimits workspaces
          yarn install --immutable
        working-directory: ./out

      - name: Build
        run: yarn build
        working-directory: ./out

      - name: Build the Function App Artifact
        id: make-function-app-artifact
        run: |
          npm pkg set --json "bundledDependencies"=true
          npx npm-pack-zip
          mv $(jq -r .name package.json).zip ${{ env.BUNDLE_NAME }}.zip
          echo "artifact-path=$(realpath ${{ env.BUNDLE_NAME }}.zip)" >> "$GITHUB_OUTPUT"
        working-directory: ./out/apps/${{ env.WORKSPACE }}/.open-next

      - name: Upload Artifact
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}
          file_path: ${{ steps.make-function-app-artifact.outputs.artifact-path }}
  deploy:
    name: Deploy OpenNext ${{ inputs.environment }}
    needs: build
    # Customize runner based on your infrastructure
    # For GitHub-hosted runners:
    runs-on: ${{ inputs.use_private_agent && format('{0}-runner', vars.PROJECT_PREFIX || inputs.project_prefix) || 'ubuntu-latest' }}

    continue-on-error: false
    environment: app-${{ inputs.environment }}-cd

    env:
      TURBO_CACHE_DIR: .turbo-cache
      WORKSPACE: ${{ inputs.workspace_name }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: pagopa/dx/.github/actions/aws-login@opennext-module
        with:
          role_to_assume: ${{ secrets.ROLE_ARN }}
          aws_region: ${{ inputs.aws_region }}

      - name: Download OpenNext Artifact
        uses: pagopa/dx/.github/actions/download-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}

      - name: Extract OpenNext Artifact
        run: |
          mkdir -p ./opennext-deployment
          unzip -q ${{ env.BUNDLE_NAME }}.zip -d ./opennext-deployment

      - name: Sync Assets to S3
        working-directory: ./opennext-deployment
        run: |
          aws s3 sync ./.open-next/assets \
            s3://${{ env.PROJECT_PREFIX }}-website-opnext-assets-01/_assets \

      - name: Sync Cache to S3
        working-directory: ./opennext-deployment
        run: |
          aws s3 sync ./.open-next/cache \
            s3://${{ env.PROJECT_PREFIX }}-website-opnext-assets-01/_cache \

      - name: Clean up config files
        working-directory: ./opennext-deployment/.open-next
        run: |
          find ./ -type f -name ".env" -delete

      - name: Deploy Lambda Server Function
        uses: ./.github/actions/deploy-lambda
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-server-lambda-01
          working_directory: ./opennext-deployment/.open-next/server-functions/default
          s3_bucket: ${{ env.PROJECT_PREFIX }}-website-opennext-lambda-code-01
          aws_region: ${{ inputs.aws_region }}

      - name: Deploy Lambda Image Optimization Function
        uses: ./.github/actions/deploy-lambda
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-img-opt-lambda-01
          working_directory: ./opennext-deployment/.open-next/image-optimization-function
          s3_bucket: ${{ env.PROJECT_PREFIX }}-website-opennext-lambda-code-01
          aws_region: ${{ inputs.aws_region }}

      - name: Deploy Lambda DynamoDB Provider Function
        uses: ./.github/actions/deploy-lambda
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-init-lambda-01
          working_directory: ./opennext-deployment/.open-next/dynamodb-provider
          s3_bucket: ${{ env.PROJECT_PREFIX }}-website-opennext-lambda-code-01
          aws_region: ${{ inputs.aws_region }}

      - name: Deploy Lambda Revalidation Function
        uses: ./.github/actions/deploy-lambda
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-isr-lambda-01
          working_directory: ./opennext-deployment/.open-next/revalidation-function
          s3_bucket: ${{ env.PROJECT_PREFIX }}-website-opennext-lambda-code-01
          aws_region: ${{ inputs.aws_region }}

      - name: Initialize DynamoDB Provider
        run: |
          aws lambda invoke \
            --function-name ${{ env.PROJECT_PREFIX }}-website-opnext-init-lambda-01 \
            --payload '{}' \
            response.json

      - name: Publish Lambda version - Server Function
        uses: ./.github/actions/publish-lambda-version
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-server-lambda-01
          alias_name: production
          aws_region: ${{ inputs.aws_region }}

      - name: Publish Lambda version - Image Optimization Function
        uses: ./.github/actions/publish-lambda-version
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-img-opt-lambda-01
          alias_name: production
          aws_region: ${{ inputs.aws_region }}

      - name: Publish Lambda version - Revalidation Function
        uses: ./.github/actions/publish-lambda-version
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-isr-lambda-01
          alias_name: production
          aws_region: ${{ inputs.aws_region }}

      - name: Publish Lambda version - DynamoDB Provider Function
        uses: ./.github/actions/publish-lambda-version
        with:
          function_name: ${{ env.PROJECT_PREFIX }}-website-opnext-init-lambda-01
          alias_name: production
          aws_region: ${{ inputs.aws_region }}

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.cloudfront_distribution_id }} \
            --paths "/*" \
