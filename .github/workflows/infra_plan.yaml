on:
  workflow_call:
    inputs:
      environment:
        description: Environment where the resources will be deployed.
        type: string
        required: true
      base_path:
        description: The base path on which the script will look for Terraform projects
        type: string
        required: true
      env_vars:
        description: List of environment variables to set up, given in env=value format.
        type: string
        required: false
      use_private_agent:
        description: Use a private agent to run the Terraform plan.
        type: boolean
        required: false
        default: false
      override_github_environment:
        description: Set a value if GitHub Environment name is different than the TF environment folder
        type: string
        required: false
        default: ''
      use_labels:
        description: Use labels to start the right environment's GitHub runner. If use_labels is true, also use_private_agent must be set to true
        type: boolean
        required: false
        default: false
      override_labels:
        description: Needed for special cases where the environment alone is not sufficient as a distinguishing label
        type: string
        required: false
        default: ''

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true

jobs:
  tf_plan:
    name: 'Terraform Plan'
    # Use inputs.override_labels if set; otherwise, fall back to inputs.environment.
    # When inputs.use_labels and inputs.use_private_agent are true, apply the selected labels.
    # Default to 'self-hosted' if inputs.use_private_agent is true, or 'ubuntu-latest' otherwise.
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    environment: ${{ inputs.override_github_environment == '' && inputs.environment || inputs.override_github_environment}}-ci
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}-${{ inputs.base_path }}-ci
      cancel-in-progress: false
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      # Set the directory where the Terraform files are located
      # The directory the value is then available in ${{ steps.directory.outputs.dir }}
      - name: Set directory
        id: directory
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          BASE_PATH: ${{ inputs.base_path }}
        run: |
          set -euo pipefail

          if [ -z "$ENVIRONMENT" ]; then
            echo "Environment must be provided."
            exit 1
          else
            # The directory is expected to be in the format
            #  infra/resources/$ENVIRONMENT
            # Example: infra/resources/prod
            printf "dir=%q/%q" "$BASE_PATH" "$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Set Environment Variables
        if: ${{ inputs.env_vars }}
        env:
          ENV_VARS: ${{ inputs.env_vars }}
        run: |
          set -euo pipefail

          for i in "$ENV_VARS[@]"
          do
            printf "%q\n" "$i" >> "$GITHUB_ENV"
          done

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main

      - name: Terraform Setup
        id: set-terraform-version
        uses: pagopa/dx/.github/actions/terraform-setup@main

      - name: Terraform Init
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform init

      # Run Terraform Plan
      # The plan output is saved in a file and then processed to remove unnecessary lines
      # The step never fails but the result is checked in the next step
      # This is because we want to post the plan output in the PR even if the plan fails
      - name: Terraform Plan
        id: plan
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          set -euo pipefail

          # Run terraform plan and capture output
          terraform plan -lock-timeout=3000s -no-color -out=plan.out 2>&1 | grep -v "hidden-link:" | tee tf_plan_stdout.txt

          # Check if plan succeeded
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          echo "Pipeline exit codes: terraform=${PLAN_EXIT_CODE}, grep=${PIPESTATUS[1]}, tee=${PIPESTATUS[2]}"

          # Capture the summary line regardless of plan success/failure
          SUMMARY_LINE=$(grep -E "^Plan: [0-9]+ to add" tf_plan_stdout.txt || echo "No changes detected.")
          echo "$SUMMARY_LINE" > plan_summary.txt

          # Only proceed with plan show if plan was successful
          if [ $PLAN_EXIT_CODE -eq 0 ]; then
            # Show the plan and save to file
            terraform show -no-color plan.out > full_plan.txt
            SHOW_EXIT_CODE=$?
            echo "terraform show exit code: $SHOW_EXIT_CODE"

            # Check if full_plan.txt exists and has content
            if [ -s full_plan.txt ]; then
              # Extract the diff section
              sed -n '/^  #/,$p' full_plan.txt | grep -Ev "Refreshing state|state lock|Reading|Read" > filtered_plan.txt || true

              # If filtered_plan.txt is empty, use the summary line
              if [ ! -s filtered_plan.txt ]; then
                echo "No resource changes found in the plan." > filtered_plan.txt
                echo "$SUMMARY_LINE" >> filtered_plan.txt
              fi
            else
              # Handle empty plan file
              echo "Plan file is empty. This could mean no changes or an error occurred." > filtered_plan.txt
              echo "$SUMMARY_LINE" >> filtered_plan.txt
            fi
          else
            # If plan failed, create a minimal filtered plan with error info
            echo "Terraform plan failed with exit code $PLAN_EXIT_CODE" > filtered_plan.txt
            grep -E "Error:|error:" tf_plan_stdout.txt >> filtered_plan.txt || echo "No specific error message found." >> filtered_plan.txt
          fi

          # Prepare the output for PR comment
          if [ "$(wc -c < filtered_plan.txt 2>/dev/null || echo 0)" -gt 60000 ]; then
            echo "${SUMMARY_LINE}" > plan_output_multiline.txt
            echo "" >> plan_output_multiline.txt
            echo "Full plan output was too long and was omitted. Check the workflow logs for full details." >> plan_output_multiline.txt
          else
            cat filtered_plan.txt > plan_output_multiline.txt
          fi

          # Set exit code for this step based on the plan result
          if [ $PLAN_EXIT_CODE -ne 0 ] || grep -q "::error::Terraform exited with code" tf_plan_stdout.txt; then
            echo "Terraform plan failed"
            exit 1
          fi


      # Post the plan output in the PR
      # The plan output is posted in a comment in the PR
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        name: Post Plan on PR
        id: comment
        if: always() && github.event_name == 'pull_request'
        env:
          OUTPUT_DIR: ${{ steps.directory.outputs.dir }}
          PLAN_STATUS: ${{ steps.plan.outcome }}
        with:
          script: |
            const fs = require('fs');
            const outputDir = process.env.OUTPUT_DIR;
            const output = fs.readFileSync(`${outputDir}/plan_output_multiline.txt`, 'utf8');
            const status = process.env.PLAN_STATUS;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(`Terraform Plan (${outputDir})`)
            })
            const commentBody = `#### ðŸ“– Terraform Plan (${outputDir}) - ${status}
            <details>
            <summary>Terraform Plan</summary>

            \`\`\`hcl
            ${output}
            \`\`\`

            </details>
            `;
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              })
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
              issue_number: context.issue.number
            })


      # Fail the workflow if the Terraform plan failed
      - name: Check Terraform Plan Result
        if: always() && steps.plan.outcome != 'success'
        run: |
          exit 1
