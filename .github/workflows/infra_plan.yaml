on:
  workflow_call:
    inputs:
      environment:
        description: Environment where the resources will be deployed.
        type: string
        required: true
      base_path:
        description: The base path on which the script will look for Terraform projects
        type: string
        required: true
      env_vars:
        description: List of environment variables to set up, given in env=value format.
        type: string
        required: false
      use_private_agent:
        description: Use a private agent to run the Terraform plan.
        type: boolean
        required: false
        default: false
      override_github_environment:
        description: Set a value if GitHub Environment name is different than the TF environment folder
        type: string
        required: false
        default: ""
      use_labels:
        description: Use labels to start the right environment's GitHub runner. If use_labels is true, also use_private_agent must be set to true
        type: boolean
        required: false
        default: false
      override_labels:
        description: Needed for special cases where the environment alone is not sufficient as a distinguishing label
        type: string
        required: false
        default: ""

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true
  TF_IN_AUTOMATION: true
  REFRESH_STATE_EVERY_SECONDS: 600 # 10 minutes

jobs:
  get-terraform-version:
    name: Get Terraform Version
    runs-on: ubuntu-latest
    outputs:
      terraform_version: ${{ steps.get-version.outputs.terraform_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.7

      - name: Get terraform version from .terraform-version file
        id: get-version
        uses: pagopa/dx/.github/actions/get-terraform-version@main
        with:
          default_version: "1.10.4"

  tf-modules-check:
    uses: pagopa/dx/.github/workflows/static_analysis.yaml@main
    name: Check terraform registry modules hashes
    needs: [get-terraform-version]
    secrets: inherit
    with:
      terraform_version: ${{ needs.get-terraform-version.outputs.terraform_version }}
      check_to_run: lock_modules
      folder: ${{ inputs.base_path }}/${{ inputs.environment }}/
      verbose: true

  tf_plan:
    name: "Terraform Plan"
    needs: [get-terraform-version, tf-modules-check]
    # Use inputs.override_labels if set; otherwise, fall back to inputs.environment.
    # When inputs.use_labels and inputs.use_private_agent are true, apply the selected labels.
    # Default to 'self-hosted' if inputs.use_private_agent is true, or 'ubuntu-latest' otherwise.
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    environment: ${{ inputs.override_github_environment == '' && inputs.environment || inputs.override_github_environment}}-ci
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}-${{ inputs.base_path }}-ci
      cancel-in-progress: false
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Set the directory where the Terraform files are located
      # The directory the value is then available in ${{ steps.directory.outputs.dir }}
      - name: Set directory
        id: directory
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          BASE_PATH: ${{ inputs.base_path }}
        run: |
          set -euo pipefail

          if [ -z "$ENVIRONMENT" ]; then
            echo "Environment must be provided."
            exit 1
          else
            # The directory is expected to be in the format
            #  infra/resources/$ENVIRONMENT
            # Example: infra/resources/prod
            printf "dir=%q/%q" "$BASE_PATH" "$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Set Environment Variables
        if: ${{ inputs.env_vars }}
        env:
          ENV_VARS: ${{ inputs.env_vars }}
        run: |
          set -euo pipefail

          for i in "$ENV_VARS[@]"
          do
            printf "%q\n" "$i" >> "$GITHUB_ENV"
          done

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main

      - name: Terraform Setup
        id: set-terraform-version
        uses: pagopa/dx/.github/actions/terraform-setup@main
        with:
          terraform_version: ${{ needs.get-terraform-version.outputs.terraform_version }}

      - name: Terraform Init
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform init -input=false

      - name: Generate Cache Key
        if: github.event_name == 'pull_request'
        id: cache-key
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          # Get current epoch time rounded to chosen window
          TIME_WINDOW=$(( $(date +%s) / $REFRESH_STATE_EVERY_SECONDS ))
          echo "cache-key=tfplan-pr${PR_NUMBER}-${TIME_WINDOW}s" >> $GITHUB_OUTPUT

      # Restore PR TFPlan Cache (miss = first run or >10 minutes, hit = within 10 minutes)
      - name: Check for Cache
        if: github.event_name == 'pull_request'
        id: tfplan-pr-cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ steps.directory.outputs.dir }}/.pr_plan_marker
          key: ${{ steps.cache-key.outputs.cache-key }}

      - name: Set Terraform Refresh Flag
        id: set-refresh-flag
        if: github.event_name == 'pull_request'
        working-directory: ${{ steps.directory.outputs.dir }}
        env:
          CACHE_HIT: ${{ steps.tfplan-pr-cache.outputs.cache-hit }}
        run: |
          if [ "$CACHE_HIT" == "true" ]; then
            echo "disable_tf_plan_refresh=true" >> $GITHUB_OUTPUT
            echo "::notice::State will NOT be refreshed"
          else
            echo "disable_tf_plan_refresh=false" >> $GITHUB_OUTPUT
            echo "::notice::State will be refreshed"

            echo "$(date)" > ./.pr_plan_marker
          fi

      # Run Terraform Plan
      - name: Terraform Plan
        id: plan
        uses: pagopa/dx/.github/actions/filter-terraform-plan@feat-terraform-plan-action # main
        with:
          base-path: ${{ steps.directory.outputs.dir }}
          sensitive-keys: hidden-link,APPINSIGHTS_INSTRUMENTATIONKEY
          no-refresh: ${{ steps.set-refresh-flag.outputs.disable_tf_plan_refresh }}

      - name: Check Plan length
        id: check-length
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          # If the filtered plan is too long use the summary line, otherwise use the full filtered plan
          if [ "$(wc -c < ${PLAN_FILE_PATH#"${{ steps.directory.outputs.dir }}/"})" -gt 60000 ]; then
            echo "${SUMMARY_LINE}" > plan_output.txt
            echo "COMPLETE_PLAN=false" >> $GITHUB_OUTPUT
          else
            cat filtered_plan.txt > plan_output.txt
            echo "COMPLETE_PLAN=true" >> $GITHUB_OUTPUT
          fi
        env:
          SUMMARY_LINE: ${{ steps.plan.outputs.summary_line }}
          PLAN_FILE_PATH: ${{ steps.plan.outputs.filtered_plan_path }}

      - name: Set Plan Output
        id: set-plan-output
        env:
          WORKFLOW_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          OUTPUT_DIR: ${{ steps.directory.outputs.dir }}
          PLAN_OUTCOME: ${{ steps.plan.outcome }}
          COMPLETE_PLAN: ${{ steps.check-length.outputs.COMPLETE_PLAN }}
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          echo "### ðŸ“– Terraform Plan ($OUTPUT_DIR) - $PLAN_OUTCOME" > message_body.txt
          echo "<details>" >> message_body.txt
          echo "<summary>Show Plan</summary>" >> message_body.txt
          echo "" >> message_body.txt

          echo "\`\`\`hcl" >> message_body.txt
          cat plan_output.txt >> message_body.txt
          echo "\`\`\`" >> message_body.txt

          if [ $COMPLETE_PLAN == 'false' ]; then
            echo "Full plan output was too long and was omitted. Check the [workflow logs]($WORKFLOW_URL) for full details." >> message_body.txt
          fi

          echo "" >> message_body.txt
          echo "</details>" >> message_body.txt

      # Post the plan output in the PR
      - name: Post Plan on PR
        id: comment
        if: always() && github.event_name == 'pull_request'
        uses: pagopa/dx/actions/pr-comment@main
        env:
          COMMENT_BODY_FILE: "${{ steps.directory.outputs.dir }}/message_body.txt"
        with:
          comment-body-file: ${{ env.COMMENT_BODY_FILE }}
          search-pattern: "Terraform Plan (${{ steps.directory.outputs.dir }})"

      # Fail the workflow if the Terraform plan failed
      - name: Check Terraform Plan Result
        if: always() && steps.plan.outcome != 'success'
        run: |
          exit 1
