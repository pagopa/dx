on:
  workflow_call:
    inputs:
      environment:
        description: Environment where the resources will be deployed.
        type: string
        required: true
      base_path:
        description: The base path on which the script will look for Terraform projects
        type: string
        required: true
      env_vars:
        description: List of environment variables to set up, given in env=value format.
        type: string
        required: false
      use_private_agent:
        description: Use a private agent to run the Terraform plan.
        type: boolean
        required: false
        default: false
      override_github_environment:
        description: Set a value if GitHub Environment name is different than the TF environment folder
        type: string
        required: false
        default: ''
      use_labels:
        description: Use labels to start the right environment's GitHub runner. If use_labels is true, also use_private_agent must be set to true
        type: boolean
        required: false
        default: false
      override_labels:
        description: Needed for special cases where the environment alone is not sufficient as a distinguishing label
        type: string
        required: false
        default: ''

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true

jobs:
  tf_plan:
    name: 'Terraform Plan'
    # Use inputs.override_labels if set; otherwise, fall back to inputs.environment. 
    # When inputs.use_labels and inputs.use_private_agent are true, apply the selected labels. 
    # Default to 'self-hosted' if inputs.use_private_agent is true, or 'ubuntu-latest' otherwise.
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    environment: ${{ inputs.override_github_environment == '' && inputs.environment || inputs.override_github_environment}}-ci
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}-ci
      cancel-in-progress: false
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      # Set the directory where the Terraform files are located
      # The directory the value is then available in ${{ steps.directory.outputs.dir }}
      - name: Set directory
        id: directory
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          BASE_PATH: ${{ inputs.base_path }}
        run: |
          set -euo pipefail

          if [ -z "$ENVIRONMENT" ]; then
            echo "Environment must be provided."
            exit 1
          else
            # The directory is expected to be in the format
            #  infra/resources/${{ inputs.environment }}
            # Example: infra/resources/prod
            printf "dir=%q/%q" "$BASE_PATH" "$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Set Environment Variables
        if: ${{ inputs.env_vars }}
        env:
          ENV_VARS: ${{ inputs.env_vars }}
        run: |
          set -euo pipefail

          for i in "$ENV_VARS[@]"
          do
            printf "%q\n" "$i" >> "$GITHUB_ENV"
          done

      - name: Azure Login
        uses: azure/login@v2 # v2.0.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Set Terraform Version
        id: set-terraform-version
        run: |
          set -eu
          terraform_version=$(cat .terraform-version)
          printf "terraform_version=$terraform_version" >> "$GITHUB_OUTPUT"

      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        name: Setup Terraform
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform_version }}

      - name: Terraform Init
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform init

      - name: Check terraform registry modules hashes
        id: check-terraform-registry-modules-hashes
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          set -euo pipefail
          MODULES_DIR=".terraform/modules"
          MODULES_METADATA=".terraform/modules/modules.json"
          REGISTRY_URL="registry.terraform.io"
          HASHES_FILE="tfmodules.lock.json"

          # Check if modules directory exists, exit if not
          if [ ! -d "$MODULES_DIR" ]; then
              echo "No modules directory found. Skipping module check."
              exit 0
          fi

          # Check if modules metadata exists, exit if not
          if [ ! -f "$MODULES_METADATA" ]; then
              echo "No modules metadata file found. Skipping module check."
              exit 0
          fi

          # Check for modules sourced from the Terraform registry
          registry_modules=$(jq --arg registry_url "$REGISTRY_URL" \
              '.Modules[] | select(.Source | contains($registry_url)) | .Key' \
              "$MODULES_METADATA")

          if [ -z "$registry_modules" ]; then
              echo "No Terraform modules from the registry were found. No lock file check needed."
              exit 0
          fi

          echo "Terraform modules from the registry were found. Checking for $HASHES_FILE..."

          # Check if the lock file exists if there are registry modules
          if [ ! -f "$HASHES_FILE" ]; then
              echo "Error: $HASHES_FILE is missing. Please ensure it exists and is up to date."
              exit 1
          fi

          echo "$HASHES_FILE is present. Proceeding..."

          calculate_hash() {
              local module_path="$1"
              tar --exclude="$module_path/.*" -cf - "$module_path" | sha256sum | awk '{ print $1 }'
          }
          
          missing_modules=()
          changed_modules=()

          # Iterate over modules listed in the metadata that were sourced from the Terraform registry
          jq -r --arg registry_url "$REGISTRY_URL" \
              '.Modules[] | select(.Source | contains($registry_url)) | .Key' \
              "$MODULES_METADATA" | while read -r module_key; do

              module_path="$MODULES_DIR/$module_key"

              if [ -d "$module_path" ]; then
                  module_name=$(basename "$module_path")
                  new_hash=$(calculate_hash "$module_path")

                  # Retrieve the previous hash
                  previous_hash=$(jq -r --arg module "$module_name" '.[$module]' "$HASHES_FILE")

                  if [ "$previous_hash" = "null" ] || [ -z "$previous_hash" ]; then
                      # Add to missing modules array
                      missing_modules+=("$module_name")
                  else
                      # Compare the hashes
                      if [ "$previous_hash" == "$new_hash" ]; then
                          echo "The module $module_name has not changed."
                      else
                          changed_modules+=("$module_name")
                      fi
                  fi
              else
                  echo "Module path $module_path not found."
              fi
          done < <(jq -r --arg registry_url "$REGISTRY_URL" \
              '.Modules[] | select(.Source | contains($registry_url)) | .Key' \
              "$MODULES_METADATA")

          # Check if we found any issues and report them
          if [ ${#missing_modules[@]} -gt 0 ] || [ ${#changed_modules[@]} -gt 0 ]; then
              echo -e "\nSummary of issues found:"
              
              if [ ${#missing_modules[@]} -gt 0 ]; then
                  echo -e "\nModules missing from lock file:"
                  printf '%s\n' "${missing_modules[@]}"
              fi
              
              if [ ${#changed_modules[@]} -gt 0 ]; then
                  echo -e "\nModules with changed hashes:"
                  printf '%s\n' "${changed_modules[@]}"
              fi
              
              exit 1
          fi


      # Run Terraform Plan
      # The plan output is saved in a file and then processed to remove unnecessary lines
      # The step never fails but the result is checked in the next step
      # This is because we want to post the plan output in the PR even if the plan fails
      - name: Terraform Plan
        id: plan
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform plan -lock-timeout=3000s -no-color 2>&1 | grep -v "hidden-link:"  | tee plan_output.txt

          OUTPUT=$(grep -Ev "Refreshing state|state lock|Reading|Read" plan_output.txt | tail -c 60000)

          printf "%s" "$OUTPUT" > plan_output_multiline.txt

          if grep -q "::error::Terraform exited with code" plan_output.txt; then
            echo "failed"
            exit 1
          fi

      # Post the plan output in the PR
      # The plan output is posted in a comment in the PR
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        name: Post Plan on PR
        id: comment
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('${{ steps.directory.outputs.dir }}/plan_output_multiline.txt', 'utf8');
            const status = '${{ steps.plan.outcome }}'
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(`Terraform Plan ('${{ steps.directory.outputs.dir }}')`)
            })
            const commentBody = `#### 📖 Terraform Plan ('${{ steps.directory.outputs.dir }}') - ${status}
            <details>
            <summary>Terraform Plan</summary>

            \`\`\`hcl
            ${output}
            \`\`\`

            </details>
            `;
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              })
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
              issue_number: context.issue.number
            })


      # Fail the workflow if the Terraform plan failed
      - name: Check Terraform Plan Result
        if: always() && steps.plan.outcome != 'success'
        run: |
          exit 1
