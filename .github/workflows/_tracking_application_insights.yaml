name: Tracking Application Insights

on:
  push:
    branches:
      - CES-1118-tracciare-package-manager-su-app-insights-via-workflow
  workflow_dispatch:
    inputs:
      use_otel:
        description: "Use OTEL SDK"
        required: false
        default: "true"
        type: string

jobs:
  tracker:
    runs-on: "ubuntu-latest"

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Node Setup
        uses: pagopa/dx/.github/actions/node-setup@CES-1118-tracciare-package-manager-su-app-insights-via-workflow

      - name: Install dependencies
        run: pnpm install

      - name: Setup Telemetry Session
        uses: pagopa/dx/actions/setup-telemetry@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
        with:
          connection_string: ${{ secrets.APPI_CONNECTION_STRING }}

      - name: Open a child span for random work
        uses: pagopa/dx/actions/log-telemetry-event@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
        with:
          name: Random work
          span_phase: start

      - name: Do random work and collect output
        shell: bash
        run: |
          FILE_COUNT=$(ls -1 | wc -l)
          echo "WORK_RESULT=$FILE_COUNT" >> $GITHUB_ENV
          echo "Computed result: $FILE_COUNT"
          sleep 5s

      - name: end a child span for random work
        uses: pagopa/dx/actions/log-telemetry-event@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
        with:
          name: Random work
          span_phase: end

      - name: Log collected result as telemetry event
        uses: pagopa/dx/actions/log-telemetry-event@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
        with:
          name: Number of Items
          body: ${{ env.WORK_RESULT }}

      # - name: Log sample exception
      #   uses: pagopa/dx/actions/log-telemetry-event@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
      #   with:
      #     name: SampleError
      #     body: "Simulated failure for telemetry"
      #     is_exception: "true"

      # - name: Track event via Classic SDK
      #   uses: actions/github-script@v8
      #   if: ${{ inputs.use_otel == 'false' }}
      #   with:
      #     script: |
      #       const appInsights = require("applicationinsights");
      #       appInsights.setup(process.env.APPINSIGHTS_CONNECTION_STRING)
      #         .setAutoCollectConsole(false)
      #         .setAutoCollectExceptions(false)
      #         .setAutoCollectDependencies(false)
      #         .setAutoCollectRequests(false)
      #         .start();

      #       const client = appInsights.defaultClient;
      #       client.trackEvent({ name: "WorkflowStarted" });

      #       console.log("Tracking event via JS");

      #       //useAzureMonitor();

      #       //console.log("Azure monitor setup");

      #       // const meter =  metrics.getMeter("testMeter");
      #       // let counter = meter.createCounter("counter");
      #       // counter.add(1, { "testKey": "testValue" });

      #       // console.log("exception threw");

      #       // const openTelemetry = ApplicationInsights(
      #       // {
      #       //   azureMonitorExporterOptions: {
      #       //     connectionString: ${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }},
      #       //   }
      #       // });

      #       // const appInsights = new ApplicationInsights({ config: {
      #       //   connectionString: '${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }}',
      #       //   /* ...Other Configuration Options... */
      #       // } });
      #       // appInsights.loadAppInsights();

      #       // appInsights.trackEvent({ name: 'Open Telemtry', properties: { customProperty: 'custom property value' } });
      #       // appInsights.flush();

      # - name: Track event via REST API
      #   if: false
      #   run: |
      #     echo "logging event to AI"

      #     curl -X POST ${INGESTION_ENDPOINT}/v2/track \
      #       -H "Content-Type: application/json" \
      #       -d '[
      #         {
      #           "ver": 1,
      #           "name": ""Microsoft.ApplicationInsights.Metric",
      #           "time": "'$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'",
      #           "sampleRate": 100,
      #           "iKey": "${{ env.INSTRUMENTATION_KEY }}",
      #           "data": {
      #             "baseType": "EventData",
      #             "baseData": {
      #               "ver": 2,
      #               "name": "Workflow completed",
      #               "duration": "00.00:00:10",
      #               "message": "Sample workflow Result",
      #               "properties": {
      #                 "job": "build",
      #                 "status": "success"
      #               }
      #             }
      #           }
      #         }
      #       ]'
