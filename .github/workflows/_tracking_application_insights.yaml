name: Tracking Application Insights

on:
  push:
    branches:
      - CES-1118-tracciare-package-manager-su-app-insights-via-workflow
  workflow_dispatch:
    inputs:
      use_otel:
        description: "Use OTEL SDK"
        required: false
        default: "true"
        type: string

jobs:
  tracker:
    runs-on: "ubuntu-latest"
    env:
      RESOURCE_GROUP_NAME: "dx-d-itn-common-rg-01"
      INGESTION_ENDPOINT: ${{secrets.INGESTION_ENDPOINT}}
      INSTRUMENTATION_KEY: ${{secrets.INSTRUMENTATION_KEY}}
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${{secrets.APPI_CONNECTION_STRING}}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: .node-version

      - name: Install Application Insights Classic SDK
        if: ${{ inputs.use_otel == 'false' }}
        run: |
          npm i --save applicationinsights

      - name: Install Application Insights OpenTelemetry SDK
        if: false
        uses: pagopa/dx/actions/install-application-insights-otel-sdk@CES-1118-tracciare-package-manager-su-app-insights-via-workflow

      - name: Setup Telemetry Session
        uses: pagopa/dx/actions/setup-telemetry@CES-1118-tracciare-package-manager-su-app-insights-via-workflow

      - name: Do random work and collect output
        run: |
          FILE_COUNT=$(ls -1 | wc -l)
          echo "WORK_RESULT=$FILE_COUNT" >> $GITHUB_ENV
          echo "Computed result: $FILE_COUNT"

      - name: Do random work (again) and collect output
        run: |
          echo "WORK_RESULT_2=bucket" >> $GITHUB_ENV

      - name: Log collected result as telemetry event
        uses: pagopa/dx/actions/log-telemetry-event@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
        with:
          name: WorkflowResult
          body: ${{ env.WORK_RESULT }}
          source: synthetic-test

      - name: Log collected result (again) as telemetry event
        uses: pagopa/dx/actions/log-telemetry-event@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
        with:
          name: WorkflowResult
          body: ${{ env.WORK_RESULT_2 }}
          source: synthetic-test

      - name: Log sample exception
        uses: pagopa/dx/actions/log-telemetry-event@CES-1118-tracciare-package-manager-su-app-insights-via-workflow
        with:
          name: SampleError
          body: "Simulated failure for telemetry"
          source: synthetic-test
          is_exception: "true"

      # - name: Track event via OpenTelemetry SDK
      #   uses: actions/github-script@v8
      #   if: ${{ inputs.use_otel == 'true' }}
      #   with:
      #     script: |
      #       const { useAzureMonitor, AzureMonitorOpenTelemetryOptions } = require("@azure/monitor-opentelemetry");

      #       // Rename 'context' to avoid clashing with the GitHub Actions runtime 'context' variable
      #       const { metrics, trace, context: otelContext } = require("@opentelemetry/api");
      #       const { logs } = require("@opentelemetry/api-logs");

      #       const { resourceFromAttributes } = require("@opentelemetry/resources");
      #       const { SemanticResourceAttributes } = require("@opentelemetry/semantic-conventions");

      #       // Set Cloud Role Name and Instance
      #       const customResource = resourceFromAttributes({
      #         [SemanticResourceAttributes.SERVICE_NAME]: process.env.GITHUB_ACTION,
      #         [SemanticResourceAttributes.SERVICE_NAMESPACE]: "dx",
      #         //[SemanticResourceAttributes.SERVICE_INSTANCE_ID]: "my-instance",
      #         [SemanticResourceAttributes.ENDUSER_ID]: process.env.GITHUB_ACTOR,
      #       });

      #       const options = {
      #         resource: customResource,
      #         azureMonitorExporterOptions: {
      #           connectionString: process.env.APPLICATIONINSIGHTS_CONNECTION_STRING
      #         },
      #         enableLiveMetrics: true
      #       };

      #       useAzureMonitor(options);

      #       const tracer = trace.getTracer("workflow-tracer");
      #       const span = tracer.startSpan("workflow-run", {
      #         attributes: {
      #           "workflow.name": process.env.GITHUB_ACTION,
      #           "workflow.run_id": process.env.GITHUB_RUN_ID,
      #           "workflow.repo": process.env.GITHUB_ACTION_REPOSITORY
      #         }
      #       });

      #       const logger = logs.getLoggerProvider().getLogger("workflow-logger", "1.0.0");

      #       otelContext.with(trace.setSpan(otelContext.active(), span), () => {
      #         const meter =  metrics.getMeter("testMeter");
      #         let histogram = meter.createHistogram("histogram");
      #         histogram.record(1, { "testKey": "testValue" });

      #         logger.emit({
      #           body: 'Hello World!',
      #           attributes: {
      #             "microsoft.custom_event.name": "test-event-name",
      #             "additional_attrs": "val1"
      #           },
      #         });

      #         logger.emit({
      #           body: 'Hello World!',
      #           attributes: {
      #             "microsoft.custom_event.name": "test-event-name 2",
      #             "additional_attrs": "val2"
      #           },
      #         });
      #       });

      #       span.end();

      # - name: Track event via Classic SDK
      #   uses: actions/github-script@v8
      #   if: ${{ inputs.use_otel == 'false' }}
      #   with:
      #     script: |
      #       const appInsights = require("applicationinsights");
      #       appInsights.setup(process.env.APPINSIGHTS_CONNECTION_STRING)
      #         .setAutoCollectConsole(false)
      #         .setAutoCollectExceptions(false)
      #         .setAutoCollectDependencies(false)
      #         .setAutoCollectRequests(false)
      #         .start();

      #       const client = appInsights.defaultClient;
      #       client.trackEvent({ name: "WorkflowStarted" });

      #       console.log("Tracking event via JS");

      #       //useAzureMonitor();

      #       //console.log("Azure monitor setup");

      #       // const meter =  metrics.getMeter("testMeter");
      #       // let counter = meter.createCounter("counter");
      #       // counter.add(1, { "testKey": "testValue" });

      #       // console.log("exception threw");

      #       // const openTelemetry = ApplicationInsights(
      #       // {
      #       //   azureMonitorExporterOptions: {
      #       //     connectionString: ${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }},
      #       //   }
      #       // });

      #       // const appInsights = new ApplicationInsights({ config: {
      #       //   connectionString: '${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }}',
      #       //   /* ...Other Configuration Options... */
      #       // } });
      #       // appInsights.loadAppInsights();

      #       // appInsights.trackEvent({ name: 'Open Telemtry', properties: { customProperty: 'custom property value' } });
      #       // appInsights.flush();

      # - name: Track event via REST API
      #   if: false
      #   run: |
      #     echo "logging event to AI"

      #     curl -X POST ${INGESTION_ENDPOINT}/v2/track \
      #       -H "Content-Type: application/json" \
      #       -d '[
      #         {
      #           "ver": 1,
      #           "name": ""Microsoft.ApplicationInsights.Metric",
      #           "time": "'$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'",
      #           "sampleRate": 100,
      #           "iKey": "${{ env.INSTRUMENTATION_KEY }}",
      #           "data": {
      #             "baseType": "EventData",
      #             "baseData": {
      #               "ver": 2,
      #               "name": "Workflow completed",
      #               "duration": "00.00:00:10",
      #               "message": "Sample workflow Result",
      #               "properties": {
      #                 "job": "build",
      #                 "status": "success"
      #               }
      #             }
      #           }
      #         }
      #       ]'
