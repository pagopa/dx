name: Tracking Application Insights

on:
  workflow_dispatch:

jobs:
  tracker:
    runs-on: "ubuntu-latest"
    env:
      RESOURCE_GROUP_NAME: "dx-d-itn-common-rg-01"
      INGESTION_ENDPOINT: "https://italynorth-0.in.applicationinsights.azure.com/"
      INSTRUMENTATION_KEY: "9c95698f-d74e-4046-a555-ea5f632c307e"
      APPLICATIONINSIGHTS_CONNECTION_STRING: "InstrumentationKey=9c95698f-d74e-4046-a555-ea5f632c307e;IngestionEndpoint=https://italynorth-0.in.applicationinsights.azure.com/;LiveEndpoint=https://italynorth.livediagnostics.monitor.azure.com/;ApplicationId=c6f1af09-fbb3-4770-bf6d-cdaf821d2699"

    steps:
      # - name: Checkout
      #   uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.7

      # - name: Configure AZ CLI
      #   run: |
      #     az config set extension.use_dynamic_install=yes_without_prompt
      #     az configure --defaults group="$RESOURCE_GROUP_NAME"

      - name: Node Setup
        uses: actions/setup-node@v5
        with:
          node-version: 24

      - name: Install SDK
        run: |
          npm i --save @azure/monitor-opentelemetry @opentelemetry/api
          npm i --save applicationinsights

      - name: Track event via JS
        uses: actions/github-script@v8
        with:
          script: |
            // const { useAzureMonitor } = require("@azure/monitor-opentelemetry");
            //const { trace } = require("@opentelemetry/api");
            //const { SemanticAttributes } = require("@opentelemetry/semantic-conventions");
            const appInsights = require("applicationinsights");
            appInsights.setup(process.env.APPINSIGHTS_CONNECTION_STRING)
              .setAutoCollectConsole(false)
              .setAutoCollectExceptions(false)
              .setAutoCollectDependencies(false)
              .setAutoCollectRequests(false)
              .start();

            const client = appInsights.defaultClient;
            client.trackEvent({ name: "WorkflowStarted" });

            console.log("Tracking event via JS");

            //useAzureMonitor();

            //console.log("Azure monitor setup");

            // const meter =  metrics.getMeter("testMeter");
            // let counter = meter.createCounter("counter");
            // counter.add(1, { "testKey": "testValue" });

            // console.log("exception threw");

            // const openTelemetry = ApplicationInsights(
            // {
            //   azureMonitorExporterOptions: {
            //     connectionString: ${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }},
            //   }
            // });

            // const appInsights = new ApplicationInsights({ config: {
            //   connectionString: '${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }}',
            //   /* ...Other Configuration Options... */
            // } });
            // appInsights.loadAppInsights();

            // appInsights.trackEvent({ name: 'Open Telemtry', properties: { customProperty: 'custom property value' } });
            // appInsights.flush();

      - name: Track event
        run: |
          echo "logging event to AI"

          curl -X POST ${INGESTION_ENDPOINT}/v2/track \
            -H "Content-Type: application/json" \
            -d '[
              {
                "ver": 1,
                "name": ""Microsoft.ApplicationInsights.Metric",
                "time": "'$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'",
                "sampleRate": 100,
                "iKey": "${{ env.INSTRUMENTATION_KEY }}",
                "data": {
                  "baseType": "EventData",
                  "baseData": {
                    "ver": 2,
                    "name": "Workflow completed",
                    "duration": "00.00:00:10",
                    "message": "Sample workflow Result",
                    "properties": {
                      "job": "build",
                      "status": "success"
                    }
                  }
                }
              }
            ]'
