name: Static Analysis - TF Validation

on:
  workflow_call:
    inputs:
      terraform_version:
        description: Terraform version to use. If not set, it is automatically retrieved from .terraform-version file.
        type: string
        required: false
      pre_commit_tf_tag:
        description: |
          Pre-commit Terraform TAG to use,
          is release tag + package digest (Ref. Digest https://github.com/antonbabenko/pre-commit-terraform/pkgs/container/pre-commit-terraform)
          Example: vX.Y.Z@sha256:000...N
        type: string
        required: false
      enable_modified_files_detection:
        description: If true, the pipeline will run pre-commit on modified files only.
        type: boolean
        required: false
        default: false
      check_to_run:
        description: If set, it runs only the specified pre-commit hook check. Otherwise, all checks are run.
        type: string
        required: false
      folder:
        description: If set, it runs the pre-commit on a single folder. Otherwise, it is run on all files.
        type: string
        required: false
      verbose:
        description: If enabled, it prints the verbose logging of pre-commit checks
        type: boolean
        required: false
      fail_on_error:
        description: If true, the workflow will fail if pre-commit checks fail
        type: boolean
        required: false
        default: true

concurrency:
  group: tf-static-analysis-${{ github.head_ref }}-${{inputs.folder || 'all-files'}}-${{ inputs.check_to_run || 'all-checks' }}
  cancel-in-progress: true

jobs:
  get-versions:
    name: Get Terraform and pre-commit Version
    runs-on: ubuntu-latest
    if: ${{ inputs.terraform_version == '' || inputs.pre_commit_tf_tag == '' }}
    outputs:
      terraform_version: ${{ steps.get-terraform-version.outputs.terraform_version }}
      pre_commit_terraform_version: ${{ steps.get-pre-commit-version.outputs.pre_commit_terraform_version }}
      pre_commit_terraform_image_tag: ${{ steps.get-pre-commit-version.outputs.pre_commit_terraform_image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.7

      - name: Get terraform version from .terraform-version file
        id: get-terraform-version
        if: ${{ inputs.terraform_version == '' }}
        uses: pagopa/dx/.github/actions/get-terraform-version@main
        with:
          default_version: "1.10.4"

      - name: Get pre-commit version from .pre-commit-config file
        id: get-pre-commit-version
        if: ${{ inputs.pre_commit_tf_tag == '' }}
        uses: pagopa/dx/.github/actions/get-pre-commit-version@main
        with:
          default_version: "1.96.2"

  tf_analysis:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: [ get-versions ]
    # Ensures execution even if get-versions is skipped
    if: ${{ always() }}
    env:
      TERRAFORM_VERSION: ${{ inputs.terraform_version || needs.get-versions.outputs.terraform_version }}
    container:
      image: ghcr.io/antonbabenko/pre-commit-terraform:${{ inputs.pre_commit_tf_tag || needs.get-versions.outputs.pre_commit_terraform_image_tag }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Git config
        run: |
          set -eu

          git config --global --add safe.directory $GITHUB_WORKSPACE
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*

      - name: Fix Alpine Container Image
        run: |
          apk --no-cache add tar
          python -m pip freeze --local


      - name: Run pre-commit on specific folders
        if: ${{ inputs.folder != '' }}
        id: pre_commit_specific_folders
        env:
          PRE_COMMIT_VERBOSE: ${{ inputs.verbose && '1' || '0' }}
          LOCK_MODULES_JSON_OUTPUT_FILE: "lock_output.json"
        run: |
          set +e  # Continue execution even if pre-commit fails

          echo "Start pre-commit on specific folder ${{ inputs.folder }}"

          find "${{ inputs.folder }}" -type f | xargs pre-commit run \
            --color=always \
            --show-diff-on-failure \
            ${{ inputs.check_to_run }} \
            --files 2>&1 | tee /tmp/pre-commit-output.log

          PRE_COMMIT_EXIT_CODE=${PIPESTATUS[0]}
          echo "PRE_COMMIT_EXIT_CODE=$PRE_COMMIT_EXIT_CODE" >> $GITHUB_ENV

          if [[ $PRE_COMMIT_EXIT_CODE -ne 0 && "${{ inputs.fail_on_error }}" == "true" ]]; then
            exit $PRE_COMMIT_EXIT_CODE
          fi

      - name: Run pre-commit on Modified Files
        if: ${{ inputs.folder == '' && github.event_name == 'pull_request' && inputs.enable_modified_files_detection }}
        id: pre_commit_modified_files
        env:
          PRE_COMMIT_VERBOSE: ${{ inputs.verbose && '1' || '0' }}
          LOCK_MODULES_JSON_OUTPUT_FILE: "lock_output.json"
        run: |
          set +e  # Continue execution even if pre-commit fails

          echo "Start pre-commit only on modified files"
          echo "- FROM  Base ref: origin/${{ github.event.pull_request.base.ref }}"
          echo "- TO    Head ref: origin/${{ github.event.pull_request.head.ref }}"

          pre-commit run \
            --color=always \
            --show-diff-on-failure \
            --from-ref origin/${{ github.event.pull_request.base.ref }} \
            --to-ref origin/${{ github.event.pull_request.head.ref }} \
            ${{ inputs.check_to_run }} 2>&1 | tee /tmp/pre-commit-output.log

          PRE_COMMIT_EXIT_CODE=${PIPESTATUS[0]}
          echo "PRE_COMMIT_EXIT_CODE=$PRE_COMMIT_EXIT_CODE" >> $GITHUB_ENV

          if [[ $PRE_COMMIT_EXIT_CODE -ne 0 && "${{ inputs.fail_on_error }}" == "true" ]]; then
            exit $PRE_COMMIT_EXIT_CODE
          fi

      - name: Run pre-commit
        if: ${{ inputs.folder == '' && (!github.event_name == 'pull_request' || !inputs.enable_modified_files_detection) }}
        id: pre_commit
        env:
          PRE_COMMIT_VERBOSE: ${{ inputs.verbose && '1' || '0' }}
          LOCK_MODULES_JSON_OUTPUT_FILE: "lock_output.json"
        run: |
          set +e  # Continue execution even if pre-commit fails

          echo "Start pre-commit on all files"

          pre-commit run \
            --color=always \
            --show-diff-on-failure \
            --all-files \
            ${{ inputs.check_to_run }} 2>&1 | tee /tmp/pre-commit-output.log

          PRE_COMMIT_EXIT_CODE=${PIPESTATUS[0]}
          echo "PRE_COMMIT_EXIT_CODE=$PRE_COMMIT_EXIT_CODE" >> $GITHUB_ENV

          if [[ $PRE_COMMIT_EXIT_CODE -ne 0 && "${{ inputs.fail_on_error }}" == "true" ]]; then
            exit $PRE_COMMIT_EXIT_CODE
          fi

      - name: Summarize pre-commit results
        if: always()
        id: summary
        shell: bash
        env:
          FOLDER: ${{ inputs.folder }}
          EVENT_NAME: ${{ github.event_name }}
          ENABLE_MODIFIED_FILES_DETECTION: ${{ inputs.enable_modified_files_detection }}
          CHECK_TO_RUN: ${{ inputs.check_to_run }}
        run: |
          # Create a temporary file for the summary
          SUMMARY_FILE=$(mktemp)

          # Utility functions to add content to both summary and temporary file
          add_to_summary() { echo "$1" >> "$GITHUB_STEP_SUMMARY"; echo "$1" >> "$SUMMARY_FILE"; }
          add_markdown() { for line in "$@"; do add_to_summary "$line"; done; }

          # Terraform modules handling
          if [ -f "lock_output.json" ]; then
            # Extract module statistics with fallback to 0
            TOTAL_MODULES=$(jq -r '.summary.total_modules // 0' lock_output.json 2>/dev/null || echo "0")

            if [ "$TOTAL_MODULES" -gt 0 ]; then
              # Add change warning
              add_markdown \
                "> [!CAUTION]" \
                "> ### ⚠️ Terraform module changes detected - locks need updating" \
                ">" \
                "> ### What should be done next" \
                ">" \
                "> 1. Run this command locally to update the module locks:" \
                ">" \
                "> \`\`\`bash" \
                "> pre-commit run -a lock_modules" \
                "> \`\`\`" \
                ">" \
                "> 2. Then open a dedicated Pull Request with the updated module locks" \
                ""

              # Change details
              add_markdown \
                "<details>" \
                "<summary>📊 What has changed</summary>" \
                "" \
                "### Module Stats:"

              # Calculate and show statistics
              for status in "new" "changed" "removed"; do
                count=$(jq -r "[.results[]? | select(.status == \"$status\")] | length" lock_output.json 2>/dev/null || echo "0")
                add_to_summary "- **${status^} modules**: $count"
              done

              # Modules table
              add_markdown \
                "" \
                "| Module | Status | Version | Path |" \
                "|--------|--------|---------|------|"

              # Add module details or show error
              jq -r '.results[] | "| " + .module + " | " + .status + " | " + .version + " | " + (.path // "N/A") + " |"' lock_output.json >> "$GITHUB_STEP_SUMMARY" >> "$SUMMARY_FILE" || {
                add_markdown \
                  "Error processing JSON file. Raw content:" \
                  "\`\`\`json"
                cat lock_output.json >> "$GITHUB_STEP_SUMMARY" >> "$SUMMARY_FILE"
                add_to_summary "\`\`\`"
              }
              add_to_summary "</details>"
            else
              add_markdown \
                "> [!TIP]" \
                "> ### ✅ All Terraform module locks are up to date" \
                ">" \
                "> No module changes detected - everything is in sync!" \
                ""
            fi
            add_to_summary ""
          fi

          # Pre-commit output
          if [ -f "/tmp/pre-commit-output.log" ]; then
            # Determine execution context
            EXECUTION_SCOPE="all files"
            [ -n "$FOLDER" ] && EXECUTION_SCOPE="folder: \`$FOLDER\`"
            [ "$EVENT_NAME" == "pull_request" ] && [ "$ENABLE_MODIFIED_FILES_DETECTION" == "true" ] && EXECUTION_SCOPE="modified files"

            # Show output log
            add_markdown \
              "<details>" \
              "<summary>📋 Pre-commit Output Log</summary>" \
              "" \
              "\`\`\`"
            sed 's/\x1b\[[0-9;]*m//g' /tmp/pre-commit-output.log >> "$GITHUB_STEP_SUMMARY" >> "$SUMMARY_FILE"
            add_markdown "\`\`\`" "</details>"
          else
            add_to_summary "⚠️ No pre-commit output found. Check if pre-commit was executed."
          fi

          # Final summary
          CHECK_INFO="${CHECK_TO_RUN:-all checks}"
          add_markdown \
            "" \
            "<sub>Generated on $(date)</br>Run ${CHECK_INFO} on ${EXECUTION_SCOPE}</sub>"

          # Set the summary as output
          SUMMARY_CONTENT=$(cat "$SUMMARY_FILE")
          # Properly escape the content for GitHub Actions multiline output
          SUMMARY_CONTENT="${SUMMARY_CONTENT//'%'/'%25'}"
          SUMMARY_CONTENT="${SUMMARY_CONTENT//$'\n'/'%0A'}"
          SUMMARY_CONTENT="${SUMMARY_CONTENT//$'\r'/'%0D'}"
          echo "summary=$SUMMARY_CONTENT" >> "$GITHUB_OUTPUT"

          # Clean up
          rm "$SUMMARY_FILE"

      - name: Post Summary on PR
        if: always() && github.event_name == 'pull_request'
        uses: pagopa/dx/.github/actions/pr-comment@package-pr-comments-action
        with:
          comment-body: |
            ### Pre-commit Check Results
            ${{ steps.summary.outputs.summary }}
          search-pattern: "Pre-commit Check Results"
