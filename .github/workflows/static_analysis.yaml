# This pipeline assumes the presence of a .pre-commit-config.yaml file at
# the top level of the repository, which contains Terraform validation tasks.
# For more details, refer to the pre-commit configuration file:
# https://github.com/pagopa/dx/blob/main/.pre-commit-config.yaml.
name: Static Analysis - TF Validation

on:
  workflow_call:
    inputs:
      terraform_version:
        description: Terraform version to use
        type: string
        required: false
        default: "1.7.5"
      pre_commit_tf_tag:
        description: |
          Pre-commit Terraform TAG to use, 
          is release tag + package digest (Ref. Digest https://github.com/antonbabenko/pre-commit-terraform/pkgs/container/pre-commit-terraform)
          Example: vX.Y.Z@sha256:000...N
        type: string
        required: false
        default: "v1.94.1@sha256:638e8892cb2647240c175064254c2fda80214597275c81a360a878dc80323076"
      enable_modified_files_detection:
        description: If true the pipeline will run pre-commit on modified files only
        type: boolean
        required: false
        default: false
      enable_terraform_test:
        description: If true the pipeline will run terraform test
        type: boolean
        required: false
        default: false

concurrency:
  group: tf-static-analysis-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  tf_analysis:
    name: Terraform Validation
    runs-on: ubuntu-20.04
    env:
      TERRAFORM_VERSION: ${{ inputs.terraform_version }}
    container:
      image: ghcr.io/antonbabenko/pre-commit-terraform:${{ inputs.pre_commit_tf_tag }}
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      # https://github.com/antonbabenko/pre-commit-terraform#github-actions
      - name: Git config
        run: |
          set -eu

          git config --global --add safe.directory $GITHUB_WORKSPACE
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*

      - name: Fix Alpine Container Image
        run: |
          apk --no-cache add tar
          # check python modules installed versions
          python -m pip freeze --local

      - name: Run pre-commit on Modified Files
        if: ${{ github.event_name == 'pull_request' && inputs.enable_modified_files_detection }}
        run: |
          set -eu

          echo "Start pre-commit only on modified files"
          echo "- FROM  Base ref: origin/${{ github.event.pull_request.base.ref }}"
          echo "- TO    Head ref: origin/${{ github.event.pull_request.head.ref }}"

          pre-commit run \
            --color=always \
            --show-diff-on-failure \
            --from-ref origin/${{ github.event.pull_request.base.ref }} \
            --to-ref origin/${{ github.event.pull_request.head.ref }}

      - name: Run pre-commit
        if: ${{ github.event_name != 'pull_request' || !inputs.enable_modified_files_detection }}
        id: pre_commit
        run: |
          set -eu

          echo "Start pre-commit on all files"

          pre-commit run \
            --color=always \
            --all-files
      
      - name: Run Terraform Test
        if: ${{ inputs.enable_terraform_test }}
        run: |
          # Found modified modules
          git diff --name-only main...HEAD
          modified_modules=$(git diff --name-only main...HEAD | grep "^infra/modules/" | cut -d '/' -f 1,2 | sort -u)
          echo "Modified modules: $modified_modules"
          
          if [[ -z "$modified_modules" ]]; then
            echo "No modules have changes"
            exit 0
          fi

          # Use Terraform test on each module with changes
          # for module in $modified_modules; do
          #   echo "Exec terraform test in: $module"
          #   (cd "$module" && terraform test)
          # done
