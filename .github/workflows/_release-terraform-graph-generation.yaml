name: Generate Mermaid Diagrams for Terraform modules

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - '**/graph.dot'
  workflow_dispatch:
    inputs:
      dot_path:
        description: "Path to the .dot file to convert"
        default: ""
        required: false

jobs:
  find-changed-dots:
    name: Find Changed .dot Files
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Find changed .dot files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        with:
          files: '**/graph.dot'
          base_sha: ${{ github.event_name == 'workflow_dispatch' && 'main' || '' }}
          sha: ${{ github.event_name == 'workflow_dispatch' && github.ref_name || '' }}
          matrix: true
      
      - name: List changed files
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"

  dot-to-mermaid:
    needs: find-changed-dots
    if: ${{ needs.find-changed-dots.outputs.changed_files != '[]' && needs.find-changed-dots.outputs.changed_files != '' }}
    name: Convert DOT to Mermaid
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    strategy:
      matrix:
        dot_file: ${{ github.event.inputs.dot_path == '' && fromJson(needs.find-changed-dots.outputs.changed_files) || inputs.dot_path }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.head_ref }}

      - name: Generate Prompt for ${{ matrix.dot_file }}
        id: generate_prompt
        run: |
          PROMPT_FILE="prompt-$(echo "${{ matrix.dot_file }}" | tr '/' '-').txt"
          
          cat > "$PROMPT_FILE" <<EOF
          You are an expert in converting Terraform-generated Graphviz DOT diagrams into clear, human-friendly Mermaid diagrams.

          Requirements:
          0. **Wrap the entire output** inside a Markdown code fence with `mermaid`, exactly like this:
          \`\`\`mermaid
          …the entire diagram…
          \`\`\`
          1. **Output only valid Mermaid syntax** (no prose).
          2. **Orientation**: Use \`graph LR\` (left-to-right).
          3. **Subgraphs**: Group nodes into logical clusters with meaningful titles. Each subgraph block must be in the form:
            subgraph Group Title
              NodeA[“Label A”]
              NodeB[“Label B”]
            end
          4. **Naming**:  
            - Strip Terraform resource prefixes (\`azurerm_\`, \`data.\`) and use title-case labels (e.g. \`Key Vault Certificate\`, \`API Management Service\`).  
            - For DNS entries, include both zone and record type (\`A Record - apim.azure-api.net\`) if present.
          5. **Connections**:  
            - Draw arrows only once per relationship.  
            - Label edges only if it adds clarity (otherwise omit labels).
          6. **Clean Up**:  
            - Remove any standalone “management lock” or “diagnostic” nodes that don’t have outgoing or incoming edges—unless they’re essential.  
            - Collapse any trivial one-node subgraphs into their parent group.

          Here is the original DOT code:
          \`\`\`dot
          $(cat ./${{ matrix.dot_file }})
          \`\`\`
          EOF

          echo "Prompt file created at $PROMPT_FILE"
          echo "prompt_path=$PROMPT_FILE" >> $GITHUB_OUTPUT

      - name: Prepare JSON Payload
        id: prepare_json
        run: |
          JSON_FILE="payload-$(echo "${{ matrix.dot_file }}" | tr '/' '-').json"
          jq -n \
            --arg content "$(cat ${{ steps.generate_prompt.outputs.prompt_path }})" \
            '{
              "messages": [
                {
                  "role": "user",
                  "content": $content
                }
              ],
              "max_completion_tokens": 100000,
              "model": "o4-mini"
            }' > "$JSON_FILE"

          echo "JSON payload created at $JSON_FILE"
          echo "json_payload_path=$JSON_FILE" >> $GITHUB_OUTPUT

      - name: Run AI call API for ${{ matrix.dot_file }}
        id: ai_call
        env:
          AZURE_API_KEY: ${{ secrets.AZURE_AI_API_KEY }}
        run: |
          RESPONSE_FILE="response-$(echo "${{ matrix.dot_file }}" | tr '/' '-').json"
          DOT_DIR=$(dirname "${{ matrix.dot_file }}")
          ENCODED_NAME=$(echo "$DOT_DIR" | tr '/' '-')
          MD_FILE_PATH="${ENCODED_NAME}.md"

          # curl -s -X POST "https://dx-d-sdc-test-aif-01.cognitiveservices.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2025-01-01-preview" \
          #   -H "Content-Type: application/json" \
          #   -H "Authorization: Bearer $AZURE_API_KEY" \
          #   -d @${{ steps.prepare_json.outputs.json_payload_path }} \
          #   -o "$RESPONSE_FILE"

          # jq -r '.choices[0].message.content' "$RESPONSE_FILE" > "$MD_FILE_PATH"

          cat > $MD_FILE_PATH <<'EOF'
          ```mermaid
          graph LR
            subgraph Key Vault
              KVPolicy["Key Vault Access Policy"]
              ClientConfig["Client Config"]
              CertRA["Role Assignment - Certificates"]
              KeyRA["Role Assignment - Keys"]
              SecretRA["Role Assignment - Secrets"]
            end

            subgraph Service Bus
              SBQueuesRA["Role Assignment - Queues"]
              SBSubsRA["Role Assignment - Subscriptions"]
              SBTopicsRA["Role Assignment - Topics"]
            end

            subgraph Storage Account
              SA_Blob_RA["Role Assignment - Blob"]
              SA_Queue_RA["Role Assignment - Queue"]
              SA_Table_RA["Role Assignment - Table"]
            end

            APIM_RA["Role Assignment"]
            CosmosDBSQL_RA["Cosmos DB SQL Role Assignment"]
            EventHub_RA["Role Assignment"]
            RedisPolicy["Redis Cache Access Policy Assignment"]

            KVPolicy --> ClientConfig
          ```
          EOF

          echo "Mermaid file created at: $MD_FILE_PATH"
          echo "md_file_path=$MD_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          bundle_name: diagram-${{ strategy.job-index }}
          file_path: ${{ steps.ai_call.outputs.md_file_path }}

  commit-changes:
    runs-on: ubuntu-latest
    needs: dot-to-mermaid
    name: Commit Mermaid Diagrams
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.head_ref }}

      - name: Node Setup
        id: node-setup
        uses: pagopa/dx/.github/actions/node-setup@main
      
      - name: Install mermaid-cli
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Download generated diagrams
        uses: pagopa/dx/.github/actions/download-artifact@feat-add-graph-generation # main
        with:
          file_path: downloaded-artifacts

      - name: Organize downloaded files
        run: |
          echo "Organizing downloaded files..."
          for filepath in downloaded-artifacts/*/*.md; do
            if [ -f "$filepath" ]; then
              filename=$(basename "$filepath")
              dir_encoded_name="${filename%.md}"
              dest_dir=$(echo "$dir_encoded_name" | tr '-' '/')
              readme_file="$dest_dir/README.md"
              graph_file="$dest_dir/graph.md"
              
              # Move the .md file to the correct directory
              mv "$filepath" "$graph_file"
              echo "Moved $filename to $graph_file"

              # Check if README.md exists in the destination directory
              echo "Processing $filename for $readme_file"
              if [ ! -f "$readme_file" ]; then
                echo "Skipping: README.md not found at $readme_file"
                continue
              fi
              if ! grep -q "<!-- START_TF_GRAPH -->" "$readme_file"; then
                echo "Skipping: Start tag not found in $readme_file"
                continue
              fi
              if ! grep -q "<!-- END_TF_GRAPH -->" "$readme_file"; then
                echo "Skipping: End tag not found in $readme_file"
                continue
              fi

              # Inject Mermaid in README.md (replace existing block)
              awk -v f="$graph_file" '
                BEGIN {
                  while ((getline line < f) > 0) graph = graph line "\n"
                }
                /<!-- START_TF_GRAPH -->/ { print; print graph; skip=1; next }
                /<!-- END_TF_GRAPH -->/ { skip=0 }
                !skip
              ' "$readme_file" > "$readme_file.tmp" && mv "$readme_file.tmp" "$readme_file"

              echo "✅ Successfully updated $readme_file"
            fi
          done
          echo "Files organized."

      # - name: Commit and push all graph files
      #   uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0 # v6.0.1
      #   with:
      #     commit_message: "docs: ✨ Generate Mermaid diagrams from all .dot files ✨"
      #     file_pattern: '**/README.md **/graph.svg'
      #     commit_user_name: "dx-pagopa-bot"
      #     commit_user_email: "dx-pagopa-github-bot@pagopa.it"
      #     commit_author: "dx-pagopa-bot <dx-pagopa-github-bot@pagopa.it>"

      - name: Convert into SVG - TEST
        uses: pagopa/dx/.github/actions/convert-mermaid-into-svg@feat-add-graph-generation
        with:
          file_path: "infra/modules/azure_role_assignments/README.md"

      - name: Upload Artifact - TEST
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          bundle_name: test-bundle
          file_path: "infra/modules/azure_role_assignments"