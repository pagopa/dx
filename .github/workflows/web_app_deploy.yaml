on:
  workflow_call:
    inputs:
      workspace_name:
        description: The name of the workspace to create the artifact for.
        type: string
        required: true
      environment:
        description: Environment where the artifact will be deployed.
        type: string
        required: true
      resource_group_name:
        description: Web App resource group name.
        type: string
        required: true
      web_app_name:
        description: Web App name.
        type: string
        required: true
      use_staging_slot:
        description: True if artifact should be deployed to staging slot
        type: boolean
        required: false
        default: true
      use_private_agent:
        description: Use a private agent to deploy the built artifact.
        type: boolean
        required: false
        default: true

concurrency:
  group: ${{ github.workflow }}-cd
  cancel-in-progress: true

env:
  BUNDLE_NAME: bundle

jobs:
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ inputs.workspace_name }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Prune
        run: npx turbo@2 prune --scope ${{ env.WORKSPACE }}

      - uses: ./.github/actions/node-setup
        name: Node Setup
        with:
          working_dir: ./out

      - name: Build
        run: yarn build
        working-directory: ./out

      - name: Build the artifact
        id: make-artifact
        env:
          # we fall back to node-moules, even in case pnp is configured, in order to avoid bundling dependendencies
          YARN_NODE_LINKER: node-modules
          YARN_NM_HOISTING_LIMITS: workspaces
        run: |
          set -e

          # determine the entry point file name from package.json main property
          ENTRY_POINT=$(jq -r '.main' package.json)

          if [ -z $ENTRY_POINT ]; then
            echo "::error::invalid target"
            exit 1
          fi

          # generate node_modules folder excluding devDependencies
          yarn workspaces focus --production

          FORMAT=$(jq -r 'if .type == "module" then "esm" else "cjs" end' package.json)
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})

          mkdir ${{ github.run_id }}

          # bundle compiled code, excluding node_modules
          curl -fsSL https://esbuild.github.io/dl/v0.21.5 | sh
          ./esbuild index=$ENTRY_POINT --bundle --format=$FORMAT --platform=node --target=node20 --packages=external --outdir=${{ github.run_id }} --allow-overwrite

          # create a new package.json file, with the updated entry point
          jq --arg sha "+$SHORT_SHA" '{"name": .name, "version": (.version + $sha), "main": "index.js", "type": (if has("type") then .type else "commonjs" end), "dependencies": .dependencies}' package.json > ${{ github.run_id }}/package.json

          DEFAULT_FILES="host.json"
          FILES=$(jq -r --arg default "$DEFAULT_FILES" '(.files // [$default]) | join(" ")' package.json)

          # create the artifact (zip) with node_modules, index.js and package.json
          zip -r $BUNDLE_NAME.zip node_modules $FILES
          zip -ju $BUNDLE_NAME.zip ${{ github.run_id }}/index.js ${{ github.run_id }}/package.json

          echo "artifact-path=$(realpath $BUNDLE_NAME.zip)" >> "$GITHUB_OUTPUT"
        working-directory: ./out/apps/${{ inputs.workspace_name }}

      - name: Upload Artifact
        uses: ./.github/actions/upload-artifact
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}
          file_path: ${{ steps.make-artifact.outputs.artifact-path }}

  deploy:
    name: Deploy
    if: ${{ !github.event.act }}
    needs: [build]
    runs-on: ${{ inputs.use_private_agent == true && 'self-hosted' || 'ubuntu-latest' }}
    environment: ${{ inputs.environment }}-cd
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download Artifact
        uses: ./.github/actions/download-artifact
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}

      - uses: ./.github/actions/azure-login
        name: Azure Login
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy
        if: ${{ inputs.use_staging_slot == false }}
        run: |
          az webapp deploy \
           --resource-group ${{ inputs.resource_group_name }} \
           --name ${{ inputs.web_app_name }} \
           --src-path  ${{ env.BUNDLE_NAME }}.zip \
           --type zip \
           --async false

      - name: Deploy to Staging Slot
        if: ${{ inputs.use_staging_slot == true }}
        run: |
          az webapp deploy \
           --resource-group ${{ inputs.resource_group_name }} \
           --name ${{ inputs.web_app_name }} \
           --slot staging \
           --src-path  ${{ env.BUNDLE_NAME }}.zip \
           --type zip \
           --async false

      - name: Swap Staging and Production Slots
        if: ${{ inputs.use_staging_slot == true }}
        run: |
          az webapp deployment slot swap \
            -g ${{ inputs.resource_group_name }} \
            -n ${{ inputs.web_app_name }} \
            --slot staging \
            --target-slot production
