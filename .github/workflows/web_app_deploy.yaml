on:
  workflow_call:
    inputs:
      workspace_name:
        description: The name of the workspace to create the artifact for.
        type: string
        required: true
      environment:
        description: Environment where the artifact will be deployed.
        type: string
        required: true
      resource_group_name:
        description: Web App resource group name.
        type: string
        required: true
      web_app_name:
        description: Web App name.
        type: string
        required: true
      use_staging_slot:
        description: True if artifact should be deployed to staging slot
        type: boolean
        required: false
        default: true
      use_private_agent:
        description: Use a private agent to deploy the built artifact.
        type: boolean
        required: false
        default: true
      auto_deploy_to_staging:
        description: Enable automatic deployments to the staging slot, bypassing the need for manual approval. If this setting is true, ensure that `use_staging_slot` is also enabled.
        type: boolean
        required: false
        default: false
      use_labels:
        description: Use labels to start the right environment's GitHub runner. If use_labels is true, also use_private_agent must be set to true
        type: boolean
        required: false
        default: false
      override_labels:
        description: Needed for special cases where the environment alone is not sufficient as a distinguishing label
        type: string
        required: false
        default: ""

concurrency:
  group: ${{ github.workflow }}-cd
  cancel-in-progress: true

env:
  BUNDLE_NAME: bundle
  RESOURCE_GROUP_NAME: ${{ inputs.resource_group_name }}
  WEB_APP_NAME: ${{ inputs.web_app_name }}

jobs:
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ inputs.workspace_name }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Prune
        env:
          WORKSPACE: ${{ env.WORKSPACE }}
        run: npx turbo@2 prune --scope "$WORKSPACE"

      - name: Node Setup
        uses: pagopa/dx/.github/actions/node-setup@main
        with:
          working_dir: ./out

      - name: Install dependencies
        run: yarn install --immutable
        working-directory: ./out

      - name: Build
        run: yarn build
        working-directory: ./out

      - name: Build the artifact
        id: make-artifact
        env:
          # we fall back to node-moules, even in case pnp is configured, in order to avoid bundling dependencies
          YARN_NODE_LINKER: node-modules
          YARN_NM_HOISTING_LIMITS: workspaces
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        working-directory: ./out/apps/${{ env.WORKSPACE }}
        run: |
          set -e

          # generate node_modules folder excluding devDependencies
          yarn workspaces focus --production

          if [ -e "next.config.js" ] && grep -q 'output: "standalone"' "next.config.js"; then
            echo "::debug:: the workspace contains a Next.js standalone app"
            mv .next/static .next/standalone/apps/"$WORKSPACE"/.next/
            cd .next/standalone/apps/"$WORKSPACE"
            zip -r "$BUNDLE_NAME".zip .
            echo "artifact-path=$(realpath "$BUNDLE_NAME.zip")" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # determine the entry point file name from package.json main property
          ENTRY_POINT=$(jq -r '.main' package.json)

          if [ -z $ENTRY_POINT ]; then
            echo "::error::invalid target"
            exit 1
          fi

          FORMAT=$(jq -r 'if .type == "module" then "esm" else "cjs" end' package.json)
          SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")

          mkdir "$GITHUB_RUN_ID"

          # bundle compiled code, excluding node_modules
          curl -fsSL https://esbuild.github.io/dl/v0.21.5 | sh
          ./esbuild index=$ENTRY_POINT --bundle --format=$FORMAT --platform=node --target=node20 --packages=external --outdir="$GITHUB_RUN_ID" --allow-overwrite

          # create a new package.json file, with the updated entry point
          jq --arg sha "+$SHORT_SHA" '{"name": .name, "version": (.version + $sha), "main": "index.js", "type": (if has("type") then .type else "commonjs" end), "dependencies": .dependencies}' package.json > "$GITHUB_RUN_ID/package.json"

          DEFAULT_FILES="host.json"
          FILES=$(jq -r --arg default "$DEFAULT_FILES" '(.files // [$default]) | join(" ")' package.json)

          # create the artifact (zip) with node_modules, index.js and package.json
          zip -r $BUNDLE_NAME.zip node_modules $FILES
          zip -ju "$BUNDLE_NAME.zip" "$GITHUB_RUN_ID/index.js" "$GITHUB_RUN_ID/package.json"

          echo "artifact-path=$(realpath "$BUNDLE_NAME.zip")" >> "$GITHUB_OUTPUT"

      - name: Upload Artifact
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}
          file_path: ${{ steps.make-artifact.outputs.artifact-path }}

  deploy:
    name: Deploy
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    needs: [build]
    if: ${{ !github.event.act && !inputs.auto_deploy_to_staging }}
    environment: ${{ inputs.environment }}-cd
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download Artifact
        uses: pagopa/dx/.github/actions/download-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy
        if: ${{ !inputs.use_staging_slot }}
        run: |
          az webapp deploy \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --name "$WEB_APP_NAME" \
            --src-path "$BUNDLE_NAME".zip \
            --type zip \
            --async false

      - name: Deploy to Staging Slot
        if: ${{ inputs.use_staging_slot }}
        run: |
          az webapp deploy \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --name "$WEB_APP_NAME" \
            --slot staging \
            --src-path "$BUNDLE_NAME".zip \
            --type zip \
            --async false

      - name: Swap Staging and Production Slots
        if: ${{ inputs.use_staging_slot }}
        run: |
          az webapp deployment slot swap \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --name "$WEB_APP_NAME" \
            --slot staging \
            --target-slot production

  # Automatically approve deployment to staging slot
  approve_staging:
    name: Auto-Approve Staging Slot Deployment
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ !github.event.act && inputs.use_staging_slot && inputs.auto_deploy_to_staging }}

    steps:
      - name: Approve Next Step
        run: |

          deployments=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/pending_deployments)

          is_environment_matching=$(echo "$deployments" |
            jq --arg GH_ENV "$REQUIRED_ENVIRONMENT" '.[] | select(.environment.name == $GH_ENV)')

          if [ -z "$is_environment_matching" ]; then
            echo "::error::Environment $REQUIRED_ENVIRONMENT not found."
            echo "::warning::Check if the deployment was already approved by one of the reviewers."
            exit 1
          fi

          can_user_approve=$(echo "$deployments" |
            jq '.[] | select(.current_user_can_approve == true)')

          if [ -z "$can_user_approve" ]; then
            echo "::error::${{ github.actor }} is not a reviewer"
            echo "::warning::Auto Approval not available, the user is not a reviewer of the environment $REQUIRED_ENVIRONMENT."
            exit 1
          fi

          env_id=$(echo "$deployments" | jq -r '.[0].environment.id')

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/pending_deployments \
            -F "environment_ids[]=$env_id" \
            -f "state=approved" \
            -f "comment=Auto approve for staging slot"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_DEPLOYMENT_APPROVAL }}
          REQUIRED_ENVIRONMENT: ${{ inputs.environment }}-cd

  deploy_staging:
    name: Deploy to Staging
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    needs: [build]
    if: ${{ !github.event.act && inputs.use_staging_slot && inputs.auto_deploy_to_staging }}
    environment: ${{ inputs.environment }}-cd
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download Artifact
        uses: pagopa/dx/.github/actions/download-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy to Staging Slot
        run: |
          az webapp deploy \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --name "$WEB_APP_NAME" \
            --slot staging \
            --src-path "$BUNDLE_NAME".zip \
            --type zip \
            --async false

  deploy_prod:
    name: Deploy to Production
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    needs: [deploy_staging]
    if: ${{ !github.event.act && inputs.use_staging_slot && inputs.auto_deploy_to_staging }}
    environment: ${{ inputs.environment }}-cd
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Swap Staging and Production Slots
        if: ${{ inputs.use_staging_slot }}
        run: |
          az webapp deployment slot swap \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --name "$WEB_APP_NAME" \
            --slot staging \
            --target-slot production
