name: Build and Deploy Static Site to Azure CDN

# This reusable workflow builds a static application from a monorepo workspace,
# uploads the assets to an Azure Storage Account, and deploys them via Azure CDN.
# It is designed to be called by other workflows.

on:
  workflow_call:
    inputs:
      workspace_name:
        description: The name of the workspace to create the artifact for.
        type: string
        required: true
      storage_account_name:
        description: Azure Storage account name where the assets will be uploaded.
        type: string
        required: true
      blob_container_name:
        description: Blob container name within the Azure Storage account.
        type: string
        required: false
        default: '\$web'
      resource_group_name:
        description: CDN resource group name.
        type: string
        required: true
      profile_name:
        description: CDN Profile name associated with the endpoint.
        type: string
        required: true
      endpoint_name:
        description: CDN endpoint name where the assets will be served.
        type: string
        required: true
      environment:
        description: Environment where the artifact will be deployed.
        type: string
        required: true
      use_private_agent:
        description: Use a private agent to deploy the built artifact.
        type: boolean
        required: false
        default: false
      use_labels:
        description: Use labels to start the right environment's GitHub runner. If use_labels is true, also use_private_agent must be set to true
        type: boolean
        required: false
        default: false
      override_labels:
        description: Needed for special cases where the environment alone is not sufficient as a distinguishing label
        type: string
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-cd
  cancel-in-progress: true

env:
  BUNDLE_NAME: bundle

jobs:
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ inputs.workspace_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Prune
        run: npx turbo@2 prune --scope=${{ env.WORKSPACE }}

      - name: Node Setup
        id: node-setup
        uses: pagopa/dx/.github/actions/node-setup@main
        with:
          working_dir: ./out
      
      # Install dependencies based on the detected package manager
      # Exec the specific install command for npm, yarn, or pnpm 
      # that garantees a clean install without modifying the lock file
      - name: Install dependencies (npm)
        if: steps.node-setup.outputs.package-manager == 'npm'
        run: npm ci
        working-directory: ./out

      - name: Install dependencies (yarn)
        if: steps.node-setup.outputs.package-manager == 'yarn'
        run: yarn install --immutable
        working-directory: ./out

      - name: Install dependencies (pnpm)
        if: steps.node-setup.outputs.package-manager == 'pnpm'
        run: pnpm install --frozen-lockfile
        working-directory: ./out

      - name: Build project
        run: ${{ steps.node-setup.outputs.package-manager }} run build
        working-directory: ./out

      - name: Find dist directory path
        id: find_dist
        run: |
          dist_path=$(find ./out -path '*/node_modules' -prune -o -type d -name dist -print | head -n 1)
          echo "Found dist directory at: $dist_path"
          echo "dist_path=$dist_path" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}
          file_path: ${{ steps.find_dist.outputs.dist_path }}

  deploy:
    name: Deploy
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    needs: [build]
    if: ${{ !github.event.act }}
    environment: ${{ inputs.environment }}-ci #cd
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Download Artifact
        uses: pagopa/dx/.github/actions/download-artifact@main
        with:
          bundle_name: ${{ env.BUNDLE_NAME }}
          file_path: "./dist"

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy Assets and Purge CDN
        uses: pagopa/dx/.github/actions/cdn-code-deploy@feat-add-cdn-deploy-workflow #main
        with:
          storage_account_name: ${{ env.STORAGE_ACCOUNT_NAME }}
          blob_container_name: "${{ env.BLOB_CONTAINER_NAME }}"
          resource_group_name: ${{ env.RESOURCE_GROUP_NAME }}
          profile_name: ${{ env.CDN_PROFILE_NAME }}
          endpoint_name: ${{ env.CDN_ENDPOINT_NAME }}
        env:
          STORAGE_ACCOUNT_NAME: ${{ inputs.storage_account_name }}
          RESOURCE_GROUP_NAME: ${{ inputs.resource_group_name }}
          CDN_PROFILE_NAME: ${{ inputs.profile_name }}
          CDN_ENDPOINT_NAME: ${{ inputs.endpoint_name }}
          BLOB_CONTAINER_NAME: ${{ inputs.blob_container_name }}