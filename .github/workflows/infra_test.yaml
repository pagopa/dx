name: Test Terraform modules

on:
  workflow_dispatch:
  push:
    branches:
      # - main
      - CES-670-creare-una-pipeline-di-ci-per-avviare-gli-unit-test-terraform
    # paths:
    #   - "infra/modules/**"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true

jobs:
  get-modified-modules:
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get modified modules
        id: get-modules
        run: |
          folders_list=$(git diff --name-only origin/main ${{ github.sha }} infra/modules | xargs -r dirname | sed 's#^infra\/modules/\([^/]*\).*#\1#' | uniq | jq -R -c . | jq -s -c .)
          echo Modules that have changed: $folders_list
          echo "modules=$folders_list" >> $GITHUB_OUTPUT

    outputs:
      modules: ${{ steps.get-modules.outputs.modules }}

  get-all-modules:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get all modules
        id: get-all-modules
        run: |
          folders_list=$(find infra/modules -mindepth 1 -maxdepth 1 -type d | sed 's#infra/modules/##' | jq -R -c . | jq -s -c .)
          echo "All modules: $folders_list"
          echo "modules=$folders_list" >> $GITHUB_OUTPUT
    outputs:
      modules: ${{ steps.get-all-modules.outputs.modules }}

  terraform-test:
    runs-on: ubuntu-latest
    needs: [get-modified-modules, get-all-modules]
    if: always()
    environment: dev-ci
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJSON(needs.get-all-modules.outputs.modules || needs.get-modified-modules.outputs.modules) }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2 # v2.0.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Set Terraform Version
        id: set-terraform-version
        run: |
          set -eu
          terraform_version=$(cat .terraform-version)
          printf "terraform_version=$terraform_version" >> "$GITHUB_OUTPUT"

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        name: Setup Terraform
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform_version }}

      - name: Terraform Init
        working-directory: infra/modules/${{ matrix.module }}
        run: |
          terraform init

      - name: Terraform Test
        working-directory: infra/modules/${{ matrix.module }}
        run: |
          set -euo pipefail

          terraform test
