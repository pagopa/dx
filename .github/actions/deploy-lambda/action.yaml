name: Deploy Lambda Function
description: Deploy a Lambda function by uploading code to S3 and updating the function

inputs:
  function_name:
    description: 'The name of the Lambda function'
    required: true
  working_directory:
    description: 'The working directory where the lambda code is located'
    required: true
  aws_region:
    description: 'The AWS region where the lambda is deployed'
    required: false
    default: 'eu-south-1'
  zip_file_name:
    description: 'Name of the zip file to create (defaults to function_name.zip)'
    required: false
  s3_bucket:
    description: 'The S3 bucket where the lambda code will be uploaded (optional - if not provided, direct upload will be used)'
    required: false

runs:
  using: "composite"
  steps:
    - name: Set zip file name
      shell: bash
      run: |
        if [ -z "${{ inputs.zip_file_name }}" ]; then
          echo "ZIP_FILE_NAME=${{ inputs.function_name }}.zip" >> $GITHUB_ENV
        else
          echo "ZIP_FILE_NAME=${{ inputs.zip_file_name }}" >> $GITHUB_ENV
        fi

    - name: Package Lambda function
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "Packaging Lambda function: ${{ inputs.function_name }}"
        echo "Working directory: $(pwd)"
        echo "Contents:"
        ls -la

        # Create the zip file
        zip -r ${{ env.ZIP_FILE_NAME }} . -x "*.git*" "*.DS_Store*" "node_modules/.cache/*"

        echo "Created zip file: ${{ env.ZIP_FILE_NAME }}"
        echo "Zip file size: $(du -h ${{ env.ZIP_FILE_NAME }})"

    - name: Upload to S3
      if: ${{ inputs.s3_bucket != '' }}
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "Uploading ${{ env.ZIP_FILE_NAME }} to S3 bucket: ${{ inputs.s3_bucket }}"

        aws s3 cp ${{ env.ZIP_FILE_NAME }} \
          s3://${{ inputs.s3_bucket }}/${{ env.ZIP_FILE_NAME }} \
          --region ${{ inputs.aws_region }}

    - name: Update Lambda function code from S3
      if: ${{ inputs.s3_bucket != '' }}
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "Updating Lambda function: ${{ inputs.function_name }} from S3"

        aws lambda update-function-code \
          --function-name ${{ inputs.function_name }} \
          --s3-bucket ${{ inputs.s3_bucket }} \
          --s3-key ${{ env.ZIP_FILE_NAME }} \
          --region ${{ inputs.aws_region }}

        echo "Lambda function updated successfully from S3"

    - name: Update Lambda function code directly
      if: ${{ inputs.s3_bucket == '' }}
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "Updating Lambda function: ${{ inputs.function_name }} with direct upload"

        aws lambda update-function-code \
          --function-name ${{ inputs.function_name }} \
          --zip-file fileb://${{ env.ZIP_FILE_NAME }} \
          --region ${{ inputs.aws_region }}

        echo "Lambda function updated successfully with direct upload"

    - name: Wait for function update to complete
      shell: bash
      run: |
        echo "Waiting for function update to complete..."

        aws lambda wait function-updated \
          --function-name ${{ inputs.function_name }} \
          --region ${{ inputs.aws_region }}

        echo "Function update completed"

    - name: Clean up zip file
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        rm -f ${{ env.ZIP_FILE_NAME }}
        echo "Cleaned up zip file"
