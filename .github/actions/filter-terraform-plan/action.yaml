name: 'Run and Filter Terraform Plan'
description: 'Executes `terraform plan`, removes sensitive information from the output, and strips all unnecessary log lines.'

inputs:
  base-path:
    description: 'The directory where terraform plan will be executed. (Defaults to the root of the repository)'
    required: false
    default: '.'
  no-refresh:
    description: 'If true, the terraform plan will be executed with the -refresh=false and -lock=false flags.'
    required: false
    default: 'false'
  sensitive-keys:
    description: 'A comma-separated list of sensitive keys to filter from the plan output.'
    required: true
  upload-artifact:
    description: 'If true, the filtered plan will be uploaded as an artifact.'
    required: false
    default: 'false'

outputs:
  summary_line:
    description: "A summary line indicating the number of resources to be added, changed, or destroyed."
    value: ${{ steps.plan.outputs.summary_line }}
  filtered_plan_path:
    description: "The path to the file containing the filtered output of the `terraform plan` command."
    value: ${{ steps.plan.outputs.filtered_plan_path }}

runs:
  using: "composite"
  steps:
    - name: Set Terraform Refresh
      shell: bash
      run: |
        if [ "$NO_REFRESH" == "true" ]; then
          echo "TF_PLAN_REFRESH_FLAG=-refresh=false -lock=false" >> $GITHUB_ENV
        else
          echo "TF_PLAN_REFRESH_FLAG=" >> $GITHUB_ENV
        fi
      env:
        NO_REFRESH: ${{ inputs.no-refresh }}

    - name: Run Terraform Plan and Filter Output
      id: plan
      shell: bash
      run: |
        if [[ -z "$SENSITIVE_KEYS" ]]; then
          echo "Error: The 'sensitive-keys' input is required."
          exit 1
        fi

        # --- Dynamically build the sed filter expressions ---
        SED_EXPRESSIONS=()

        for key in $(echo "$SENSITIVE_KEYS" | tr ',' '\n'); do
          trimmed_key=$(echo "$key" | xargs)
          if [[ -n "$trimmed_key" ]]; then
            SED_EXPRESSIONS+=(-e "s/(\"?${trimmed_key}\"?\s*[:=]\s*)\".*?\"/\\1\"[REDACTED]\"/I")
          fi
        done

        # --- Add generic regex filters for high-risk patterns ---
        SED_EXPRESSIONS+=(
          # Anything that looks like a private key block
          -e "s/-----BEGIN[[:space:]]+.*?-----.*?-----END[[:space:]]+.*?-----/[REDACTED]/gI"
          # Long base64-like strings (â‰¥ 40 chars)
          -e "s/[A-Za-z0-9+\/=]{40,}/[REDACTED]/g"
          # UUID-like values
          -e "s/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/[REDACTED]/g"
          # Azure resource keys / connection strings often have '=' followed by long tokens
          -e "s/(=)[A-Za-z0-9\/\+]{20,}/\\1[REDACTED]/g"
        )

        echo "--- Executing Plan in: $WORKING_DIRECTORY ---"
        cd "$WORKING_DIRECTORY"

        # Run terraform plan, capture its exit code
        set +e

        terraform plan \
          -no-color \
          -lock-timeout=120s \
          $TF_PLAN_REFRESH_FLAG \
          -input=false 2>&1 | \
          sed -E "${SED_EXPRESSIONS[@]}" | \
          tee "$PLAN_FILE"

        PLAN_EXIT_CODE=${PIPESTATUS[0]}
        set -e

        echo "--- Plan executed with exit code: $PLAN_EXIT_CODE ---"

        # --- Handle Exit Code ---
        # The step should FAIL ONLY on a true error (exit code 1)
        # It should SUCCEED for no changes (0) and changes detected (2)
        if [[ "$PLAN_EXIT_CODE" -eq 1 ]]; then
          echo "::error::Terraform plan failed with a critical error."
          exit 1
        fi

        # --- Reduce file size ---
        # Extracts only the diff section from the Plan by skipping everything before the resource changes,
        # and filters out non-essential log lines like state refreshes and reads.
        if [ -s $PLAN_FILE ]; then
          sed -n '/^  #/,$p' $PLAN_FILE | grep -Ev "Refreshing state|state lock|Reading|Read" > ${PLAN_FILE}.tmp || echo "No changes detected." > ${PLAN_FILE}.tmp
        else
          echo "No plan output available." > ${PLAN_FILE}.tmp
        fi
        mv ${PLAN_FILE}.tmp $PLAN_FILE

        # --- Extract Summary Line ---
        # The summary with number of resources to be added, changed, or destroyed (will be used in case the plan output is too long)
        SUMMARY_LINE=$(grep -E "^Plan: [0-9]+ to (add|change|destroy|import)" $PLAN_FILE || echo "No changes.")

        # --- Define outputs ---
        echo "filtered_plan_path=$WORKING_DIRECTORY/$PLAN_FILE" >> $GITHUB_OUTPUT
        echo "summary_line=$SUMMARY_LINE" >> $GITHUB_OUTPUT
      env:
        WORKING_DIRECTORY: ${{ inputs.base-path }}
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        SENSITIVE_KEYS: ${{ inputs.sensitive-keys }}
        PLAN_FILE: filtered_plan.txt

    - name: Upload Artifact
      if: ${{ inputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: filtered-terraform-plan
        path: ${{ steps.plan.outputs.filtered_plan_path }}
        if-no-files-found: error
        retention-days: 7
