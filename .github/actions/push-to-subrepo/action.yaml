name: "Push to subrepository"
description: "Push module or provider to subrepository"

inputs:
  git_name:
    description: "Git User Name"
    required: false
    default: GitHub Actions
  git_email:
    description: "Git User Email"
    required: false
    default: actions@github.com
  github_pat:
    description: "GitHub Personal Access Token"
    required: true
  repo_type:
    description: "Repository type: 'module' or 'provider'"
    required: true
    default: "module"
  name:
    description: "Module or Provider name"
    required: true
  repo_owner:
    description: "Owner of the GitHub repository"
    required: false
    default: pagopa-dx

runs:
  using: "composite"

  steps:
    - name: Setup git for subtree
      shell: bash
      run: |
        # Fix dubious ownership
        git config --global --add safe.directory /github/workspace

        # Set git email and name
        git config --global user.email "${{ inputs.git_email }}"
        git config --global user.name "${{ inputs.git_name }}"

        # Configure Git for authentication
        git config --global url."https://api:${{ inputs.github_pat }}@github.com/".insteadOf "https://github.com/"
        git config --unset http."https://github.com/".extraheader

    - name: Push Subtree to Repository
      shell: bash
      env:
        ITEM_NAME: ${{ inputs.name }}
        REPO_OWNER: ${{ inputs.repo_owner }}
        REPO_TYPE: ${{ inputs.repo_type }}
      run: |
        set -euo pipefail
        
        # Handle different repository types
        if [[ "$REPO_TYPE" == "module" ]]; then
          # Module setup
          PREFIX_PATH="infra/modules/${ITEM_NAME}"
          REGISTRY_ITEM_NAME=${ITEM_NAME//_/\-}
          PROVIDER=$(jq -r '.provider // "azurerm"' ${PREFIX_PATH}/package.json)
          REPO_URL="https://github.com/$REPO_OWNER/terraform-${PROVIDER}-${REGISTRY_ITEM_NAME}"
          BRANCH_NAME="${ITEM_NAME}-branch"
          REMOTE_NAME="module-repo"
        elif [[ "$REPO_TYPE" == "provider" ]]; then
          # Provider setup
          PREFIX_PATH="apps/providers/${ITEM_NAME}"
          REGISTRY_ITEM_NAME=${ITEM_NAME//_/\-}
          REPO_URL="https://github.com/$REPO_OWNER/terraform-provider-${REGISTRY_ITEM_NAME}"
          BRANCH_NAME="${ITEM_NAME}-branch"
          REMOTE_NAME="provider-repo"
        else
          echo "Error: Invalid repo_type. Must be 'module' or 'provider'"
          exit 1
        fi
        
        echo "Working with: $REPO_URL"
        echo "PREFIX_PATH: $PREFIX_PATH"
        
        # # Add remote repository
        # git remote add $REMOTE_NAME "$REPO_URL"

        # # Extract the complete history of the subrepo
        # git subtree split --prefix=$PREFIX_PATH -b $BRANCH_NAME

        # # Check if the main branch exists on the remote
        # git fetch $REMOTE_NAME main --tags

        # # Merge the changes without overwriting the history
        # git branch temp-branch $REMOTE_NAME/main
        # git checkout $BRANCH_NAME
        # git merge --allow-unrelated-histories -s ours --no-edit temp-branch
        
        # # Define the tag name
        # if [[ "$REPO_TYPE" == "provider" ]]; then
        #   # For providers, add 'v' prefix to the tag
        #   # Ref.: https://developer.hashicorp.com/terraform/registry/providers/publishing#creating-a-github-release
        #   TAG_NAME="v$(jq -r '.version' package.json)"
        # else
        #   # For modules, use version as is
        #   TAG_NAME=$(jq -r '.version' package.json)
        # fi

        # # Check if the tag exists on the remote
        # if git ls-remote --tags $REMOTE_NAME | grep "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
        #   echo "Tag $TAG_NAME already exists on the remote."
        # else
        #   echo "Tag $TAG_NAME does not exist on the remote. Creating and pushing the tag..."
        #   # Create the tag locally
        #   git tag "$TAG_NAME"
        #   # Push the tag to the remote
        #   git push $REMOTE_NAME "$TAG_NAME"
        # fi

        # # Push changes and tags
        # git push $REMOTE_NAME ${BRANCH_NAME}:main