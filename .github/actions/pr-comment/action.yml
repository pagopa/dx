name: "PR Comment Manager"
description: "Creates or updates comments on Pull Requests"
inputs:
  comment-body:
    description: "The comment content to post (supports markdown). Either this or comment-body-file must be provided"
    required: false
  comment-body-file:
    description: "Path to a file containing the comment content (supports markdown). Either this or comment-body must be provided"
    required: false
  search-pattern:
    description: "Text pattern to identify existing comments to delete. If not provided, a new comment will always be created"
    required: false

runs:
  using: "composite"
  steps:
    - name: Manage PR Comment
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        SEARCH_PATTERN: ${{ inputs.search-pattern }}
        COMMENT_BODY: ${{ inputs.comment-body }}
        COMMENT_BODY_FILE: ${{ inputs.comment-body-file }}
      with:
        script: |
          const fs = require('fs');
          const commentBody = process.env.COMMENT_BODY;
          const commentBodyFile = process.env.COMMENT_BODY_FILE;
          const searchPattern = process.env.SEARCH_PATTERN;

          // Validate inputs
          if (!commentBody && !commentBodyFile) {
            throw new Error('Either comment-body or comment-body-file must be provided');
          }

          // Read body from file if provided
          const body = commentBodyFile
            ? fs.readFileSync(commentBodyFile, 'utf8')
            : commentBody;

          // Find and delete all existing comments if search pattern is provided
          if (searchPattern) {
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Debug: log all comments and pattern matching
            console.log('--- PR Comment Debug ---');
            console.log('Search pattern:', searchPattern);
            comments.forEach((comment, idx) => {
              const found = comment.body.includes(searchPattern);
              console.log(`Comment #${idx}: found=${found}`);
              console.log(comment.body);
            });

            // Rendiamo il confronto piÃ¹ robusto: trim e case insensitive
            const normalizedPattern = searchPattern.trim().toLowerCase();
            const matchingComments = comments.filter(comment =>
              comment.body && comment.body.toLowerCase().includes(normalizedPattern)
            );

            for (const comment of matchingComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }
          }

          // Create new comment (always)
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body
          });
