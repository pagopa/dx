name: Check Terraform Modules Lock
description: Verifies that Terraform module lock hashes are up to date

inputs:
  terraform_version:
    description: Terraform version to use. If not set, it will be retrieved from .terraform-version file.
    required: false
  folder:
    description: Directory containing Terraform code to check
    required: true
  fail_on_error:
    description: If true, the action will fail if the module locks need updating
    required: false
    default: 'true'
  verbose:
    description: Enable verbose output
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.7
      with:
        fetch-depth: 0

    - name: Get terraform version
      id: get-terraform-version
      uses: pagopa/dx/.github/actions/get-terraform-version@main
      with:
        default_version: "1.10.4"
        terraform_dir: ${{ inputs.folder }}

    - name: Get pre-commit version
      id: get-pre-commit-version
      uses: pagopa/dx/.github/actions/get-pre-commit-version@main
      with:
        default_version: "1.96.2"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
      with:
        terraform_version: ${{ inputs.terraform_version || steps.get-terraform-version.outputs.terraform_version }}

    - name: Setup Python
      uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Setup Pre-commit environment
      shell: bash
      run: |
        # Ensure pip is available and up to date
        python -m ensurepip --upgrade || true
        python -m pip install --upgrade pip

        # Install pre-commit
        python -m pip install pre-commit

        # Install jq via the system package manager if needed
        if ! command -v jq &> /dev/null; then
          if command -v apt-get &> /dev/null; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          elif command -v apk &> /dev/null; then
            apk add --no-cache jq
          elif command -v yum &> /dev/null; then
            yum install -y jq
          else
            echo "::warning::Could not install jq automatically. Please make sure it's available in the PATH."
          fi
        fi

    - name: Run lock_modules check
      id: lock-check
      shell: bash
      env:
        PRE_COMMIT_VERBOSE: ${{ inputs.verbose == 'true' && '1' || '0' }}
        LOCK_MODULES_JSON_OUTPUT_FILE: "lock_output.json"
      run: |
        set +e  # Continue execution even if pre-commit fails

        cd ${{ inputs.folder }}

        # Run just the lock_modules check
        pre-commit run lock_modules --all-files 2>&1 | tee /tmp/pre-commit-output.log

        PRE_COMMIT_EXIT_CODE=${PIPESTATUS[0]}
        echo "exit_code=$PRE_COMMIT_EXIT_CODE" >> $GITHUB_OUTPUT

    - name: Summarize module check results
      shell: bash
      run: |
        cd ${{ inputs.folder }}
        echo "## Terraform Modules Lock Summary" >> "$GITHUB_STEP_SUMMARY"

        if [ -f "lock_output.json" ]; then
          # Use default values with error handling around jq calls
          TOTAL_MODULES=$(jq -r '.summary.total_modules // 0' lock_output.json 2>/dev/null || echo "0")
          EXIT_CODE=$(jq -r '.summary.exit_code // 0' lock_output.json 2>/dev/null || echo "0")

          # Count modules by status with error handling
          NEW_MODULES=0
          CHANGED_MODULES=0
          REMOVED_MODULES=0

          # Safely parse JSON with fallbacks
          if [ "$TOTAL_MODULES" -gt 0 ]; then
            NEW_MODULES=$(jq -r '[.results[]? | select(.status == "new")] | length' lock_output.json 2>/dev/null || echo "0")
            CHANGED_MODULES=$(jq -r '[.results[]? | select(.status == "changed")] | length' lock_output.json 2>/dev/null || echo "0")
            REMOVED_MODULES=$(jq -r '[.results[]? | select(.status == "removed")] | length' lock_output.json 2>/dev/null || echo "0")

            if [ "$CHANGED_MODULES" -gt 0 ]; then
              echo "## 🔴 Terraform modules changed - Action Required" >> "$GITHUB_STEP_SUMMARY"
            elif [ "$NEW_MODULES" -gt 0 ]; then
              echo "## 🟡 Terraform modules added - Action Required" >> "$GITHUB_STEP_SUMMARY"
            elif [ "$REMOVED_MODULES" -gt 0 ]; then
              echo "## 🟢 Terraform modules removed" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "## ⚠️ Terraform modules locks changed - Action Required" >> "$GITHUB_STEP_SUMMARY"
            fi

            # Module stats section
            echo "### Module Stats:" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Total modules**: ${TOTAL_MODULES}" >> "$GITHUB_STEP_SUMMARY"
            echo "- **New modules**: ${NEW_MODULES}" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Changed modules**: ${CHANGED_MODULES}" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Removed modules**: ${REMOVED_MODULES}" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            # Add remediation instructions
            echo "> [!IMPORTANT]" >> "$GITHUB_STEP_SUMMARY"
            echo "> ### What should be done next" >> "$GITHUB_STEP_SUMMARY"
            echo ">" >> "$GITHUB_STEP_SUMMARY"
            echo "> 1. Run this command locally to update the module locks:" >> "$GITHUB_STEP_SUMMARY"
            echo ">" >> "$GITHUB_STEP_SUMMARY"
            echo "> ```bash" >> "$GITHUB_STEP_SUMMARY"
            echo "> pre-commit run -a lock_modules" >> "$GITHUB_STEP_SUMMARY"
            echo "> ```" >> "$GITHUB_STEP_SUMMARY"
            echo ">" >> "$GITHUB_STEP_SUMMARY"
            echo "> 2. Then open a dedicated Pull Request with the updated module locks" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            # Display module details in a collapsible table if any changes
            if [ "$NEW_MODULES" -gt 0 ] || [ "$CHANGED_MODULES" -gt 0 ] || [ "$REMOVED_MODULES" -gt 0 ]; then
              echo "<details>" >> "$GITHUB_STEP_SUMMARY"
              echo "<summary>📊 Module Details</summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
              echo "| Module | Status | Version | Path |" >> "$GITHUB_STEP_SUMMARY"
              echo "|--------|--------|---------|------|" >> "$GITHUB_STEP_SUMMARY"

              # Use simpler concatenation approach for jq to avoid syntax errors
              jq -r '.results[] | "| " + .module + " | " + .status + " | " + .version + " | " + (.path // "N/A") + " |"' lock_output.json >> "$GITHUB_STEP_SUMMARY" || {
                echo "Error processing JSON file. Raw content:" >> "$GITHUB_STEP_SUMMARY"
                echo '```json' >> "$GITHUB_STEP_SUMMARY"
                cat lock_output.json >> "$GITHUB_STEP_SUMMARY"
                echo '```' >> "$GITHUB_STEP_SUMMARY"
              }
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "✅ No Terraform module changes detected" >> "$GITHUB_STEP_SUMMARY"
          fi
        else
          echo "⚠️ No lock output file found. Check if lock_modules check was executed correctly." >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Check for failure
      if: ${{ inputs.fail_on_error == 'true' }}
      shell: bash
      run: |
        if [ "${{ steps.lock-check.outputs.exit_code }}" != "0" ]; then
          echo "::error::Terraform module lock check failed. Module hashes don't match - please update them with pre-commit run -a lock_modules"
          exit 1
        fi
